schema {
  query: Query
  subscription: Subscription
}

"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type AirBattle {
  id: ID!
  battleId: BigInt!
  attackerId: BigInt!
  defenderId: BigInt!
  attackerFighterLosses: Bytes!
  attackerBomberLosses: Bytes!
  defenderFighterLosses: Bytes!
  infrastructureDamage: BigInt!
  tankDamage: BigInt!
  cruiseMissileDamage: BigInt!
  transactionHash: String!
}

input AirBattle_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  battleId: BigInt
  battleId_not: BigInt
  battleId_gt: BigInt
  battleId_lt: BigInt
  battleId_gte: BigInt
  battleId_lte: BigInt
  battleId_in: [BigInt!]
  battleId_not_in: [BigInt!]
  attackerId: BigInt
  attackerId_not: BigInt
  attackerId_gt: BigInt
  attackerId_lt: BigInt
  attackerId_gte: BigInt
  attackerId_lte: BigInt
  attackerId_in: [BigInt!]
  attackerId_not_in: [BigInt!]
  defenderId: BigInt
  defenderId_not: BigInt
  defenderId_gt: BigInt
  defenderId_lt: BigInt
  defenderId_gte: BigInt
  defenderId_lte: BigInt
  defenderId_in: [BigInt!]
  defenderId_not_in: [BigInt!]
  attackerFighterLosses: Bytes
  attackerFighterLosses_not: Bytes
  attackerFighterLosses_gt: Bytes
  attackerFighterLosses_lt: Bytes
  attackerFighterLosses_gte: Bytes
  attackerFighterLosses_lte: Bytes
  attackerFighterLosses_in: [Bytes!]
  attackerFighterLosses_not_in: [Bytes!]
  attackerFighterLosses_contains: Bytes
  attackerFighterLosses_not_contains: Bytes
  attackerBomberLosses: Bytes
  attackerBomberLosses_not: Bytes
  attackerBomberLosses_gt: Bytes
  attackerBomberLosses_lt: Bytes
  attackerBomberLosses_gte: Bytes
  attackerBomberLosses_lte: Bytes
  attackerBomberLosses_in: [Bytes!]
  attackerBomberLosses_not_in: [Bytes!]
  attackerBomberLosses_contains: Bytes
  attackerBomberLosses_not_contains: Bytes
  defenderFighterLosses: Bytes
  defenderFighterLosses_not: Bytes
  defenderFighterLosses_gt: Bytes
  defenderFighterLosses_lt: Bytes
  defenderFighterLosses_gte: Bytes
  defenderFighterLosses_lte: Bytes
  defenderFighterLosses_in: [Bytes!]
  defenderFighterLosses_not_in: [Bytes!]
  defenderFighterLosses_contains: Bytes
  defenderFighterLosses_not_contains: Bytes
  infrastructureDamage: BigInt
  infrastructureDamage_not: BigInt
  infrastructureDamage_gt: BigInt
  infrastructureDamage_lt: BigInt
  infrastructureDamage_gte: BigInt
  infrastructureDamage_lte: BigInt
  infrastructureDamage_in: [BigInt!]
  infrastructureDamage_not_in: [BigInt!]
  tankDamage: BigInt
  tankDamage_not: BigInt
  tankDamage_gt: BigInt
  tankDamage_lt: BigInt
  tankDamage_gte: BigInt
  tankDamage_lte: BigInt
  tankDamage_in: [BigInt!]
  tankDamage_not_in: [BigInt!]
  cruiseMissileDamage: BigInt
  cruiseMissileDamage_not: BigInt
  cruiseMissileDamage_gt: BigInt
  cruiseMissileDamage_lt: BigInt
  cruiseMissileDamage_gte: BigInt
  cruiseMissileDamage_lte: BigInt
  cruiseMissileDamage_in: [BigInt!]
  cruiseMissileDamage_not_in: [BigInt!]
  transactionHash: String
  transactionHash_not: String
  transactionHash_gt: String
  transactionHash_lt: String
  transactionHash_gte: String
  transactionHash_lte: String
  transactionHash_in: [String!]
  transactionHash_not_in: [String!]
  transactionHash_contains: String
  transactionHash_contains_nocase: String
  transactionHash_not_contains: String
  transactionHash_not_contains_nocase: String
  transactionHash_starts_with: String
  transactionHash_starts_with_nocase: String
  transactionHash_not_starts_with: String
  transactionHash_not_starts_with_nocase: String
  transactionHash_ends_with: String
  transactionHash_ends_with_nocase: String
  transactionHash_not_ends_with: String
  transactionHash_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [AirBattle_filter]
  or: [AirBattle_filter]
}

enum AirBattle_orderBy {
  id
  battleId
  attackerId
  defenderId
  attackerFighterLosses
  attackerBomberLosses
  defenderFighterLosses
  infrastructureDamage
  tankDamage
  cruiseMissileDamage
  transactionHash
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

type Blockade {
  id: ID!
  battleId: BigInt!
  attackerLosses: [BigInt!]!
  defenderLosses: [BigInt!]!
  transactionHash: String!
}

input Blockade_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  battleId: BigInt
  battleId_not: BigInt
  battleId_gt: BigInt
  battleId_lt: BigInt
  battleId_gte: BigInt
  battleId_lte: BigInt
  battleId_in: [BigInt!]
  battleId_not_in: [BigInt!]
  attackerLosses: [BigInt!]
  attackerLosses_not: [BigInt!]
  attackerLosses_contains: [BigInt!]
  attackerLosses_contains_nocase: [BigInt!]
  attackerLosses_not_contains: [BigInt!]
  attackerLosses_not_contains_nocase: [BigInt!]
  defenderLosses: [BigInt!]
  defenderLosses_not: [BigInt!]
  defenderLosses_contains: [BigInt!]
  defenderLosses_contains_nocase: [BigInt!]
  defenderLosses_not_contains: [BigInt!]
  defenderLosses_not_contains_nocase: [BigInt!]
  transactionHash: String
  transactionHash_not: String
  transactionHash_gt: String
  transactionHash_lt: String
  transactionHash_gte: String
  transactionHash_lte: String
  transactionHash_in: [String!]
  transactionHash_not_in: [String!]
  transactionHash_contains: String
  transactionHash_contains_nocase: String
  transactionHash_not_contains: String
  transactionHash_not_contains_nocase: String
  transactionHash_starts_with: String
  transactionHash_starts_with_nocase: String
  transactionHash_not_starts_with: String
  transactionHash_not_starts_with_nocase: String
  transactionHash_ends_with: String
  transactionHash_ends_with_nocase: String
  transactionHash_not_ends_with: String
  transactionHash_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Blockade_filter]
  or: [Blockade_filter]
}

enum Blockade_orderBy {
  id
  battleId
  attackerLosses
  defenderLosses
  transactionHash
}

type BreakBlockade {
  id: ID!
  battleId: BigInt!
  attackerLosses: [BigInt!]!
  defenderLosses: [BigInt!]!
  transactionHash: String!
}

input BreakBlockade_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  battleId: BigInt
  battleId_not: BigInt
  battleId_gt: BigInt
  battleId_lt: BigInt
  battleId_gte: BigInt
  battleId_lte: BigInt
  battleId_in: [BigInt!]
  battleId_not_in: [BigInt!]
  attackerLosses: [BigInt!]
  attackerLosses_not: [BigInt!]
  attackerLosses_contains: [BigInt!]
  attackerLosses_contains_nocase: [BigInt!]
  attackerLosses_not_contains: [BigInt!]
  attackerLosses_not_contains_nocase: [BigInt!]
  defenderLosses: [BigInt!]
  defenderLosses_not: [BigInt!]
  defenderLosses_contains: [BigInt!]
  defenderLosses_contains_nocase: [BigInt!]
  defenderLosses_not_contains: [BigInt!]
  defenderLosses_not_contains_nocase: [BigInt!]
  transactionHash: String
  transactionHash_not: String
  transactionHash_gt: String
  transactionHash_lt: String
  transactionHash_gte: String
  transactionHash_lte: String
  transactionHash_in: [String!]
  transactionHash_not_in: [String!]
  transactionHash_contains: String
  transactionHash_contains_nocase: String
  transactionHash_not_contains: String
  transactionHash_not_contains_nocase: String
  transactionHash_starts_with: String
  transactionHash_starts_with_nocase: String
  transactionHash_not_starts_with: String
  transactionHash_not_starts_with_nocase: String
  transactionHash_ends_with: String
  transactionHash_ends_with_nocase: String
  transactionHash_not_ends_with: String
  transactionHash_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [BreakBlockade_filter]
  or: [BreakBlockade_filter]
}

enum BreakBlockade_orderBy {
  id
  battleId
  attackerLosses
  defenderLosses
  transactionHash
}

scalar Bytes

type CruiseMissileAttack {
  id: ID!
  attackId: BigInt!
  attackerId: BigInt!
  defenderId: BigInt!
  landed: Boolean!
  warId: BigInt!
  damageTypeNumber: BigInt!
  transactionHash: String!
}

input CruiseMissileAttack_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  attackId: BigInt
  attackId_not: BigInt
  attackId_gt: BigInt
  attackId_lt: BigInt
  attackId_gte: BigInt
  attackId_lte: BigInt
  attackId_in: [BigInt!]
  attackId_not_in: [BigInt!]
  attackerId: BigInt
  attackerId_not: BigInt
  attackerId_gt: BigInt
  attackerId_lt: BigInt
  attackerId_gte: BigInt
  attackerId_lte: BigInt
  attackerId_in: [BigInt!]
  attackerId_not_in: [BigInt!]
  defenderId: BigInt
  defenderId_not: BigInt
  defenderId_gt: BigInt
  defenderId_lt: BigInt
  defenderId_gte: BigInt
  defenderId_lte: BigInt
  defenderId_in: [BigInt!]
  defenderId_not_in: [BigInt!]
  landed: Boolean
  landed_not: Boolean
  landed_in: [Boolean!]
  landed_not_in: [Boolean!]
  warId: BigInt
  warId_not: BigInt
  warId_gt: BigInt
  warId_lt: BigInt
  warId_gte: BigInt
  warId_lte: BigInt
  warId_in: [BigInt!]
  warId_not_in: [BigInt!]
  damageTypeNumber: BigInt
  damageTypeNumber_not: BigInt
  damageTypeNumber_gt: BigInt
  damageTypeNumber_lt: BigInt
  damageTypeNumber_gte: BigInt
  damageTypeNumber_lte: BigInt
  damageTypeNumber_in: [BigInt!]
  damageTypeNumber_not_in: [BigInt!]
  transactionHash: String
  transactionHash_not: String
  transactionHash_gt: String
  transactionHash_lt: String
  transactionHash_gte: String
  transactionHash_lte: String
  transactionHash_in: [String!]
  transactionHash_not_in: [String!]
  transactionHash_contains: String
  transactionHash_contains_nocase: String
  transactionHash_not_contains: String
  transactionHash_not_contains_nocase: String
  transactionHash_starts_with: String
  transactionHash_starts_with_nocase: String
  transactionHash_not_starts_with: String
  transactionHash_not_starts_with_nocase: String
  transactionHash_ends_with: String
  transactionHash_ends_with_nocase: String
  transactionHash_not_ends_with: String
  transactionHash_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [CruiseMissileAttack_filter]
  or: [CruiseMissileAttack_filter]
}

enum CruiseMissileAttack_orderBy {
  id
  attackId
  attackerId
  defenderId
  landed
  warId
  damageTypeNumber
  transactionHash
}

type GroundBattle {
  id: ID!
  groundBattleId: BigInt!
  warId: BigInt!
  attackerId: BigInt!
  attackerSoldierLosses: BigInt!
  attackerTankLosses: BigInt!
  defenderId: BigInt!
  defenderSoldierLosses: BigInt!
  defenderTankLosses: BigInt!
  transactionHash: String!
}

input GroundBattle_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  groundBattleId: BigInt
  groundBattleId_not: BigInt
  groundBattleId_gt: BigInt
  groundBattleId_lt: BigInt
  groundBattleId_gte: BigInt
  groundBattleId_lte: BigInt
  groundBattleId_in: [BigInt!]
  groundBattleId_not_in: [BigInt!]
  warId: BigInt
  warId_not: BigInt
  warId_gt: BigInt
  warId_lt: BigInt
  warId_gte: BigInt
  warId_lte: BigInt
  warId_in: [BigInt!]
  warId_not_in: [BigInt!]
  attackerId: BigInt
  attackerId_not: BigInt
  attackerId_gt: BigInt
  attackerId_lt: BigInt
  attackerId_gte: BigInt
  attackerId_lte: BigInt
  attackerId_in: [BigInt!]
  attackerId_not_in: [BigInt!]
  attackerSoldierLosses: BigInt
  attackerSoldierLosses_not: BigInt
  attackerSoldierLosses_gt: BigInt
  attackerSoldierLosses_lt: BigInt
  attackerSoldierLosses_gte: BigInt
  attackerSoldierLosses_lte: BigInt
  attackerSoldierLosses_in: [BigInt!]
  attackerSoldierLosses_not_in: [BigInt!]
  attackerTankLosses: BigInt
  attackerTankLosses_not: BigInt
  attackerTankLosses_gt: BigInt
  attackerTankLosses_lt: BigInt
  attackerTankLosses_gte: BigInt
  attackerTankLosses_lte: BigInt
  attackerTankLosses_in: [BigInt!]
  attackerTankLosses_not_in: [BigInt!]
  defenderId: BigInt
  defenderId_not: BigInt
  defenderId_gt: BigInt
  defenderId_lt: BigInt
  defenderId_gte: BigInt
  defenderId_lte: BigInt
  defenderId_in: [BigInt!]
  defenderId_not_in: [BigInt!]
  defenderSoldierLosses: BigInt
  defenderSoldierLosses_not: BigInt
  defenderSoldierLosses_gt: BigInt
  defenderSoldierLosses_lt: BigInt
  defenderSoldierLosses_gte: BigInt
  defenderSoldierLosses_lte: BigInt
  defenderSoldierLosses_in: [BigInt!]
  defenderSoldierLosses_not_in: [BigInt!]
  defenderTankLosses: BigInt
  defenderTankLosses_not: BigInt
  defenderTankLosses_gt: BigInt
  defenderTankLosses_lt: BigInt
  defenderTankLosses_gte: BigInt
  defenderTankLosses_lte: BigInt
  defenderTankLosses_in: [BigInt!]
  defenderTankLosses_not_in: [BigInt!]
  transactionHash: String
  transactionHash_not: String
  transactionHash_gt: String
  transactionHash_lt: String
  transactionHash_gte: String
  transactionHash_lte: String
  transactionHash_in: [String!]
  transactionHash_not_in: [String!]
  transactionHash_contains: String
  transactionHash_contains_nocase: String
  transactionHash_not_contains: String
  transactionHash_not_contains_nocase: String
  transactionHash_starts_with: String
  transactionHash_starts_with_nocase: String
  transactionHash_not_starts_with: String
  transactionHash_not_starts_with_nocase: String
  transactionHash_ends_with: String
  transactionHash_ends_with_nocase: String
  transactionHash_not_ends_with: String
  transactionHash_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [GroundBattle_filter]
  or: [GroundBattle_filter]
}

enum GroundBattle_orderBy {
  id
  groundBattleId
  warId
  attackerId
  attackerSoldierLosses
  attackerTankLosses
  defenderId
  defenderSoldierLosses
  defenderTankLosses
  transactionHash
}

"""
8 bytes signed integer

"""
scalar Int8

type Message {
  id: ID!
  sender: BigInt!
  receiver: BigInt!
  message: String!
  createdAt: BigInt!
  transactionHash: String!
}

input Message_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  sender: BigInt
  sender_not: BigInt
  sender_gt: BigInt
  sender_lt: BigInt
  sender_gte: BigInt
  sender_lte: BigInt
  sender_in: [BigInt!]
  sender_not_in: [BigInt!]
  receiver: BigInt
  receiver_not: BigInt
  receiver_gt: BigInt
  receiver_lt: BigInt
  receiver_gte: BigInt
  receiver_lte: BigInt
  receiver_in: [BigInt!]
  receiver_not_in: [BigInt!]
  message: String
  message_not: String
  message_gt: String
  message_lt: String
  message_gte: String
  message_lte: String
  message_in: [String!]
  message_not_in: [String!]
  message_contains: String
  message_contains_nocase: String
  message_not_contains: String
  message_not_contains_nocase: String
  message_starts_with: String
  message_starts_with_nocase: String
  message_not_starts_with: String
  message_not_starts_with_nocase: String
  message_ends_with: String
  message_ends_with_nocase: String
  message_not_ends_with: String
  message_not_ends_with_nocase: String
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  transactionHash: String
  transactionHash_not: String
  transactionHash_gt: String
  transactionHash_lt: String
  transactionHash_gte: String
  transactionHash_lte: String
  transactionHash_in: [String!]
  transactionHash_not_in: [String!]
  transactionHash_contains: String
  transactionHash_contains_nocase: String
  transactionHash_not_contains: String
  transactionHash_not_contains_nocase: String
  transactionHash_starts_with: String
  transactionHash_starts_with_nocase: String
  transactionHash_not_starts_with: String
  transactionHash_not_starts_with_nocase: String
  transactionHash_ends_with: String
  transactionHash_ends_with_nocase: String
  transactionHash_not_ends_with: String
  transactionHash_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Message_filter]
  or: [Message_filter]
}

enum Message_orderBy {
  id
  sender
  receiver
  message
  createdAt
  transactionHash
}

type Nation {
  id: ID!
  nationId: BigInt!
  ruler: String!
  name: String!
  owner: Bytes!
  createdAt: BigInt!
  transactionHash: String!
}

input Nation_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  nationId: BigInt
  nationId_not: BigInt
  nationId_gt: BigInt
  nationId_lt: BigInt
  nationId_gte: BigInt
  nationId_lte: BigInt
  nationId_in: [BigInt!]
  nationId_not_in: [BigInt!]
  ruler: String
  ruler_not: String
  ruler_gt: String
  ruler_lt: String
  ruler_gte: String
  ruler_lte: String
  ruler_in: [String!]
  ruler_not_in: [String!]
  ruler_contains: String
  ruler_contains_nocase: String
  ruler_not_contains: String
  ruler_not_contains_nocase: String
  ruler_starts_with: String
  ruler_starts_with_nocase: String
  ruler_not_starts_with: String
  ruler_not_starts_with_nocase: String
  ruler_ends_with: String
  ruler_ends_with_nocase: String
  ruler_not_ends_with: String
  ruler_not_ends_with_nocase: String
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  owner: Bytes
  owner_not: Bytes
  owner_gt: Bytes
  owner_lt: Bytes
  owner_gte: Bytes
  owner_lte: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  transactionHash: String
  transactionHash_not: String
  transactionHash_gt: String
  transactionHash_lt: String
  transactionHash_gte: String
  transactionHash_lte: String
  transactionHash_in: [String!]
  transactionHash_not_in: [String!]
  transactionHash_contains: String
  transactionHash_contains_nocase: String
  transactionHash_not_contains: String
  transactionHash_not_contains_nocase: String
  transactionHash_starts_with: String
  transactionHash_starts_with_nocase: String
  transactionHash_not_starts_with: String
  transactionHash_not_starts_with_nocase: String
  transactionHash_ends_with: String
  transactionHash_ends_with_nocase: String
  transactionHash_not_ends_with: String
  transactionHash_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Nation_filter]
  or: [Nation_filter]
}

enum Nation_orderBy {
  id
  nationId
  ruler
  name
  owner
  createdAt
  transactionHash
}

type NavalAttack {
  id: ID!
  attackerLosses: [BigInt!]!
  defenderLosses: [BigInt!]!
  attackId: BigInt!
  transactionHash: String!
}

input NavalAttack_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  attackerLosses: [BigInt!]
  attackerLosses_not: [BigInt!]
  attackerLosses_contains: [BigInt!]
  attackerLosses_contains_nocase: [BigInt!]
  attackerLosses_not_contains: [BigInt!]
  attackerLosses_not_contains_nocase: [BigInt!]
  defenderLosses: [BigInt!]
  defenderLosses_not: [BigInt!]
  defenderLosses_contains: [BigInt!]
  defenderLosses_contains_nocase: [BigInt!]
  defenderLosses_not_contains: [BigInt!]
  defenderLosses_not_contains_nocase: [BigInt!]
  attackId: BigInt
  attackId_not: BigInt
  attackId_gt: BigInt
  attackId_lt: BigInt
  attackId_gte: BigInt
  attackId_lte: BigInt
  attackId_in: [BigInt!]
  attackId_not_in: [BigInt!]
  transactionHash: String
  transactionHash_not: String
  transactionHash_gt: String
  transactionHash_lt: String
  transactionHash_gte: String
  transactionHash_lte: String
  transactionHash_in: [String!]
  transactionHash_not_in: [String!]
  transactionHash_contains: String
  transactionHash_contains_nocase: String
  transactionHash_not_contains: String
  transactionHash_not_contains_nocase: String
  transactionHash_starts_with: String
  transactionHash_starts_with_nocase: String
  transactionHash_not_starts_with: String
  transactionHash_not_starts_with_nocase: String
  transactionHash_ends_with: String
  transactionHash_ends_with_nocase: String
  transactionHash_not_ends_with: String
  transactionHash_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [NavalAttack_filter]
  or: [NavalAttack_filter]
}

enum NavalAttack_orderBy {
  id
  attackerLosses
  defenderLosses
  attackId
  transactionHash
}

type NukeAttack {
  id: ID!
  attackId: BigInt!
  attackerId: BigInt!
  defenderId: BigInt!
  landed: Boolean!
  warId: BigInt!
  transactionHash: String!
}

input NukeAttack_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  attackId: BigInt
  attackId_not: BigInt
  attackId_gt: BigInt
  attackId_lt: BigInt
  attackId_gte: BigInt
  attackId_lte: BigInt
  attackId_in: [BigInt!]
  attackId_not_in: [BigInt!]
  attackerId: BigInt
  attackerId_not: BigInt
  attackerId_gt: BigInt
  attackerId_lt: BigInt
  attackerId_gte: BigInt
  attackerId_lte: BigInt
  attackerId_in: [BigInt!]
  attackerId_not_in: [BigInt!]
  defenderId: BigInt
  defenderId_not: BigInt
  defenderId_gt: BigInt
  defenderId_lt: BigInt
  defenderId_gte: BigInt
  defenderId_lte: BigInt
  defenderId_in: [BigInt!]
  defenderId_not_in: [BigInt!]
  landed: Boolean
  landed_not: Boolean
  landed_in: [Boolean!]
  landed_not_in: [Boolean!]
  warId: BigInt
  warId_not: BigInt
  warId_gt: BigInt
  warId_lt: BigInt
  warId_gte: BigInt
  warId_lte: BigInt
  warId_in: [BigInt!]
  warId_not_in: [BigInt!]
  transactionHash: String
  transactionHash_not: String
  transactionHash_gt: String
  transactionHash_lt: String
  transactionHash_gte: String
  transactionHash_lte: String
  transactionHash_in: [String!]
  transactionHash_not_in: [String!]
  transactionHash_contains: String
  transactionHash_contains_nocase: String
  transactionHash_not_contains: String
  transactionHash_not_contains_nocase: String
  transactionHash_starts_with: String
  transactionHash_starts_with_nocase: String
  transactionHash_not_starts_with: String
  transactionHash_not_starts_with_nocase: String
  transactionHash_ends_with: String
  transactionHash_ends_with_nocase: String
  transactionHash_not_ends_with: String
  transactionHash_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [NukeAttack_filter]
  or: [NukeAttack_filter]
}

enum NukeAttack_orderBy {
  id
  attackId
  attackerId
  defenderId
  landed
  warId
  transactionHash
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Post {
  id: ID!
  sender: BigInt!
  post: String!
  createdAt: BigInt!
  transactionHash: String!
}

input Post_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  sender: BigInt
  sender_not: BigInt
  sender_gt: BigInt
  sender_lt: BigInt
  sender_gte: BigInt
  sender_lte: BigInt
  sender_in: [BigInt!]
  sender_not_in: [BigInt!]
  post: String
  post_not: String
  post_gt: String
  post_lt: String
  post_gte: String
  post_lte: String
  post_in: [String!]
  post_not_in: [String!]
  post_contains: String
  post_contains_nocase: String
  post_not_contains: String
  post_not_contains_nocase: String
  post_starts_with: String
  post_starts_with_nocase: String
  post_not_starts_with: String
  post_not_starts_with_nocase: String
  post_ends_with: String
  post_ends_with_nocase: String
  post_not_ends_with: String
  post_not_ends_with_nocase: String
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  transactionHash: String
  transactionHash_not: String
  transactionHash_gt: String
  transactionHash_lt: String
  transactionHash_gte: String
  transactionHash_lte: String
  transactionHash_in: [String!]
  transactionHash_not_in: [String!]
  transactionHash_contains: String
  transactionHash_contains_nocase: String
  transactionHash_not_contains: String
  transactionHash_not_contains_nocase: String
  transactionHash_starts_with: String
  transactionHash_starts_with_nocase: String
  transactionHash_not_starts_with: String
  transactionHash_not_starts_with_nocase: String
  transactionHash_ends_with: String
  transactionHash_ends_with_nocase: String
  transactionHash_not_ends_with: String
  transactionHash_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Post_filter]
  or: [Post_filter]
}

enum Post_orderBy {
  id
  sender
  post
  createdAt
  transactionHash
}

type Query {
  nation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Nation
  nations(
    skip: Int = 0
    first: Int = 100
    orderBy: Nation_orderBy
    orderDirection: OrderDirection
    where: Nation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Nation!]!
  war(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): War
  wars(
    skip: Int = 0
    first: Int = 100
    orderBy: War_orderBy
    orderDirection: OrderDirection
    where: War_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [War!]!
  groundBattle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GroundBattle
  groundBattles(
    skip: Int = 0
    first: Int = 100
    orderBy: GroundBattle_orderBy
    orderDirection: OrderDirection
    where: GroundBattle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GroundBattle!]!
  cruiseMissileAttack(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CruiseMissileAttack
  cruiseMissileAttacks(
    skip: Int = 0
    first: Int = 100
    orderBy: CruiseMissileAttack_orderBy
    orderDirection: OrderDirection
    where: CruiseMissileAttack_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CruiseMissileAttack!]!
  nukeAttack(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NukeAttack
  nukeAttacks(
    skip: Int = 0
    first: Int = 100
    orderBy: NukeAttack_orderBy
    orderDirection: OrderDirection
    where: NukeAttack_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NukeAttack!]!
  spyOperation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SpyOperation
  spyOperations(
    skip: Int = 0
    first: Int = 100
    orderBy: SpyOperation_orderBy
    orderDirection: OrderDirection
    where: SpyOperation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SpyOperation!]!
  airBattle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AirBattle
  airBattles(
    skip: Int = 0
    first: Int = 100
    orderBy: AirBattle_orderBy
    orderDirection: OrderDirection
    where: AirBattle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AirBattle!]!
  navalAttack(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NavalAttack
  navalAttacks(
    skip: Int = 0
    first: Int = 100
    orderBy: NavalAttack_orderBy
    orderDirection: OrderDirection
    where: NavalAttack_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NavalAttack!]!
  breakBlockade(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BreakBlockade
  breakBlockades(
    skip: Int = 0
    first: Int = 100
    orderBy: BreakBlockade_orderBy
    orderDirection: OrderDirection
    where: BreakBlockade_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BreakBlockade!]!
  blockade(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Blockade
  blockades(
    skip: Int = 0
    first: Int = 100
    orderBy: Blockade_orderBy
    orderDirection: OrderDirection
    where: Blockade_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Blockade!]!
  message(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Message
  messages(
    skip: Int = 0
    first: Int = 100
    orderBy: Message_orderBy
    orderDirection: OrderDirection
    where: Message_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Message!]!
  post(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Post
  posts(
    skip: Int = 0
    first: Int = 100
    orderBy: Post_orderBy
    orderDirection: OrderDirection
    where: Post_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Post!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type SpyOperation {
  id: ID!
  attackId: BigInt!
  attackerId: BigInt!
  defenderId: BigInt!
  success: Boolean!
  attackType: BigInt!
  transactionHash: String!
}

input SpyOperation_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  attackId: BigInt
  attackId_not: BigInt
  attackId_gt: BigInt
  attackId_lt: BigInt
  attackId_gte: BigInt
  attackId_lte: BigInt
  attackId_in: [BigInt!]
  attackId_not_in: [BigInt!]
  attackerId: BigInt
  attackerId_not: BigInt
  attackerId_gt: BigInt
  attackerId_lt: BigInt
  attackerId_gte: BigInt
  attackerId_lte: BigInt
  attackerId_in: [BigInt!]
  attackerId_not_in: [BigInt!]
  defenderId: BigInt
  defenderId_not: BigInt
  defenderId_gt: BigInt
  defenderId_lt: BigInt
  defenderId_gte: BigInt
  defenderId_lte: BigInt
  defenderId_in: [BigInt!]
  defenderId_not_in: [BigInt!]
  success: Boolean
  success_not: Boolean
  success_in: [Boolean!]
  success_not_in: [Boolean!]
  attackType: BigInt
  attackType_not: BigInt
  attackType_gt: BigInt
  attackType_lt: BigInt
  attackType_gte: BigInt
  attackType_lte: BigInt
  attackType_in: [BigInt!]
  attackType_not_in: [BigInt!]
  transactionHash: String
  transactionHash_not: String
  transactionHash_gt: String
  transactionHash_lt: String
  transactionHash_gte: String
  transactionHash_lte: String
  transactionHash_in: [String!]
  transactionHash_not_in: [String!]
  transactionHash_contains: String
  transactionHash_contains_nocase: String
  transactionHash_not_contains: String
  transactionHash_not_contains_nocase: String
  transactionHash_starts_with: String
  transactionHash_starts_with_nocase: String
  transactionHash_not_starts_with: String
  transactionHash_not_starts_with_nocase: String
  transactionHash_ends_with: String
  transactionHash_ends_with_nocase: String
  transactionHash_not_ends_with: String
  transactionHash_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SpyOperation_filter]
  or: [SpyOperation_filter]
}

enum SpyOperation_orderBy {
  id
  attackId
  attackerId
  defenderId
  success
  attackType
  transactionHash
}

type Subscription {
  nation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Nation
  nations(
    skip: Int = 0
    first: Int = 100
    orderBy: Nation_orderBy
    orderDirection: OrderDirection
    where: Nation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Nation!]!
  war(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): War
  wars(
    skip: Int = 0
    first: Int = 100
    orderBy: War_orderBy
    orderDirection: OrderDirection
    where: War_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [War!]!
  groundBattle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GroundBattle
  groundBattles(
    skip: Int = 0
    first: Int = 100
    orderBy: GroundBattle_orderBy
    orderDirection: OrderDirection
    where: GroundBattle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GroundBattle!]!
  cruiseMissileAttack(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CruiseMissileAttack
  cruiseMissileAttacks(
    skip: Int = 0
    first: Int = 100
    orderBy: CruiseMissileAttack_orderBy
    orderDirection: OrderDirection
    where: CruiseMissileAttack_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CruiseMissileAttack!]!
  nukeAttack(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NukeAttack
  nukeAttacks(
    skip: Int = 0
    first: Int = 100
    orderBy: NukeAttack_orderBy
    orderDirection: OrderDirection
    where: NukeAttack_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NukeAttack!]!
  spyOperation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SpyOperation
  spyOperations(
    skip: Int = 0
    first: Int = 100
    orderBy: SpyOperation_orderBy
    orderDirection: OrderDirection
    where: SpyOperation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SpyOperation!]!
  airBattle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AirBattle
  airBattles(
    skip: Int = 0
    first: Int = 100
    orderBy: AirBattle_orderBy
    orderDirection: OrderDirection
    where: AirBattle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [AirBattle!]!
  navalAttack(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NavalAttack
  navalAttacks(
    skip: Int = 0
    first: Int = 100
    orderBy: NavalAttack_orderBy
    orderDirection: OrderDirection
    where: NavalAttack_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NavalAttack!]!
  breakBlockade(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): BreakBlockade
  breakBlockades(
    skip: Int = 0
    first: Int = 100
    orderBy: BreakBlockade_orderBy
    orderDirection: OrderDirection
    where: BreakBlockade_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [BreakBlockade!]!
  blockade(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Blockade
  blockades(
    skip: Int = 0
    first: Int = 100
    orderBy: Blockade_orderBy
    orderDirection: OrderDirection
    where: Blockade_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Blockade!]!
  message(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Message
  messages(
    skip: Int = 0
    first: Int = 100
    orderBy: Message_orderBy
    orderDirection: OrderDirection
    where: Message_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Message!]!
  post(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Post
  posts(
    skip: Int = 0
    first: Int = 100
    orderBy: Post_orderBy
    orderDirection: OrderDirection
    where: Post_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Post!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type War {
  id: ID!
  warId: BigInt!
  offenseId: BigInt!
  defenseId: BigInt!
  transactionHash: String!
}

input War_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  warId: BigInt
  warId_not: BigInt
  warId_gt: BigInt
  warId_lt: BigInt
  warId_gte: BigInt
  warId_lte: BigInt
  warId_in: [BigInt!]
  warId_not_in: [BigInt!]
  offenseId: BigInt
  offenseId_not: BigInt
  offenseId_gt: BigInt
  offenseId_lt: BigInt
  offenseId_gte: BigInt
  offenseId_lte: BigInt
  offenseId_in: [BigInt!]
  offenseId_not_in: [BigInt!]
  defenseId: BigInt
  defenseId_not: BigInt
  defenseId_gt: BigInt
  defenseId_lt: BigInt
  defenseId_gte: BigInt
  defenseId_lte: BigInt
  defenseId_in: [BigInt!]
  defenseId_not_in: [BigInt!]
  transactionHash: String
  transactionHash_not: String
  transactionHash_gt: String
  transactionHash_lt: String
  transactionHash_gte: String
  transactionHash_lte: String
  transactionHash_in: [String!]
  transactionHash_not_in: [String!]
  transactionHash_contains: String
  transactionHash_contains_nocase: String
  transactionHash_not_contains: String
  transactionHash_not_contains_nocase: String
  transactionHash_starts_with: String
  transactionHash_starts_with_nocase: String
  transactionHash_not_starts_with: String
  transactionHash_not_starts_with_nocase: String
  transactionHash_ends_with: String
  transactionHash_ends_with_nocase: String
  transactionHash_not_ends_with: String
  transactionHash_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [War_filter]
  or: [War_filter]
}

enum War_orderBy {
  id
  warId
  offenseId
  defenseId
  transactionHash
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}