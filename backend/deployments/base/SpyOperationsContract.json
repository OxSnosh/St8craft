{
  "address": "0xbFac633831e623F33395D74FA06c6B395B7F8458",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_subId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "_vrfCallbackGasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "coordinator",
          "type": "address"
        }
      ],
      "name": "OnlyOwnerOrCoordinator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vrfCoordinator",
          "type": "address"
        }
      ],
      "name": "CoordinatorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "attackId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "defenderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "attackType",
          "type": "uint8"
        }
      ],
      "name": "SpyAttackCommitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "attackId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maskedAttackerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "defenderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "attackType",
          "type": "uint256"
        }
      ],
      "name": "SpyAttackResolvedPublic",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "attackId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "attackerId",
          "type": "uint256"
        }
      ],
      "name": "SpyAttackRevealed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "subId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "minConf",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "gasLimit",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "numWords",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "nativePayment",
          "type": "bool"
        }
      ],
      "name": "VrfConfigUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "attackId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "VrfRequested",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MASK_SENTINEL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_ATTACK_TYPE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_INCOMING",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_OUTGOING",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_ATTACK_TYPE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "attackId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "defenderId",
          "type": "uint256"
        }
      ],
      "name": "attackedAlready",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "attacks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "attackerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "defenderId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "attackType",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "revealed",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "resolved",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "force",
      "outputs": [
        {
          "internalType": "contract IForces",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getAttackPublic",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "attackerIdOrMask",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "defenderId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "attackType",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "revealed",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "resolved",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "countryId",
          "type": "uint256"
        }
      ],
      "name": "getAttackerSuccessScore",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "countryId",
          "type": "uint256"
        }
      ],
      "name": "getDefenseSuccessScore",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inf",
      "outputs": [
        {
          "internalType": "contract IInfrastructure",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "attackerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "defenderId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "attackType",
          "type": "uint8"
        }
      ],
      "name": "initiateSpyAttack",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newAttackId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keep",
      "outputs": [
        {
          "internalType": "contract IKeeper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mil",
      "outputs": [
        {
          "internalType": "contract IMilitary",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [
        {
          "internalType": "contract ICountryMinter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mis",
      "outputs": [
        {
          "internalType": "contract IMissiles",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "params",
      "outputs": [
        {
          "internalType": "contract ICountryParameters",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pending",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "attackerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "defenderId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "attackType",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "revealAttack",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_vrfCoordinator",
      "outputs": [
        {
          "internalType": "contract IVRFCoordinatorV2Plus",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        }
      ],
      "name": "setCoordinator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_subId",
          "type": "uint64"
        },
        {
          "internalType": "uint16",
          "name": "_minConf",
          "type": "uint16"
        },
        {
          "internalType": "uint32",
          "name": "_gasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_numWords",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "_useNative",
          "type": "bool"
        }
      ],
      "name": "setVRFConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_infrastructure",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_forces",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_military",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nationStrength",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wonders1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wonders2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_parameters",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_missiles",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_countryMinter",
          "type": "address"
        }
      ],
      "name": "settings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeper",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spies",
          "type": "address"
        }
      ],
      "name": "settings2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "spy",
      "outputs": [
        {
          "internalType": "contract ISpies",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strength",
      "outputs": [
        {
          "internalType": "contract INationStrength",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tsy",
      "outputs": [
        {
          "internalType": "contract ITreasury",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "useNativePayment",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vrfCallbackGasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vrfKeyHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vrfMinConfirmations",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vrfNumWords",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vrfRequestToAttackId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vrfSubId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "won1",
      "outputs": [
        {
          "internalType": "contract IWonders1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "won2",
      "outputs": [
        {
          "internalType": "contract IWonders2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x90c185c17f1cca0cb4853b86e9a58671de33d7b6a4db6d492dcc3c486c2104ee",
  "receipt": {
    "to": null,
    "from": "0xAE5ac236357E7c6e483a20650c6891C36353E2a9",
    "contractAddress": "0xbFac633831e623F33395D74FA06c6B395B7F8458",
    "transactionIndex": 38,
    "gasUsed": "5327233",
    "logsBloom": "0x
    "blockHash": "0x22ac905321eabcbd6d4bb25af6cb2bf133403e857eb7f8393f25adb545e8480a",
    "transactionHash": "0x90c185c17f1cca0cb4853b86e9a58671de33d7b6a4db6d492dcc3c486c2104ee",
    "logs": [],
    "blockNumber": 33435416,
    "cumulativeGasUsed": "11262573",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd5D517aBE5cF79B7e95eC98dB0f0277788aFF634",
    "24802783192322697201261566732783929045615788778639507776573378755552146781710",
    "0xdc2f87677b01473c763cb0aee938ed3341512f6057324a584e5944e786144d70",
    "2500000"
  ],
  "numDeployments": 2,
  "solcInputHash": "bae5606712e62cada576736ea85e44b4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"_vrfCallbackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coordinator\",\"type\":\"address\"}],\"name\":\"OnlyOwnerOrCoordinator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"}],\"name\":\"CoordinatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"attackId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"defenderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"attackType\",\"type\":\"uint8\"}],\"name\":\"SpyAttackCommitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"attackId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maskedAttackerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"defenderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"attackType\",\"type\":\"uint256\"}],\"name\":\"SpyAttackResolvedPublic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"attackId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"attackerId\",\"type\":\"uint256\"}],\"name\":\"SpyAttackRevealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"minConf\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"nativePayment\",\"type\":\"bool\"}],\"name\":\"VrfConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"attackId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"VrfRequested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MASK_SENTINEL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_ATTACK_TYPE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_INCOMING\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_OUTGOING\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_ATTACK_TYPE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"attackId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"defenderId\",\"type\":\"uint256\"}],\"name\":\"attackedAlready\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"attacks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"attackerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defenderId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"attackType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"revealed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"resolved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"force\",\"outputs\":[{\"internalType\":\"contract IForces\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getAttackPublic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"attackerIdOrMask\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defenderId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"attackType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"revealed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"resolved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"countryId\",\"type\":\"uint256\"}],\"name\":\"getAttackerSuccessScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"countryId\",\"type\":\"uint256\"}],\"name\":\"getDefenseSuccessScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inf\",\"outputs\":[{\"internalType\":\"contract IInfrastructure\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"attackerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defenderId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"attackType\",\"type\":\"uint8\"}],\"name\":\"initiateSpyAttack\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newAttackId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keep\",\"outputs\":[{\"internalType\":\"contract IKeeper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mil\",\"outputs\":[{\"internalType\":\"contract IMilitary\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"contract ICountryMinter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mis\",\"outputs\":[{\"internalType\":\"contract IMissiles\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"params\",\"outputs\":[{\"internalType\":\"contract ICountryParameters\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"attackerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defenderId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"attackType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"revealAttack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_vrfCoordinator\",\"outputs\":[{\"internalType\":\"contract IVRFCoordinatorV2Plus\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"}],\"name\":\"setCoordinator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_subId\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"_minConf\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"_gasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_numWords\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"_useNative\",\"type\":\"bool\"}],\"name\":\"setVRFConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_infrastructure\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_forces\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_military\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nationStrength\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wonders1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wonders2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_parameters\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_missiles\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_countryMinter\",\"type\":\"address\"}],\"name\":\"settings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spies\",\"type\":\"address\"}],\"name\":\"settings2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spy\",\"outputs\":[{\"internalType\":\"contract ISpies\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strength\",\"outputs\":[{\"internalType\":\"contract INationStrength\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tsy\",\"outputs\":[{\"internalType\":\"contract ITreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useNativePayment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vrfCallbackGasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vrfKeyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vrfMinConfirmations\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vrfNumWords\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vrfRequestToAttackId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vrfSubId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"won1\",\"outputs\":[{\"internalType\":\"contract IWonders1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"won2\",\"outputs\":[{\"internalType\":\"contract IWonders2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"setCoordinator(address)\":{\"notice\":\"Sets the VRF Coordinator addressThis method should only be callable by the coordinator or contract owner\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SpyOperations.sol\":\"SpyOperationsContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ConfirmedOwnerWithProposal} from \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0xdcb0e9135ddbe71ee27ba99fa06656960c66c964cf2ecb29696da1c1427d9861\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IOwnable} from \\\"../interfaces/IOwnable.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /// @notice Allows an owner to begin transferring ownership to a new address.\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /// @notice Allows an ownership transfer to be completed by the recipient.\\n  function acceptOwnership() external override {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /// @notice Get the current owner\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /// @notice validate, transfer ownership, and emit relevant events\\n  function _transferOwnership(address to) private {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /// @notice validate access\\n  function _validateOwnership() internal view {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /// @notice Reverts if called by anyone other than the contract owner.\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x2422a055657a87e98be61f8f31abb1824ec50fd0f73949f4e3c6ac877efb6da8\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {IVRFCoordinatorV2Plus} from \\\"./interfaces/IVRFCoordinatorV2Plus.sol\\\";\\nimport {IVRFMigratableConsumerV2Plus} from \\\"./interfaces/IVRFMigratableConsumerV2Plus.sol\\\";\\nimport {ConfirmedOwner} from \\\"../../shared/access/ConfirmedOwner.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinatorV2Plus.\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBaseV2Plus, and can\\n * @dev initialize VRFConsumerBaseV2Plus's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumerV2Plus is VRFConsumerBaseV2Plus {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _subOwner)\\n * @dev       VRFConsumerBaseV2Plus(_vrfCoordinator, _subOwner) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create a subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords, extraArgs),\\n * @dev see (IVRFCoordinatorV2Plus for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinatorV2Plus has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBaseV2Plus.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2Plus is IVRFMigratableConsumerV2Plus, ConfirmedOwner {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  error OnlyOwnerOrCoordinator(address have, address owner, address coordinator);\\n  error ZeroAddress();\\n\\n  // s_vrfCoordinator should be used by consumers to make requests to vrfCoordinator\\n  // so that coordinator reference is updated after migration\\n  IVRFCoordinatorV2Plus public s_vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) ConfirmedOwner(msg.sender) {\\n    if (_vrfCoordinator == address(0)) {\\n      revert ZeroAddress();\\n    }\\n    s_vrfCoordinator = IVRFCoordinatorV2Plus(_vrfCoordinator);\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2Plus expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\\n  function fulfillRandomWords(uint256 requestId, uint256[] calldata randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] calldata randomWords) external {\\n    if (msg.sender != address(s_vrfCoordinator)) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, address(s_vrfCoordinator));\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n\\n  /**\\n   * @inheritdoc IVRFMigratableConsumerV2Plus\\n   */\\n  function setCoordinator(address _vrfCoordinator) external override onlyOwnerOrCoordinator {\\n    if (_vrfCoordinator == address(0)) {\\n      revert ZeroAddress();\\n    }\\n    s_vrfCoordinator = IVRFCoordinatorV2Plus(_vrfCoordinator);\\n\\n    emit CoordinatorSet(_vrfCoordinator);\\n  }\\n\\n  modifier onlyOwnerOrCoordinator() {\\n    if (msg.sender != owner() && msg.sender != address(s_vrfCoordinator)) {\\n      revert OnlyOwnerOrCoordinator(msg.sender, owner(), address(s_vrfCoordinator));\\n    }\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x0c92838396c5abe72754ebeae526a0434dd53fdaf63e6b98111aebd6114cfcc2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFCoordinatorV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {VRFV2PlusClient} from \\\"../libraries/VRFV2PlusClient.sol\\\";\\nimport {IVRFSubscriptionV2Plus} from \\\"./IVRFSubscriptionV2Plus.sol\\\";\\n\\n// Interface that enables consumers of VRFCoordinatorV2Plus to be future-proof for upgrades\\n// This interface is supported by subsequent versions of VRFCoordinatorV2Plus\\ninterface IVRFCoordinatorV2Plus is IVRFSubscriptionV2Plus {\\n  /**\\n   * @notice Request a set of random words.\\n   * @param req - a struct containing following fields for randomness request:\\n   * keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * requestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * extraArgs - abi-encoded extra args\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(VRFV2PlusClient.RandomWordsRequest calldata req) external returns (uint256 requestId);\\n}\\n\",\"keccak256\":\"0x7dca2a64690ddd95ee05e422e1f61e7c1d701aaf5be1390ae12e9bd144266c36\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFMigratableConsumerV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice The IVRFMigratableConsumerV2Plus interface defines the\\n/// @notice method required to be implemented by all V2Plus consumers.\\n/// @dev This interface is designed to be used in VRFConsumerBaseV2Plus.\\ninterface IVRFMigratableConsumerV2Plus {\\n  event CoordinatorSet(address vrfCoordinator);\\n\\n  /// @notice Sets the VRF Coordinator address\\n  /// @notice This method should only be callable by the coordinator or contract owner\\n  function setCoordinator(address vrfCoordinator) external;\\n}\\n\",\"keccak256\":\"0x8be8744e3b8380dc85354cf110e8caef8f394266e79120ad675a7da835ed2a85\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFSubscriptionV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice The IVRFSubscriptionV2Plus interface defines the subscription\\n/// @notice related methods implemented by the V2Plus coordinator.\\ninterface IVRFSubscriptionV2Plus {\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint256 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint256 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint256 subId, address to) external;\\n\\n  /**\\n   * @notice Accept subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint256 subId) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint256 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription with LINK, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   * @dev Note to fund the subscription with Native, use fundSubscriptionWithNative. Be sure\\n   * @dev  to send Native with the call, for example:\\n   * @dev COORDINATOR.fundSubscriptionWithNative{value: amount}(subId);\\n   */\\n  function createSubscription() external returns (uint256 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return nativeBalance - native balance of the subscription in wei.\\n   * @return reqCount - Requests count of subscription.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint256 subId\\n  )\\n    external\\n    view\\n    returns (uint96 balance, uint96 nativeBalance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint256 subId) external view returns (bool);\\n\\n  /**\\n   * @notice Paginate through all active VRF subscriptions.\\n   * @param startIndex index of the subscription to start from\\n   * @param maxCount maximum number of subscriptions to return, 0 to return all\\n   * @dev the order of IDs in the list is **not guaranteed**, therefore, if making successive calls, one\\n   * @dev should consider keeping the blockheight constant to ensure a holistic picture of the contract state\\n   */\\n  function getActiveSubscriptionIds(uint256 startIndex, uint256 maxCount) external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice Fund a subscription with native.\\n   * @param subId - ID of the subscription\\n   * @notice This method expects msg.value to be greater than or equal to 0.\\n   */\\n  function fundSubscriptionWithNative(uint256 subId) external payable;\\n}\\n\",\"keccak256\":\"0x85b348297ce36794e3bf97a47c001fc216bd0ee243e91514a7b395f3fcd189b0\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// End consumer library.\\nlibrary VRFV2PlusClient {\\n  // extraArgs will evolve to support new features\\n  bytes4 public constant EXTRA_ARGS_V1_TAG = bytes4(keccak256(\\\"VRF ExtraArgsV1\\\"));\\n  struct ExtraArgsV1 {\\n    bool nativePayment;\\n  }\\n\\n  struct RandomWordsRequest {\\n    bytes32 keyHash;\\n    uint256 subId;\\n    uint16 requestConfirmations;\\n    uint32 callbackGasLimit;\\n    uint32 numWords;\\n    bytes extraArgs;\\n  }\\n\\n  function _argsToBytes(ExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x839ad7a737ef18147b518b4ec3cbaf4a49dc994db65cf8369ed4e69d169a98a6\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/GelatoRelayContextERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport {GelatoRelayERC2771Base} from \\\"./base/GelatoRelayERC2771Base.sol\\\";\\nimport {TokenUtils} from \\\"./lib/TokenUtils.sol\\\";\\n\\nuint256 constant _FEE_COLLECTOR_START = 92; // offset: address + address + uint256 + address\\nuint256 constant _FEE_TOKEN_START = 72; // offset: address + uint256 + address\\nuint256 constant _FEE_START = 52; // offset: uint256 + address\\nuint256 constant _MSG_SENDER_START = 20; // offset: address\\n\\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContextERC2771\\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\\nfunction _getFeeCollectorRelayContextERC2771()\\n    pure\\n    returns (address feeCollector)\\n{\\n    assembly {\\n        feeCollector := shr(\\n            96,\\n            calldataload(sub(calldatasize(), _FEE_COLLECTOR_START))\\n        )\\n    }\\n}\\n\\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContextERC2771\\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\\nfunction _getFeeTokenRelayContextERC2771() pure returns (address feeToken) {\\n    assembly {\\n        feeToken := shr(96, calldataload(sub(calldatasize(), _FEE_TOKEN_START)))\\n    }\\n}\\n\\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContextERC2771\\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\\nfunction _getFeeRelayContextERC2771() pure returns (uint256 fee) {\\n    assembly {\\n        fee := calldataload(sub(calldatasize(), _FEE_START))\\n    }\\n}\\n\\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContextERC2771\\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\\nfunction _getMsgSenderRelayContextERC2771() pure returns (address _msgSender) {\\n    assembly {\\n        _msgSender := shr(\\n            96,\\n            calldataload(sub(calldatasize(), _MSG_SENDER_START))\\n        )\\n    }\\n}\\n\\n/**\\n * @dev Context variant with feeCollector, feeToken, fee, _msgSender appended to msg.data\\n * Expects calldata encoding:\\n    abi.encodePacked(\\n        _data,\\n        _feeCollector,\\n        _feeToken,\\n        _fee,\\n        _msgSender\\n    );\\n * Therefore, we're expecting 20 + 20 + 32 + 20 = 92 bytes to be appended to normal msgData\\n *     feeCollector: - 92 bytes\\n *     feeToken: - 72 bytes\\n *     fee: - 52 bytes\\n *     _msgSender: - 20 bytes\\n */\\n\\n/// @dev Do not use with GelatoRelayFeeCollectorERC2771 - pick only one\\nabstract contract GelatoRelayContextERC2771 is GelatoRelayERC2771Base {\\n    using TokenUtils for address;\\n\\n    // DANGER! Only use with onlyGelatoRelayERC2771, onlyGelatoRelayConcurrentERC2771,\\n    // `_isGelatoRelayERC2771` or `_isGelatoRelayConcurrentERC2771` checks\\n    function _transferRelayFee() internal {\\n        _getFeeToken().transfer(_getFeeCollector(), _getFee());\\n    }\\n\\n    // DANGER! Only use with onlyGelatoRelayERC2771, onlyGelatoRelayConcurrentERC2771,\\n    // `_isGelatoRelayERC2771` or `_isGelatoRelayConcurrentERC2771` checks\\n    function _transferRelayFeeCapped(uint256 _maxFee) internal {\\n        uint256 fee = _getFee();\\n        require(\\n            fee <= _maxFee,\\n            \\\"GelatoRelayContextERC2771._transferRelayFeeCapped: maxFee\\\"\\n        );\\n        _getFeeToken().transfer(_getFeeCollector(), fee);\\n    }\\n\\n    // DANGER! Only use with onlyGelatoRelayERC2771, onlyGelatoRelayConcurrentERC2771,\\n    // `_isGelatoRelayERC2771` or `_isGelatoRelayConcurrentERC2771` checks\\n    function _transferFromRelayFee() internal {\\n        _getFeeToken().transferFrom(\\n            _getMsgSender(),\\n            _getFeeCollector(),\\n            _getFee()\\n        );\\n    }\\n\\n    // DANGER! Only use with onlyGelatoRelayERC2771, onlyGelatoRelayConcurrentERC2771,\\n    // `_isGelatoRelayERC2771` or `_isGelatoRelayConcurrentERC2771` checks\\n    function _transferFromRelayFeeCapped(uint256 _maxFee) internal {\\n        uint256 fee = _getFee();\\n        require(\\n            fee <= _maxFee,\\n            \\\"GelatoRelayContextERC2771._transferFromRelayFeeCapped: maxFee\\\"\\n        );\\n        _getFeeToken().transferFrom(_getMsgSender(), _getFeeCollector(), fee);\\n    }\\n\\n    // DANGER! Only use with onlyGelatoRelayERC2771, onlyGelatoRelayConcurrentERC2771,\\n    // `_isGelatoRelayERC2771` or `_isGelatoRelayConcurrentERC2771` checks\\n    function _transferFromRelayFeeCappedWithPermit(\\n        uint256 _maxFee,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) internal {\\n        uint256 fee = _getFee();\\n        require(\\n            fee <= _maxFee,\\n            \\\"GelatoRelayContextERC2771._transferFromRelayFeeCappedWithPermit: maxFee\\\"\\n        );\\n\\n        address from = _getMsgSender();\\n        address token = _getFeeToken();\\n\\n        token.permit(from, address(this), _maxFee, _deadline, _v, _r, _s);\\n        token.transferFrom(from, _getFeeCollector(), fee);\\n    }\\n\\n    function _getMsgData() internal view virtual returns (bytes calldata) {\\n        return\\n            _isGelatoRelayERC2771(msg.sender)\\n                ? msg.data[:msg.data.length - _FEE_COLLECTOR_START]\\n                : msg.data;\\n    }\\n\\n    function _getMsgSender() internal view virtual returns (address) {\\n        return\\n            _isGelatoRelayERC2771(msg.sender)\\n                ? _getMsgSenderRelayContextERC2771()\\n                : msg.sender;\\n    }\\n\\n    // Only use with onlyGelatoRelayERC2771, onlyGelatoRelayConcurrentERC2771,\\n    // `_isGelatoRelayERC2771` or `_isGelatoRelayConcurrentERC2771` checks\\n    function _getFeeCollector() internal pure returns (address) {\\n        return _getFeeCollectorRelayContextERC2771();\\n    }\\n\\n    // Only use with onlyGelatoRelayERC2771, onlyGelatoRelayConcurrentERC2771,\\n    // `_isGelatoRelayERC2771` or `_isGelatoRelayConcurrentERC2771` checks\\n    function _getFeeToken() internal pure returns (address) {\\n        return _getFeeTokenRelayContextERC2771();\\n    }\\n\\n    // Only use with onlyGelatoRelayERC2771, onlyGelatoRelayConcurrentERC2771,\\n    // `_isGelatoRelayERC2771` or `_isGelatoRelayConcurrentERC2771` checks\\n    function _getFee() internal pure returns (uint256) {\\n        return _getFeeRelayContextERC2771();\\n    }\\n}\\n\",\"keccak256\":\"0xb1e64af21e3d0045989a60e1cd917b02233d8406ae5e735a610f4ebd2a4bc160\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/base/GelatoRelayERC2771Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport {\\n    GelatoRelayContractsUtils\\n} from \\\"../utils/GelatoRelayContractsUtils.sol\\\";\\nimport {\\n    GELATO_RELAY_ERC2771_V1,\\n    GELATO_RELAY_CONCURRENT_ERC2771_V1,\\n    GELATO_RELAY_ERC2771_V2,\\n    GELATO_RELAY_CONCURRENT_ERC2771_V2,\\n    GELATO_RELAY_ERC2771_ZKSYNC_V1,\\n    GELATO_RELAY_CONCURRENT_ERC2771_ZKSYNC_V1,\\n    GELATO_RELAY_ERC2771_ZKSYNC_V2,\\n    GELATO_RELAY_CONCURRENT_ERC2771_ZKSYNC_V2,\\n    GELATO_RELAY_ERC2771_BOTANIX_V2,\\n    GELATO_RELAY_CONCURRENT_ERC2771_BOTANIX_V2\\n} from \\\"../constants/GelatoRelay.sol\\\";\\n\\nabstract contract GelatoRelayERC2771Base is GelatoRelayContractsUtils {\\n    modifier onlyGelatoRelayERC2771() {\\n        require(_isGelatoRelayERC2771(msg.sender), \\\"onlyGelatoRelayERC2771\\\");\\n        _;\\n    }\\n\\n    function _isGelatoRelayERC2771(address _forwarder)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        if (\\n            _forwarder == _gelatoRelayERC2771 ||\\n            _forwarder == _gelatoRelayConcurrentERC2771\\n        ) {\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x73c249bca2422421c9f2b5394e1a0a242bfe074e5d9c8eb983eb540db733b72b\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/constants/GelatoRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\naddress constant GELATO_RELAY_V1 = 0xaBcC9b596420A9E9172FD5938620E265a0f9Df92;\\naddress constant GELATO_RELAY_ERC2771_V1 = 0xb539068872230f20456CF38EC52EF2f91AF4AE49;\\naddress constant GELATO_RELAY_CONCURRENT_ERC2771_V1 = 0x8598806401A63Ddf52473F1B3C55bC9E33e2d73b;\\n\\naddress constant GELATO_RELAY_V2 = 0xcd565435e0d2109feFde337a66491541Df0D1420;\\naddress constant GELATO_RELAY_ERC2771_V2 = 0x8aCE64CEA52b409F930f60B516F65197faD4B056;\\naddress constant GELATO_RELAY_CONCURRENT_ERC2771_V2 = 0xc7739c195618D314C08E8626C98f8573E4E43634;\\n\\naddress constant GELATO_RELAY_ZKSYNC_V1 = 0xB16a1DbE755f992636705fDbb3A8678a657EB3ea;\\naddress constant GELATO_RELAY_ERC2771_ZKSYNC_V1 = 0x22DCC39b2AC376862183dd35A1664798dafC7Da6;\\n// solhint-disable-next-line max-line-length\\naddress constant GELATO_RELAY_CONCURRENT_ERC2771_ZKSYNC_V1 = 0xBa4082F4961c8Fb76231995C967CD9aa40f321b5;\\n\\naddress constant GELATO_RELAY_ZKSYNC_V2 = 0x42120A1417a091a52A8d4590E28fc6C0F61E5632;\\naddress constant GELATO_RELAY_ERC2771_ZKSYNC_V2 = 0xACeD988c5B5Fe3f11848c728D9a5f66Cf34c9e73;\\n// solhint-disable-next-line max-line-length\\naddress constant GELATO_RELAY_CONCURRENT_ERC2771_ZKSYNC_V2 = 0xbbCe89ACdD86D0130BDc3f1fe37C3aEDd79fc1F4;\\n\\naddress constant GELATO_RELAY_BOTANIX_V2 = 0x61aCe8fBA7B80AEf8ED67f37CB60bE00180872aD;\\naddress constant GELATO_RELAY_ERC2771_BOTANIX_V2 = 0x368165B2AFb95FaE8ceC409Efa59d5091f9875A5;\\n// solhint-disable-next-line max-line-length\\naddress constant GELATO_RELAY_CONCURRENT_ERC2771_BOTANIX_V2 = 0x038479687b7bC7943313bFfd524A4aCc96B3F9BE;\\n\",\"keccak256\":\"0xc9b5cae520634d9f4df86fa556664eb76696f5dedcebf5d446b0c0e426c3f315\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/constants/Tokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\naddress constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\",\"keccak256\":\"0xf58ba7702aa3e8aebf160c14db02a66afcc28d7dd0b94dee6a30cc7c5fa8335a\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/lib/TokenUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport {NATIVE_TOKEN} from \\\"../constants/Tokens.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    IERC20Permit\\n} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary TokenUtils {\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IERC20Permit;\\n\\n    modifier onlyERC20(address _token) {\\n        require(_token != NATIVE_TOKEN, \\\"TokenUtils.onlyERC20\\\");\\n        _;\\n    }\\n\\n    function permit(\\n        address _token,\\n        address _owner,\\n        address _spender,\\n        uint256 _value,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) internal onlyERC20(_token) {\\n        IERC20Permit(_token).safePermit(\\n            _owner,\\n            _spender,\\n            _value,\\n            _deadline,\\n            _v,\\n            _r,\\n            _s\\n        );\\n    }\\n\\n    function transfer(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        if (_amount == 0) return;\\n        _token == NATIVE_TOKEN\\n            ? Address.sendValue(payable(_to), _amount)\\n            : IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n\\n    function transferFrom(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal onlyERC20(_token) {\\n        if (_amount == 0) return;\\n        IERC20(_token).safeTransferFrom(_from, _to, _amount);\\n    }\\n\\n    function getBalance(address token, address user)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            token == NATIVE_TOKEN\\n                ? user.balance\\n                : IERC20(token).balanceOf(user);\\n    }\\n}\\n\",\"keccak256\":\"0xe253b669748d9af2d2524855f49992ccc434c4a95a9a737ab03ef550749d5a14\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/utils/GelatoRelayContractsUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport {\\n    GELATO_RELAY_V1,\\n    GELATO_RELAY_V2,\\n    GELATO_RELAY_BOTANIX_V2,\\n    GELATO_RELAY_ZKSYNC_V1,\\n    GELATO_RELAY_ZKSYNC_V2,\\n    GELATO_RELAY_ERC2771_V1,\\n    GELATO_RELAY_CONCURRENT_ERC2771_V1,\\n    GELATO_RELAY_ERC2771_V2,\\n    GELATO_RELAY_CONCURRENT_ERC2771_V2,\\n    GELATO_RELAY_ERC2771_ZKSYNC_V1,\\n    GELATO_RELAY_CONCURRENT_ERC2771_ZKSYNC_V1,\\n    GELATO_RELAY_ERC2771_ZKSYNC_V2,\\n    GELATO_RELAY_CONCURRENT_ERC2771_ZKSYNC_V2,\\n    GELATO_RELAY_ERC2771_BOTANIX_V2,\\n    GELATO_RELAY_CONCURRENT_ERC2771_BOTANIX_V2\\n} from \\\"../constants/GelatoRelay.sol\\\";\\n\\nabstract contract GelatoRelayContractsUtils {\\n    address internal immutable _gelatoRelay;\\n    address internal immutable _gelatoRelayERC2771;\\n    address internal immutable _gelatoRelayConcurrentERC2771;\\n\\n    constructor() {\\n        (\\n            _gelatoRelay,\\n            _gelatoRelayERC2771,\\n            _gelatoRelayConcurrentERC2771\\n        ) = _getRelayAddresses();\\n    }\\n\\n    function _getRelayAddresses()\\n        internal\\n        view\\n        returns (\\n            address,\\n            address,\\n            address\\n        )\\n    {\\n        if (_isBotanixChainId(block.chainid)) {\\n            return (\\n                GELATO_RELAY_BOTANIX_V2,\\n                GELATO_RELAY_ERC2771_BOTANIX_V2,\\n                GELATO_RELAY_CONCURRENT_ERC2771_BOTANIX_V2\\n            );\\n        } else if (_isV1ZkSyncChainId(block.chainid)) {\\n            return (\\n                GELATO_RELAY_ZKSYNC_V1,\\n                GELATO_RELAY_ERC2771_ZKSYNC_V1,\\n                GELATO_RELAY_CONCURRENT_ERC2771_ZKSYNC_V1\\n            );\\n        } else if (_isV2ZkSyncChainId(block.chainid)) {\\n            return (\\n                GELATO_RELAY_ZKSYNC_V2,\\n                GELATO_RELAY_ERC2771_ZKSYNC_V2,\\n                GELATO_RELAY_CONCURRENT_ERC2771_ZKSYNC_V2\\n            );\\n        } else if (_isV1ChainId(block.chainid)) {\\n            return (\\n                GELATO_RELAY_V1,\\n                GELATO_RELAY_ERC2771_V1,\\n                GELATO_RELAY_CONCURRENT_ERC2771_V1\\n            );\\n        } else {\\n            return (\\n                GELATO_RELAY_V2,\\n                GELATO_RELAY_ERC2771_V2,\\n                GELATO_RELAY_CONCURRENT_ERC2771_V2\\n            );\\n        }\\n    }\\n\\n    // solhint-disable-next-line function-max-lines\\n    function _isV1ChainId(uint256 chainId) private pure returns (bool) {\\n        if (\\n            chainId == 1 ||\\n            chainId == 10 ||\\n            chainId == 25 ||\\n            chainId == 30 ||\\n            chainId == 56 ||\\n            chainId == 100 ||\\n            chainId == 109 ||\\n            chainId == 137 ||\\n            chainId == 183 ||\\n            chainId == 233 ||\\n            chainId == 250 ||\\n            chainId == 314 ||\\n            chainId == 1088 ||\\n            chainId == 1101 ||\\n            chainId == 1135 ||\\n            chainId == 1284 ||\\n            chainId == 1285 ||\\n            chainId == 1729 ||\\n            chainId == 1829 ||\\n            chainId == 1833 ||\\n            chainId == 2039 ||\\n            chainId == 3776 ||\\n            chainId == 4202 ||\\n            chainId == 6398 ||\\n            chainId == 8453 ||\\n            chainId == 10200 ||\\n            chainId == 18231 ||\\n            chainId == 18233 ||\\n            chainId == 25327 ||\\n            chainId == 34443 ||\\n            chainId == 41455 ||\\n            chainId == 42069 ||\\n            chainId == 42161 ||\\n            chainId == 43114 ||\\n            chainId == 59144 ||\\n            chainId == 80002 ||\\n            chainId == 80084 ||\\n            chainId == 81457 ||\\n            chainId == 84532 ||\\n            chainId == 111188 ||\\n            chainId == 241120 ||\\n            chainId == 421614 ||\\n            chainId == 656476 ||\\n            chainId == 1261120 ||\\n            chainId == 6038361 ||\\n            chainId == 7777777 ||\\n            chainId == 11155111 ||\\n            chainId == 11155420 ||\\n            chainId == 29313331 ||\\n            chainId == 69658185 ||\\n            chainId == 89346162 ||\\n            chainId == 94204209 ||\\n            chainId == 123420111 ||\\n            chainId == 168587773 ||\\n            chainId == 222000222 ||\\n            chainId == 994873017 ||\\n            chainId == 1380012617 ||\\n            chainId == 3155399334 ||\\n            chainId == 80998896642 ||\\n            chainId == 88153591557\\n        ) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function _isV1ZkSyncChainId(uint256 chainId) private pure returns (bool) {\\n        if (chainId == 324 || chainId == 280) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function _isV2ZkSyncChainId(uint256 chainId) private pure returns (bool) {\\n        if (chainId == 11124 || chainId == 2741) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function _isBotanixChainId(uint256 chainId) private pure returns (bool) {\\n        if (chainId == 3637 || chainId == 3636) {\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0xe7d28c6257c502666e1721ba7c37812d4d29914b1ce9d03d8af124ccbd8d9fbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/SpyOperations.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\ninterface IInfrastructure {\\n    function getInfrastructureCount(uint256 countryId) external view returns (uint256);\\n    function getTechnologyCount(uint256 countryId) external view returns (uint256);\\n    function getLandCount(uint256 countryId) external view returns (uint256);\\n\\n    // Spy effect hooks\\n    function decreaseLandCountFromSpyContract(uint256 defenderId, uint256 amount) external;\\n    function decreaseTechCountFromSpyContract(uint256 defenderId, uint256 amount) external;\\n    function decreaseInfrastructureCountFromSpyContract(uint256 defenderId, uint256 amount) external;\\n    function setTaxRateFromSpyContract(uint256 defenderId, uint256 newRate) external;\\n\\n    // (If you need capturing logic for infrastructure, adjust accordingly)\\n}\\n\\ninterface IForces {\\n    function getDefendingTankCount(uint256 defenderId) external view returns (uint256);\\n    function decreaseDefendingTankCount(uint256 amount, uint256 defenderId) external;\\n}\\n\\ninterface IMilitary {\\n    function getThreatLevel(uint256 countryId) external view returns (uint256);\\n    function setThreatLevelFromSpyContract(uint256 defenderId, uint256 level) external;\\n    function setDefconLevelFromSpyContract(uint256 defenderId, uint256 level) external;\\n}\\n\\ninterface INationStrength {\\n    function getNationStrength(uint256 countryId) external view returns (uint256);\\n}\\n\\ninterface ITreasury {\\n    function spendBalance(uint256 attackerId, uint256 amount) external;\\n\\n}\\n\\ninterface ICountryParameters {\\n    function getGovernmentType(uint256 countryId) external view returns (uint256);\\n    function getGovernmentPreference(uint256 countryId) external view returns (uint256);\\n    function updateDesiredGovernment(uint256 countryId, uint256 newPref) external;\\n    function getReligionPreference(uint256 countryId) external view returns (uint256);\\n    function updateDesiredReligion(uint256 countryId, uint256 newPref) external;\\n}\\n\\ninterface IWonders1 {\\n    function getCentralIntelligenceAgency(uint256 countryId) external view returns (bool);\\n}\\ninterface IWonders2 {\\n    function getHiddenNuclearMissileSilo(uint256 countryId) external view returns (bool);\\n}\\n\\ninterface ICountryMinter {\\n    function checkOwnership(uint256 countryId, address user) external view returns (bool);\\n}\\n\\ninterface ISpies {\\n    function getSpyCount(uint256 countryId) external view returns (uint256);\\n    function decreaseDefenderSpyCount(uint256 amount, uint256 defenderId) external;\\n}\\n\\ninterface IMissiles {\\n    function getNukeCount(uint256 countryId) external view returns (uint256);\\n    function decreaseCruiseMissileCount(uint256 amount, uint256 defenderId) external;\\n    function decreaseNukeCountFromSpyContract(uint256 defenderId) external;\\n}\\n\\ninterface IKeeper {\\n    function getGameDay() external view returns (uint256);\\n}\\n\\ninterface IVRFCoordinatorV2 {\\n    function requestRandomWords(\\n        bytes32 keyHash,\\n        uint64  subId,\\n        uint16  minConfirmations,\\n        uint32  callbackGasLimit,\\n        uint32  numWords\\n    ) external returns (uint256 requestId);\\n}\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@gelatonetwork/relay-context/contracts/GelatoRelayContextERC2771.sol\\\";\\nimport {VRFConsumerBaseV2Plus} from \\\"@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol\\\";\\nimport {VRFV2PlusClient} from \\\"@chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol\\\";\\n\\n/* --------------------------------------------------------------------------\\n * Contract\\n * -------------------------------------------------------------------------- */\\n\\ncontract SpyOperationsContract is\\n    GelatoRelayContextERC2771,\\n    VRFConsumerBaseV2Plus\\n{\\n\\n\\n    struct DaySpies { uint8 outgoing; uint8 incoming; }\\n\\n    struct PendingAttack {\\n        uint256 attackerId;\\n        uint256 defenderId;\\n        uint8   attackType;\\n        bool    exists;\\n    }\\n\\n    struct AttackMeta {\\n        uint256 attackerId;\\n        uint256 defenderId;\\n        uint8   attackType;\\n        bool    success;\\n        bool    revealed;   // True if failure OR later reveal\\n        bool    resolved;\\n    }\\n\\n    /* ------------------------------- Constants -------------------------------- */\\n\\n    uint8  public constant MAX_OUTGOING      = 6;\\n    uint8  public constant MAX_INCOMING      = 2;\\n    uint8  public constant MIN_ATTACK_TYPE   = 1;\\n    uint8  public constant MAX_ATTACK_TYPE   = 12;\\n    uint256 public constant MASK_SENTINEL    = 0;  // Masked attacker id in public success event\\n\\n    /* --------------------------------- Storage -------------------------------- */\\n\\n    // Incremental attack id\\n    uint256 public attackId;\\n\\n    // day => nationId => counts\\n    mapping(uint256 => mapping(uint256 => DaySpies)) private _daySpyCount;\\n\\n    // VRF request -> attackId\\n    mapping(uint256 => uint256) public vrfRequestToAttackId;\\n\\n    // attackId -> pending (while waiting for VRF)\\n    mapping(uint256 => PendingAttack) public pending;\\n\\n    // attackId -> final meta\\n    mapping(uint256 => AttackMeta) public attacks;\\n\\n    /* -------------------------- External Contract Refs ------------------------ */\\n\\n    IInfrastructure      public inf;\\n    IForces              public force;\\n    IMilitary            public mil;\\n    INationStrength      public strength;\\n    ITreasury            public tsy;\\n    ICountryParameters   public params;\\n    IMissiles            public mis;\\n    IWonders1            public won1;\\n    IWonders2            public won2;\\n    ICountryMinter       public mint;\\n    IKeeper              public keep;\\n    ISpies               public spy;\\n\\n    /* ----------------------------- VRF Configuration --------------------------- */\\n\\n    bytes32 public vrfKeyHash;\\n    uint256  public vrfSubId;\\n    uint16  public vrfMinConfirmations = 3;\\n    uint32  public vrfCallbackGasLimit;\\n    uint32  public vrfNumWords = 1;\\n    bool    public useNativePayment = true;\\n\\n    /* ---------------------------------- Events -------------------------------- */\\n\\n    event SpyAttackCommitted(uint256 indexed attackId, uint256 indexed defenderId, uint8 attackType);\\n    event SpyAttackResolvedPublic(uint256 indexed attackId, uint256 maskedAttackerId, uint256 defenderId, bool success, uint256 attackType);\\n    event SpyAttackRevealed(uint256 indexed attackId, uint256 attackerId);\\n    event VrfRequested(uint256 indexed attackId, uint256 indexed requestId);\\n\\n    event VrfConfigUpdated(bytes32 keyHash, uint64 subId, uint16 minConf, uint32 gasLimit, uint32 numWords, bool nativePayment);\\n\\n    /* -------------------------------- Constructor ------------------------------ */\\n\\n    constructor(\\n        address _vrfCoordinator,\\n        uint256  _subId,\\n        bytes32 _keyHash,\\n        uint32 _vrfCallbackGasLimit\\n    )\\n        GelatoRelayContextERC2771()\\n        VRFConsumerBaseV2Plus(_vrfCoordinator)\\n    {\\n        vrfKeyHash = _keyHash;\\n        vrfSubId   = _subId;\\n        vrfCallbackGasLimit = _vrfCallbackGasLimit;\\n    }\\n\\n    /* ---------------------------- Owner Admin Setters ------------------------- */\\n\\n    function settings(\\n        address _infrastructure,\\n        address _forces,\\n        address _military,\\n        address _nationStrength,\\n        address _wonders1,\\n        address _wonders2,\\n        address _treasury,\\n        address _parameters,\\n        address _missiles,\\n        address _countryMinter\\n    ) public onlyOwner {\\n        inf = IInfrastructure(_infrastructure);\\n        force = IForces(_forces);\\n        mil = IMilitary(_military);\\n        strength = INationStrength(_nationStrength);\\n        won1 = IWonders1(_wonders1);\\n        won2 = IWonders2(_wonders2);\\n        tsy = ITreasury(_treasury);\\n        params = ICountryParameters(payable(_parameters));\\n        mis = IMissiles(_missiles);\\n        mint = ICountryMinter(_countryMinter);\\n    }\\n\\n    function settings2(address _keeper, address _spies) public onlyOwner {\\n        keep = IKeeper(_keeper);\\n        spy = ISpies(_spies);\\n    }\\n\\n    function setVRFConfig(\\n        bytes32 _keyHash,\\n        uint64  _subId,\\n        uint16  _minConf,\\n        uint32  _gasLimit,\\n        uint32  _numWords,\\n        bool    _useNative\\n    ) external onlyOwner {\\n        vrfKeyHash          = _keyHash;\\n        vrfSubId            = _subId;\\n        vrfMinConfirmations = _minConf;\\n        vrfCallbackGasLimit = _gasLimit;\\n        vrfNumWords         = _numWords;\\n        useNativePayment    = _useNative;\\n        emit VrfConfigUpdated(_keyHash, _subId, _minConf, _gasLimit, _numWords, _useNative);\\n    }\\n\\n    /* ------------------------------ Public Getters ---------------------------- */\\n\\n    function attackedAlready(uint256 defenderId) external view returns (bool) {\\n        uint256 day = keep.getGameDay();\\n        DaySpies storage def = _daySpyCount[day][defenderId];\\n        return def.incoming >= MAX_INCOMING;\\n    }\\n\\n    function getAttackPublic(uint256 id)\\n        external\\n        view\\n        returns (\\n            uint256 attackerIdOrMask,\\n            uint256 defenderId,\\n            uint8   attackType,\\n            bool    success,\\n            bool    revealed,\\n            bool    resolved\\n        )\\n    {\\n        AttackMeta storage m = attacks[id];\\n        require(m.resolved, \\\"NOT_RESOLVED\\\");\\n        uint256 shown = (m.success && !m.revealed) ? MASK_SENTINEL : m.attackerId;\\n        return (shown, m.defenderId, m.attackType, m.success, m.revealed, m.resolved);\\n    }\\n\\n    function initiateSpyAttack(\\n        uint256 attackerId,\\n        uint256 defenderId,\\n        uint8   attackType\\n    ) external onlyGelatoRelayERC2771 returns (uint256 newAttackId) {\\n        require(attackType >= MIN_ATTACK_TYPE && attackType <= MAX_ATTACK_TYPE, \\\"attackType\\\");\\n        require(attackerId != defenderId, \\\"SELF\\\");\\n        address user = _getMsgSender();\\n        require(mint.checkOwnership(attackerId, user), \\\"!owner\\\");\\n\\n        _registerSpyOp(attackerId, defenderId);\\n        require(_internalCheckSpyOperation(defenderId, attackType), \\\"!allowed\\\");\\n\\n        uint256 defenderStrength = strength.getNationStrength(defenderId);\\n        uint256 cost = _calculateSpyOpCost(attackType, defenderStrength);\\n\\n        tsy.spendBalance(attackerId, cost);\\n\\n        pending[attackId] = PendingAttack({\\n            attackerId: attackerId,\\n            defenderId: defenderId,\\n            attackType: attackType,\\n            exists: true\\n        });\\n\\n        uint256 requestId = _requestRandomness();\\n        vrfRequestToAttackId[requestId] = attackId;\\n\\n        emit SpyAttackCommitted(attackId, defenderId, attackType);\\n        emit VrfRequested(attackId, requestId);\\n\\n        newAttackId = attackId;\\n        attackId++;\\n    }\\n\\n    /* -------------------------- VRF Request Helper ---------------------------- */\\n\\n    function _requestRandomness() internal returns (uint256 reqId) {\\n        VRFV2PlusClient.RandomWordsRequest memory req = VRFV2PlusClient.RandomWordsRequest({\\n            keyHash: vrfKeyHash,\\n            subId: vrfSubId,\\n            requestConfirmations: vrfMinConfirmations,\\n            callbackGasLimit: vrfCallbackGasLimit,\\n            numWords: vrfNumWords,\\n            extraArgs: VRFV2PlusClient._argsToBytes(\\n                VRFV2PlusClient.ExtraArgsV1({ nativePayment: useNativePayment })\\n            )\\n        });\\n\\n        reqId = s_vrfCoordinator.requestRandomWords(req);\\n    }\\n\\n    /* -------------------------- VRF Fulfillment (v2.5) ------------------------ */\\n\\n    /**\\n     * @dev VRFConsumerBaseV2Plus internal override.\\n     * NOTE: randomWords length = vrfNumWords.\\n     */\\n    function fulfillRandomWords(\\n        uint256 requestId,\\n        uint256[] calldata randomWords\\n    ) internal override {\\n        uint256 id = vrfRequestToAttackId[requestId];\\n        require(pending[id].exists, \\\"no pending\\\");\\n\\n        PendingAttack memory p = pending[id];\\n        delete pending[id];\\n        delete vrfRequestToAttackId[requestId];\\n\\n        // Compute success\\n        uint256 atkScore = getAttackerSuccessScore(p.attackerId);\\n        uint256 defScore = getDefenseSuccessScore(p.defenderId);\\n        uint256 total = atkScore + defScore;\\n        bool success = false;\\n        if (total > 0) {\\n            success = (randomWords[0] % total) < atkScore;\\n        }\\n\\n        attacks[id] = AttackMeta({\\n            attackerId: p.attackerId,\\n            defenderId: p.defenderId,\\n            attackType: p.attackType,\\n            success: success,\\n            revealed: !success,\\n            resolved: true\\n        });\\n\\n        if (success) {\\n            uint256 effectRand = uint256(keccak256(\\n                abi.encode(randomWords[0], id, p.attackerId, p.defenderId)\\n            ));\\n            _applySpyEffects(p.attackerId, p.defenderId, p.attackType, effectRand);\\n            emit SpyAttackResolvedPublic(id, MASK_SENTINEL, p.defenderId, true, p.attackType);\\n        } else {\\n            emit SpyAttackResolvedPublic(id, p.attackerId, p.defenderId, false, p.attackType);\\n        }\\n    }\\n\\n    /* ------------------------------ Reveal Success ---------------------------- */\\n\\n    function revealAttack(uint256 id) external {\\n        AttackMeta storage m = attacks[id];\\n        require(m.resolved, \\\"!resolved\\\");\\n        require(m.success, \\\"only success\\\");\\n        require(!m.revealed, \\\"revealed\\\");\\n        require(\\n            mint.checkOwnership(m.attackerId, _getMsgSender()) || msg.sender == owner(),\\n            \\\"!auth\\\"\\n        );\\n        m.revealed = true;\\n        emit SpyAttackRevealed(id, m.attackerId);\\n    }\\n\\n    /* ------------------------- Daily Cap Registration ------------------------- */\\n\\n    function _registerSpyOp(uint256 attackerId, uint256 defenderId) internal {\\n        uint256 day = keep.getGameDay();\\n\\n        DaySpies storage atk = _daySpyCount[day][attackerId];\\n        require(atk.outgoing < MAX_OUTGOING, \\\"atk cap\\\");\\n        atk.outgoing += 1;\\n\\n        DaySpies storage def = _daySpyCount[day][defenderId];\\n        require(def.incoming < MAX_INCOMING, \\\"def cap\\\");\\n        def.incoming += 1;\\n    }\\n\\n    /* ---------------------- Operation Allowance (internal) -------------------- */\\n\\n    function _internalCheckSpyOperation(uint256 defenderId, uint8 attackType) internal view returns (bool) {\\n        uint256 infra = inf.getInfrastructureCount(defenderId);\\n        uint256 tech  = inf.getTechnologyCount(defenderId);\\n        uint256 land  = inf.getLandCount(defenderId);\\n\\n        if (attackType == 4)  require(land >= 15, \\\"land<15\\\");\\n        if (attackType == 10) require(tech >= 15, \\\"tech<15\\\");\\n        if (attackType == 11) require(infra >= 15, \\\"infra<15\\\");\\n        if (attackType == 12) {\\n            uint256 nukeCount = mis.getNukeCount(defenderId);\\n            bool silo = won2.getHiddenNuclearMissileSilo(defenderId);\\n            if (silo) require(nukeCount >= 6, \\\"nukes<6\\\");\\n            else      require(nukeCount >= 1, \\\"nukes<1\\\");\\n        }\\n        return true;\\n    }\\n\\n    /* --------------------------- Success Score Logic -------------------------- */\\n\\n    function getAttackerSuccessScore(uint256 countryId) public view returns (uint256) {\\n        uint256 spyCount   = spy.getSpyCount(countryId);\\n        uint256 techAmount = inf.getTechnologyCount(countryId);\\n        uint256 score = spyCount + (techAmount / 15);\\n        if (won1.getCentralIntelligenceAgency(countryId)) {\\n            score = (score * 110) / 100;\\n        }\\n        if (_accommodativeGov(countryId)) {\\n            score = (score * 110) / 100;\\n        }\\n        return score;\\n    }\\n\\n    function getDefenseSuccessScore(uint256 countryId) public view returns (uint256) {\\n        uint256 spyCount   = spy.getSpyCount(countryId);\\n        uint256 techAmount = inf.getTechnologyCount(countryId);\\n        uint256 landAmount = inf.getLandCount(countryId);\\n        uint256 threat     = mil.getThreatLevel(countryId);\\n\\n        uint256 gross = spyCount + (techAmount / 20) + (landAmount / 70);\\n        if (threat == 1) return (gross * 75) / 100;\\n        if (threat == 2) return (gross * 90) / 100;\\n        if (threat == 3) return gross;\\n        if (threat == 4) return (gross * 110) / 100;\\n        if (threat == 4) return (gross * 125) / 100;\\n        return (gross * 125) / 100;\\n    }\\n\\n    function _accommodativeGov(uint256 id) internal view returns (bool) {\\n        uint256 g = params.getGovernmentType(id);\\n        return (g == 2 || g == 7 || g == 10);\\n    }\\n\\n    /* ------------------------------ Cost Function ----------------------------- */\\n\\n    function _calculateSpyOpCost(uint8 attackType, uint256 defenderStrength) internal pure returns (uint256) {\\n        if (attackType == 1)  return 100_000 + defenderStrength;\\n        if (attackType == 2)  return 100_000 + defenderStrength * 2;\\n        if (attackType == 3)  return 100_000 + defenderStrength * 3;\\n        if (attackType == 4)  return 100_000 + defenderStrength * 3;\\n        if (attackType == 5)  return 100_000 + defenderStrength * 3;\\n        if (attackType == 6)  return 150_000 + defenderStrength;\\n        if (attackType == 7)  return 150_000 + defenderStrength * 5;\\n        if (attackType == 8)  return 250_000 + defenderStrength * 2;\\n        if (attackType == 9)  return 300_000 + defenderStrength * 2;\\n        if (attackType == 10) return 100_000 + defenderStrength * 20;\\n        if (attackType == 11) return 500_000 + defenderStrength * 5;\\n        if (attackType == 12) return 500_000 + defenderStrength * 15;\\n        revert(\\\"attackType\\\");\\n    }\\n\\n    /* ------------------------------- Effect Engine ---------------------------- */\\n\\n    function _applySpyEffects(\\n        uint256 /*attackerId*/,\\n        uint256 defenderId,\\n        uint8   attackType,\\n        uint256 seed\\n    ) internal {\\n        if (attackType == 1) {\\n            _destroyCruiseMissiles(defenderId, seed);\\n        } else if (attackType == 2) {\\n            _destroyDefendingTanks(defenderId, seed);\\n        } else if (attackType == 3) {\\n            _captureLand(defenderId, seed);\\n        } else if (attackType == 4) {\\n            _changeDesiredGovernment(defenderId, seed);\\n        } else if (attackType == 5) {\\n            _changeDesiredReligion(defenderId, seed);\\n        } else if (attackType == 6) {\\n            mil.setThreatLevelFromSpyContract(defenderId, 1);\\n        } else if (attackType == 7) {\\n            mil.setDefconLevelFromSpyContract(defenderId, 5);\\n        } else if (attackType == 8) {\\n            _destroySpies(defenderId, seed);\\n        } else if (attackType == 9) {\\n            _captureTechnology(defenderId, seed);\\n        } else if (attackType == 10) {\\n            _sabotageTaxes(defenderId, seed);\\n        } else if (attackType == 11) {\\n            _captureInfrastructure(defenderId, seed);\\n        } else if (attackType == 12) {\\n            mis.decreaseNukeCountFromSpyContract(defenderId);\\n        }\\n    }\\n\\n    function _randSlice(uint256 seed, bytes32 tag, uint256 modBase) private pure returns (uint256) {\\n        return uint256(keccak256(abi.encode(seed, tag))) % modBase;\\n    }\\n\\n    function _destroyCruiseMissiles(uint256 defenderId, uint256 seed) internal {\\n        uint256 amount = (_randSlice(seed, \\\"CRUISE\\\", 5) + 1); // 1..5\\n        mis.decreaseCruiseMissileCount(amount, defenderId);\\n    }\\n\\n    function _destroyDefendingTanks(uint256 defenderId, uint256 seed) internal {\\n        uint256 pct = (_randSlice(seed, \\\"TANKS\\\", 5) + 5); // 5..9%\\n        uint256 defending = force.getDefendingTankCount(defenderId);\\n        uint256 delta = (defending * pct) / 100;\\n        if (delta > 0) force.decreaseDefendingTankCount(delta, defenderId);\\n    }\\n\\n    function _captureLand(uint256 defenderId, uint256 seed) internal {\\n        uint256 amt = (_randSlice(seed, \\\"LAND\\\", 10) + 5); // 5..14\\n        inf.decreaseLandCountFromSpyContract(defenderId, amt);\\n    }\\n\\n    function _changeDesiredGovernment(uint256 defenderId, uint256 seed) internal {\\n        uint256 current = params.getGovernmentPreference(defenderId);\\n        uint256 newPref = (_randSlice(seed, \\\"GOV\\\", 10) + 1); // 1..10\\n        if (newPref == current) {\\n            newPref = (current == 1) ? 2 : current - 1;\\n        }\\n        params.updateDesiredGovernment(defenderId, newPref);\\n    }\\n\\n    function _changeDesiredReligion(uint256 defenderId, uint256 seed) internal {\\n        uint256 current = params.getReligionPreference(defenderId);\\n        uint256 newPref = (_randSlice(seed, \\\"REL\\\", 14) + 1); // 1..14\\n        if (newPref == current) {\\n            newPref = (current == 1) ? 2 : current - 1;\\n        }\\n        params.updateDesiredReligion(defenderId, newPref);\\n    }\\n\\n    function _destroySpies(uint256 defenderId, uint256 seed) internal {\\n        uint256 spyCount = spy.getSpyCount(defenderId);\\n        uint256 toDestroy = (_randSlice(seed, \\\"SPY\\\", 20) + 1); // 1..20\\n        if (toDestroy > spyCount) toDestroy = spyCount;\\n        if (toDestroy > 0) spy.decreaseDefenderSpyCount(toDestroy, defenderId);\\n    }\\n\\n    function _captureTechnology(uint256 defenderId, uint256 seed) internal {\\n        uint256 amt = (_randSlice(seed, \\\"TECH\\\", 10) + 5); // 5..14\\n        inf.decreaseTechCountFromSpyContract(defenderId, amt);\\n    }\\n\\n    function _sabotageTaxes(uint256 defenderId, uint256 seed) internal {\\n        uint256 newRate = (_randSlice(seed, \\\"TAX\\\", 4) + 20); // 20..23\\n        inf.setTaxRateFromSpyContract(defenderId, newRate);\\n    }\\n\\n    function _captureInfrastructure(uint256 defenderId, uint256 seed) internal {\\n        uint256 amt = (_randSlice(seed, \\\"INFRA\\\", 10) + 5); // 5..14\\n        inf.decreaseInfrastructureCountFromSpyContract(defenderId, amt);\\n    }\\n}\\n\",\"keccak256\":\"0xab60c8333ec77f0aa4180d72103b7b6e1c8d883f332919559d63eecf0b22d9bc\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "setCoordinator(address)": {
        "notice": "Sets the VRF Coordinator addressThis method should only be callable by the coordinator or contract owner"
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 29,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "s_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 31,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 231,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "s_vrfCoordinator",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IVRFCoordinatorV2Plus)380"
      },
      {
        "astId": 60894,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "attackId",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 60901,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "_daySpyCount",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(DaySpies)60855_storage))"
      },
      {
        "astId": 60905,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "vrfRequestToAttackId",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 60910,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "pending",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(PendingAttack)60864_storage)"
      },
      {
        "astId": 60915,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "attacks",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(AttackMeta)60877_storage)"
      },
      {
        "astId": 60918,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "inf",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IInfrastructure)60668"
      },
      {
        "astId": 60921,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "force",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IForces)60683"
      },
      {
        "astId": 60924,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "mil",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IMilitary)60705"
      },
      {
        "astId": 60927,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "strength",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(INationStrength)60713"
      },
      {
        "astId": 60930,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "tsy",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(ITreasury)60721"
      },
      {
        "astId": 60933,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "params",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(ICountryParameters)60757"
      },
      {
        "astId": 60936,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "mis",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(IMissiles)60818"
      },
      {
        "astId": 60939,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "won1",
        "offset": 0,
        "slot": "15",
        "type": "t_contract(IWonders1)60765"
      },
      {
        "astId": 60942,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "won2",
        "offset": 0,
        "slot": "16",
        "type": "t_contract(IWonders2)60773"
      },
      {
        "astId": 60945,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "mint",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(ICountryMinter)60783"
      },
      {
        "astId": 60948,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "keep",
        "offset": 0,
        "slot": "18",
        "type": "t_contract(IKeeper)60824"
      },
      {
        "astId": 60951,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "spy",
        "offset": 0,
        "slot": "19",
        "type": "t_contract(ISpies)60798"
      },
      {
        "astId": 60953,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "vrfKeyHash",
        "offset": 0,
        "slot": "20",
        "type": "t_bytes32"
      },
      {
        "astId": 60955,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "vrfSubId",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 60958,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "vrfMinConfirmations",
        "offset": 0,
        "slot": "22",
        "type": "t_uint16"
      },
      {
        "astId": 60960,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "vrfCallbackGasLimit",
        "offset": 2,
        "slot": "22",
        "type": "t_uint32"
      },
      {
        "astId": 60963,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "vrfNumWords",
        "offset": 6,
        "slot": "22",
        "type": "t_uint32"
      },
      {
        "astId": 60966,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "useNativePayment",
        "offset": 10,
        "slot": "22",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICountryMinter)60783": {
        "encoding": "inplace",
        "label": "contract ICountryMinter",
        "numberOfBytes": "20"
      },
      "t_contract(ICountryParameters)60757": {
        "encoding": "inplace",
        "label": "contract ICountryParameters",
        "numberOfBytes": "20"
      },
      "t_contract(IForces)60683": {
        "encoding": "inplace",
        "label": "contract IForces",
        "numberOfBytes": "20"
      },
      "t_contract(IInfrastructure)60668": {
        "encoding": "inplace",
        "label": "contract IInfrastructure",
        "numberOfBytes": "20"
      },
      "t_contract(IKeeper)60824": {
        "encoding": "inplace",
        "label": "contract IKeeper",
        "numberOfBytes": "20"
      },
      "t_contract(IMilitary)60705": {
        "encoding": "inplace",
        "label": "contract IMilitary",
        "numberOfBytes": "20"
      },
      "t_contract(IMissiles)60818": {
        "encoding": "inplace",
        "label": "contract IMissiles",
        "numberOfBytes": "20"
      },
      "t_contract(INationStrength)60713": {
        "encoding": "inplace",
        "label": "contract INationStrength",
        "numberOfBytes": "20"
      },
      "t_contract(ISpies)60798": {
        "encoding": "inplace",
        "label": "contract ISpies",
        "numberOfBytes": "20"
      },
      "t_contract(ITreasury)60721": {
        "encoding": "inplace",
        "label": "contract ITreasury",
        "numberOfBytes": "20"
      },
      "t_contract(IVRFCoordinatorV2Plus)380": {
        "encoding": "inplace",
        "label": "contract IVRFCoordinatorV2Plus",
        "numberOfBytes": "20"
      },
      "t_contract(IWonders1)60765": {
        "encoding": "inplace",
        "label": "contract IWonders1",
        "numberOfBytes": "20"
      },
      "t_contract(IWonders2)60773": {
        "encoding": "inplace",
        "label": "contract IWonders2",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(DaySpies)60855_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct SpyOperationsContract.DaySpies))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(DaySpies)60855_storage)"
      },
      "t_mapping(t_uint256,t_struct(AttackMeta)60877_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SpyOperationsContract.AttackMeta)",
        "numberOfBytes": "32",
        "value": "t_struct(AttackMeta)60877_storage"
      },
      "t_mapping(t_uint256,t_struct(DaySpies)60855_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SpyOperationsContract.DaySpies)",
        "numberOfBytes": "32",
        "value": "t_struct(DaySpies)60855_storage"
      },
      "t_mapping(t_uint256,t_struct(PendingAttack)60864_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SpyOperationsContract.PendingAttack)",
        "numberOfBytes": "32",
        "value": "t_struct(PendingAttack)60864_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AttackMeta)60877_storage": {
        "encoding": "inplace",
        "label": "struct SpyOperationsContract.AttackMeta",
        "members": [
          {
            "astId": 60866,
            "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
            "label": "attackerId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 60868,
            "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
            "label": "defenderId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 60870,
            "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
            "label": "attackType",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 60872,
            "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
            "label": "success",
            "offset": 1,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 60874,
            "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
            "label": "revealed",
            "offset": 2,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 60876,
            "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
            "label": "resolved",
            "offset": 3,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(DaySpies)60855_storage": {
        "encoding": "inplace",
        "label": "struct SpyOperationsContract.DaySpies",
        "members": [
          {
            "astId": 60852,
            "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
            "label": "outgoing",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 60854,
            "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
            "label": "incoming",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PendingAttack)60864_storage": {
        "encoding": "inplace",
        "label": "struct SpyOperationsContract.PendingAttack",
        "members": [
          {
            "astId": 60857,
            "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
            "label": "attackerId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 60859,
            "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
            "label": "defenderId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 60861,
            "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
            "label": "attackType",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 60863,
            "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
            "label": "exists",
            "offset": 1,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}