{
  "address": "0x714EE473D18d4424D09D11FDad4Fe7e21a0deC2B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_subId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "_vrfCallbackGasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "coordinator",
          "type": "address"
        }
      ],
      "name": "OnlyOwnerOrCoordinator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "attackId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "retryAfter",
          "type": "uint256"
        }
      ],
      "name": "RequestPending",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "UnknownRequest",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "vrfCoordinator",
          "type": "address"
        }
      ],
      "name": "CoordinatorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "attackId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "defenderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "attackType",
          "type": "uint8"
        }
      ],
      "name": "SpyAttackCommitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "attackId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maskedAttackerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "defenderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "attackType",
          "type": "uint256"
        }
      ],
      "name": "SpyAttackResolvedPublic",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "attackId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "attackerId",
          "type": "uint256"
        }
      ],
      "name": "SpyAttackRevealed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "subId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "minConf",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "gasLimit",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "numWords",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "nativePayment",
          "type": "bool"
        }
      ],
      "name": "VrfConfigUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "attackId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "VrfRequestCleared",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "attackId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "VrfRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "attackId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "oldRequestId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newRequestId",
          "type": "uint256"
        }
      ],
      "name": "VrfRetried",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "attackId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "staleRequestId",
          "type": "uint256"
        }
      ],
      "name": "VrfStaleResponseIgnored",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MASK_SENTINEL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_ATTACK_TYPE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_INCOMING",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_OUTGOING",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_ATTACK_TYPE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RETRY_TIMEOUT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "attackId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "attackIdToRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "defenderId",
          "type": "uint256"
        }
      ],
      "name": "attackedAlready",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "attacks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "attackerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "defenderId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "attackType",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "revealed",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "resolved",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_attackId",
          "type": "uint256"
        }
      ],
      "name": "canRetry",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getAttackPublic",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "attackerIdOrMask",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "defenderId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "attackType",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "revealed",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "resolved",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "countryId",
          "type": "uint256"
        }
      ],
      "name": "getAttackerSuccessScore",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "countryId",
          "type": "uint256"
        }
      ],
      "name": "getDefenseSuccessScore",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "attackerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "defenderId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "attackType",
          "type": "uint8"
        }
      ],
      "name": "initiateSpyAttack",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newAttackId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pending",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "attackerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "defenderId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "attackType",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pendingRequestTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pendingRequests",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_attackId",
          "type": "uint256"
        }
      ],
      "name": "retrySpyAttackVRF",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "revealAttack",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_vrfCoordinator",
      "outputs": [
        {
          "internalType": "contract IVRFCoordinatorV2Plus",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        }
      ],
      "name": "setCoordinator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_subId",
          "type": "uint64"
        },
        {
          "internalType": "uint16",
          "name": "_minConf",
          "type": "uint16"
        },
        {
          "internalType": "uint32",
          "name": "_gasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_numWords",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "_useNative",
          "type": "bool"
        }
      ],
      "name": "setVRFConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_infrastructure",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_forces",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_military",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nationStrength",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wonders1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wonders2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_parameters",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_missiles",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_countryMinter",
          "type": "address"
        }
      ],
      "name": "settings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeper",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spies",
          "type": "address"
        }
      ],
      "name": "settings2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vrfRequestToAttackId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xaf867ae090e5dc557e735041b2773d541fc4e6178266e53e76ad1fb444ba9f30",
  "receipt": {
    "to": null,
    "from": "0xAE5ac236357E7c6e483a20650c6891C36353E2a9",
    "contractAddress": "0x714EE473D18d4424D09D11FDad4Fe7e21a0deC2B",
    "transactionIndex": 550,
    "gasUsed": "5204925",
    "logsBloom": "0x
    "blockHash": "0x0b566aec9f6b4af8cce9da6ab8b2e6a7b855a3d78c58e3a7fee0340d00c05bd5",
    "transactionHash": "0xaf867ae090e5dc557e735041b2773d541fc4e6178266e53e76ad1fb444ba9f30",
    "logs": [],
    "blockNumber": 33680422,
    "cumulativeGasUsed": "61061244",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd5D517aBE5cF79B7e95eC98dB0f0277788aFF634",
    "24802783192322697201261566732783929045615788778639507776573378755552146781710",
    "0x00b81b5a830cb0a4009fbd8904de511e28631e62ce5ad231373d3cdad373ccab",
    "2500000"
  ],
  "numDeployments": 3,
  "solcInputHash": "bfb337506f74cf0901f387ae22a24c7e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"_vrfCallbackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coordinator\",\"type\":\"address\"}],\"name\":\"OnlyOwnerOrCoordinator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"attackId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"retryAfter\",\"type\":\"uint256\"}],\"name\":\"RequestPending\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"UnknownRequest\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"}],\"name\":\"CoordinatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"attackId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"defenderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"attackType\",\"type\":\"uint8\"}],\"name\":\"SpyAttackCommitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"attackId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maskedAttackerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"defenderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"attackType\",\"type\":\"uint256\"}],\"name\":\"SpyAttackResolvedPublic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"attackId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"attackerId\",\"type\":\"uint256\"}],\"name\":\"SpyAttackRevealed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"minConf\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"nativePayment\",\"type\":\"bool\"}],\"name\":\"VrfConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"attackId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"VrfRequestCleared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"attackId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"VrfRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"attackId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldRequestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newRequestId\",\"type\":\"uint256\"}],\"name\":\"VrfRetried\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"attackId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"staleRequestId\",\"type\":\"uint256\"}],\"name\":\"VrfStaleResponseIgnored\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MASK_SENTINEL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_ATTACK_TYPE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_INCOMING\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_OUTGOING\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_ATTACK_TYPE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RETRY_TIMEOUT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"attackId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"attackIdToRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"defenderId\",\"type\":\"uint256\"}],\"name\":\"attackedAlready\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"attacks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"attackerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defenderId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"attackType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"revealed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"resolved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_attackId\",\"type\":\"uint256\"}],\"name\":\"canRetry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getAttackPublic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"attackerIdOrMask\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defenderId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"attackType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"revealed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"resolved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"countryId\",\"type\":\"uint256\"}],\"name\":\"getAttackerSuccessScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"countryId\",\"type\":\"uint256\"}],\"name\":\"getDefenseSuccessScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"attackerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defenderId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"attackType\",\"type\":\"uint8\"}],\"name\":\"initiateSpyAttack\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newAttackId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"attackerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"defenderId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"attackType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingRequestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingRequests\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_attackId\",\"type\":\"uint256\"}],\"name\":\"retrySpyAttackVRF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"revealAttack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_vrfCoordinator\",\"outputs\":[{\"internalType\":\"contract IVRFCoordinatorV2Plus\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"}],\"name\":\"setCoordinator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_subId\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"_minConf\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"_gasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_numWords\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"_useNative\",\"type\":\"bool\"}],\"name\":\"setVRFConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_infrastructure\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_forces\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_military\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nationStrength\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wonders1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wonders2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_parameters\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_missiles\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_countryMinter\",\"type\":\"address\"}],\"name\":\"settings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spies\",\"type\":\"address\"}],\"name\":\"settings2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vrfRequestToAttackId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"setCoordinator(address)\":{\"notice\":\"Sets the VRF Coordinator addressThis method should only be callable by the coordinator or contract owner\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SpyOperations.sol\":\"SpyOperationsContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ConfirmedOwnerWithProposal} from \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0xdcb0e9135ddbe71ee27ba99fa06656960c66c964cf2ecb29696da1c1427d9861\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IOwnable} from \\\"../interfaces/IOwnable.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /// @notice Allows an owner to begin transferring ownership to a new address.\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /// @notice Allows an ownership transfer to be completed by the recipient.\\n  function acceptOwnership() external override {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /// @notice Get the current owner\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /// @notice validate, transfer ownership, and emit relevant events\\n  function _transferOwnership(address to) private {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /// @notice validate access\\n  function _validateOwnership() internal view {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /// @notice Reverts if called by anyone other than the contract owner.\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x2422a055657a87e98be61f8f31abb1824ec50fd0f73949f4e3c6ac877efb6da8\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {IVRFCoordinatorV2Plus} from \\\"./interfaces/IVRFCoordinatorV2Plus.sol\\\";\\nimport {IVRFMigratableConsumerV2Plus} from \\\"./interfaces/IVRFMigratableConsumerV2Plus.sol\\\";\\nimport {ConfirmedOwner} from \\\"../../shared/access/ConfirmedOwner.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinatorV2Plus.\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBaseV2Plus, and can\\n * @dev initialize VRFConsumerBaseV2Plus's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumerV2Plus is VRFConsumerBaseV2Plus {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _subOwner)\\n * @dev       VRFConsumerBaseV2Plus(_vrfCoordinator, _subOwner) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create a subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords, extraArgs),\\n * @dev see (IVRFCoordinatorV2Plus for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinatorV2Plus has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBaseV2Plus.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2Plus is IVRFMigratableConsumerV2Plus, ConfirmedOwner {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  error OnlyOwnerOrCoordinator(address have, address owner, address coordinator);\\n  error ZeroAddress();\\n\\n  // s_vrfCoordinator should be used by consumers to make requests to vrfCoordinator\\n  // so that coordinator reference is updated after migration\\n  IVRFCoordinatorV2Plus public s_vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) ConfirmedOwner(msg.sender) {\\n    if (_vrfCoordinator == address(0)) {\\n      revert ZeroAddress();\\n    }\\n    s_vrfCoordinator = IVRFCoordinatorV2Plus(_vrfCoordinator);\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2Plus expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\\n  function fulfillRandomWords(uint256 requestId, uint256[] calldata randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] calldata randomWords) external {\\n    if (msg.sender != address(s_vrfCoordinator)) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, address(s_vrfCoordinator));\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n\\n  /**\\n   * @inheritdoc IVRFMigratableConsumerV2Plus\\n   */\\n  function setCoordinator(address _vrfCoordinator) external override onlyOwnerOrCoordinator {\\n    if (_vrfCoordinator == address(0)) {\\n      revert ZeroAddress();\\n    }\\n    s_vrfCoordinator = IVRFCoordinatorV2Plus(_vrfCoordinator);\\n\\n    emit CoordinatorSet(_vrfCoordinator);\\n  }\\n\\n  modifier onlyOwnerOrCoordinator() {\\n    if (msg.sender != owner() && msg.sender != address(s_vrfCoordinator)) {\\n      revert OnlyOwnerOrCoordinator(msg.sender, owner(), address(s_vrfCoordinator));\\n    }\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x0c92838396c5abe72754ebeae526a0434dd53fdaf63e6b98111aebd6114cfcc2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFCoordinatorV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {VRFV2PlusClient} from \\\"../libraries/VRFV2PlusClient.sol\\\";\\nimport {IVRFSubscriptionV2Plus} from \\\"./IVRFSubscriptionV2Plus.sol\\\";\\n\\n// Interface that enables consumers of VRFCoordinatorV2Plus to be future-proof for upgrades\\n// This interface is supported by subsequent versions of VRFCoordinatorV2Plus\\ninterface IVRFCoordinatorV2Plus is IVRFSubscriptionV2Plus {\\n  /**\\n   * @notice Request a set of random words.\\n   * @param req - a struct containing following fields for randomness request:\\n   * keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * requestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * extraArgs - abi-encoded extra args\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(VRFV2PlusClient.RandomWordsRequest calldata req) external returns (uint256 requestId);\\n}\\n\",\"keccak256\":\"0x7dca2a64690ddd95ee05e422e1f61e7c1d701aaf5be1390ae12e9bd144266c36\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFMigratableConsumerV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice The IVRFMigratableConsumerV2Plus interface defines the\\n/// @notice method required to be implemented by all V2Plus consumers.\\n/// @dev This interface is designed to be used in VRFConsumerBaseV2Plus.\\ninterface IVRFMigratableConsumerV2Plus {\\n  event CoordinatorSet(address vrfCoordinator);\\n\\n  /// @notice Sets the VRF Coordinator address\\n  /// @notice This method should only be callable by the coordinator or contract owner\\n  function setCoordinator(address vrfCoordinator) external;\\n}\\n\",\"keccak256\":\"0x8be8744e3b8380dc85354cf110e8caef8f394266e79120ad675a7da835ed2a85\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFSubscriptionV2Plus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice The IVRFSubscriptionV2Plus interface defines the subscription\\n/// @notice related methods implemented by the V2Plus coordinator.\\ninterface IVRFSubscriptionV2Plus {\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint256 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint256 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint256 subId, address to) external;\\n\\n  /**\\n   * @notice Accept subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint256 subId) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint256 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription with LINK, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   * @dev Note to fund the subscription with Native, use fundSubscriptionWithNative. Be sure\\n   * @dev  to send Native with the call, for example:\\n   * @dev COORDINATOR.fundSubscriptionWithNative{value: amount}(subId);\\n   */\\n  function createSubscription() external returns (uint256 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return nativeBalance - native balance of the subscription in wei.\\n   * @return reqCount - Requests count of subscription.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint256 subId\\n  )\\n    external\\n    view\\n    returns (uint96 balance, uint96 nativeBalance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint256 subId) external view returns (bool);\\n\\n  /**\\n   * @notice Paginate through all active VRF subscriptions.\\n   * @param startIndex index of the subscription to start from\\n   * @param maxCount maximum number of subscriptions to return, 0 to return all\\n   * @dev the order of IDs in the list is **not guaranteed**, therefore, if making successive calls, one\\n   * @dev should consider keeping the blockheight constant to ensure a holistic picture of the contract state\\n   */\\n  function getActiveSubscriptionIds(uint256 startIndex, uint256 maxCount) external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice Fund a subscription with native.\\n   * @param subId - ID of the subscription\\n   * @notice This method expects msg.value to be greater than or equal to 0.\\n   */\\n  function fundSubscriptionWithNative(uint256 subId) external payable;\\n}\\n\",\"keccak256\":\"0x85b348297ce36794e3bf97a47c001fc216bd0ee243e91514a7b395f3fcd189b0\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n// End consumer library.\\nlibrary VRFV2PlusClient {\\n  // extraArgs will evolve to support new features\\n  bytes4 public constant EXTRA_ARGS_V1_TAG = bytes4(keccak256(\\\"VRF ExtraArgsV1\\\"));\\n  struct ExtraArgsV1 {\\n    bool nativePayment;\\n  }\\n\\n  struct RandomWordsRequest {\\n    bytes32 keyHash;\\n    uint256 subId;\\n    uint16 requestConfirmations;\\n    uint32 callbackGasLimit;\\n    uint32 numWords;\\n    bytes extraArgs;\\n  }\\n\\n  function _argsToBytes(ExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n}\\n\",\"keccak256\":\"0x839ad7a737ef18147b518b4ec3cbaf4a49dc994db65cf8369ed4e69d169a98a6\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/GelatoRelayContextERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport {GelatoRelayERC2771Base} from \\\"./base/GelatoRelayERC2771Base.sol\\\";\\nimport {TokenUtils} from \\\"./lib/TokenUtils.sol\\\";\\n\\nuint256 constant _FEE_COLLECTOR_START = 92; // offset: address + address + uint256 + address\\nuint256 constant _FEE_TOKEN_START = 72; // offset: address + uint256 + address\\nuint256 constant _FEE_START = 52; // offset: uint256 + address\\nuint256 constant _MSG_SENDER_START = 20; // offset: address\\n\\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContextERC2771\\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\\nfunction _getFeeCollectorRelayContextERC2771()\\n    pure\\n    returns (address feeCollector)\\n{\\n    assembly {\\n        feeCollector := shr(\\n            96,\\n            calldataload(sub(calldatasize(), _FEE_COLLECTOR_START))\\n        )\\n    }\\n}\\n\\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContextERC2771\\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\\nfunction _getFeeTokenRelayContextERC2771() pure returns (address feeToken) {\\n    assembly {\\n        feeToken := shr(96, calldataload(sub(calldatasize(), _FEE_TOKEN_START)))\\n    }\\n}\\n\\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContextERC2771\\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\\nfunction _getFeeRelayContextERC2771() pure returns (uint256 fee) {\\n    assembly {\\n        fee := calldataload(sub(calldatasize(), _FEE_START))\\n    }\\n}\\n\\n// WARNING: Do not use this free fn by itself, always inherit GelatoRelayContextERC2771\\n// solhint-disable-next-line func-visibility, private-vars-leading-underscore\\nfunction _getMsgSenderRelayContextERC2771() pure returns (address _msgSender) {\\n    assembly {\\n        _msgSender := shr(\\n            96,\\n            calldataload(sub(calldatasize(), _MSG_SENDER_START))\\n        )\\n    }\\n}\\n\\n/**\\n * @dev Context variant with feeCollector, feeToken, fee, _msgSender appended to msg.data\\n * Expects calldata encoding:\\n    abi.encodePacked(\\n        _data,\\n        _feeCollector,\\n        _feeToken,\\n        _fee,\\n        _msgSender\\n    );\\n * Therefore, we're expecting 20 + 20 + 32 + 20 = 92 bytes to be appended to normal msgData\\n *     feeCollector: - 92 bytes\\n *     feeToken: - 72 bytes\\n *     fee: - 52 bytes\\n *     _msgSender: - 20 bytes\\n */\\n\\n/// @dev Do not use with GelatoRelayFeeCollectorERC2771 - pick only one\\nabstract contract GelatoRelayContextERC2771 is GelatoRelayERC2771Base {\\n    using TokenUtils for address;\\n\\n    // DANGER! Only use with onlyGelatoRelayERC2771, onlyGelatoRelayConcurrentERC2771,\\n    // `_isGelatoRelayERC2771` or `_isGelatoRelayConcurrentERC2771` checks\\n    function _transferRelayFee() internal {\\n        _getFeeToken().transfer(_getFeeCollector(), _getFee());\\n    }\\n\\n    // DANGER! Only use with onlyGelatoRelayERC2771, onlyGelatoRelayConcurrentERC2771,\\n    // `_isGelatoRelayERC2771` or `_isGelatoRelayConcurrentERC2771` checks\\n    function _transferRelayFeeCapped(uint256 _maxFee) internal {\\n        uint256 fee = _getFee();\\n        require(\\n            fee <= _maxFee,\\n            \\\"GelatoRelayContextERC2771._transferRelayFeeCapped: maxFee\\\"\\n        );\\n        _getFeeToken().transfer(_getFeeCollector(), fee);\\n    }\\n\\n    // DANGER! Only use with onlyGelatoRelayERC2771, onlyGelatoRelayConcurrentERC2771,\\n    // `_isGelatoRelayERC2771` or `_isGelatoRelayConcurrentERC2771` checks\\n    function _transferFromRelayFee() internal {\\n        _getFeeToken().transferFrom(\\n            _getMsgSender(),\\n            _getFeeCollector(),\\n            _getFee()\\n        );\\n    }\\n\\n    // DANGER! Only use with onlyGelatoRelayERC2771, onlyGelatoRelayConcurrentERC2771,\\n    // `_isGelatoRelayERC2771` or `_isGelatoRelayConcurrentERC2771` checks\\n    function _transferFromRelayFeeCapped(uint256 _maxFee) internal {\\n        uint256 fee = _getFee();\\n        require(\\n            fee <= _maxFee,\\n            \\\"GelatoRelayContextERC2771._transferFromRelayFeeCapped: maxFee\\\"\\n        );\\n        _getFeeToken().transferFrom(_getMsgSender(), _getFeeCollector(), fee);\\n    }\\n\\n    // DANGER! Only use with onlyGelatoRelayERC2771, onlyGelatoRelayConcurrentERC2771,\\n    // `_isGelatoRelayERC2771` or `_isGelatoRelayConcurrentERC2771` checks\\n    function _transferFromRelayFeeCappedWithPermit(\\n        uint256 _maxFee,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) internal {\\n        uint256 fee = _getFee();\\n        require(\\n            fee <= _maxFee,\\n            \\\"GelatoRelayContextERC2771._transferFromRelayFeeCappedWithPermit: maxFee\\\"\\n        );\\n\\n        address from = _getMsgSender();\\n        address token = _getFeeToken();\\n\\n        token.permit(from, address(this), _maxFee, _deadline, _v, _r, _s);\\n        token.transferFrom(from, _getFeeCollector(), fee);\\n    }\\n\\n    function _getMsgData() internal view virtual returns (bytes calldata) {\\n        return\\n            _isGelatoRelayERC2771(msg.sender)\\n                ? msg.data[:msg.data.length - _FEE_COLLECTOR_START]\\n                : msg.data;\\n    }\\n\\n    function _getMsgSender() internal view virtual returns (address) {\\n        return\\n            _isGelatoRelayERC2771(msg.sender)\\n                ? _getMsgSenderRelayContextERC2771()\\n                : msg.sender;\\n    }\\n\\n    // Only use with onlyGelatoRelayERC2771, onlyGelatoRelayConcurrentERC2771,\\n    // `_isGelatoRelayERC2771` or `_isGelatoRelayConcurrentERC2771` checks\\n    function _getFeeCollector() internal pure returns (address) {\\n        return _getFeeCollectorRelayContextERC2771();\\n    }\\n\\n    // Only use with onlyGelatoRelayERC2771, onlyGelatoRelayConcurrentERC2771,\\n    // `_isGelatoRelayERC2771` or `_isGelatoRelayConcurrentERC2771` checks\\n    function _getFeeToken() internal pure returns (address) {\\n        return _getFeeTokenRelayContextERC2771();\\n    }\\n\\n    // Only use with onlyGelatoRelayERC2771, onlyGelatoRelayConcurrentERC2771,\\n    // `_isGelatoRelayERC2771` or `_isGelatoRelayConcurrentERC2771` checks\\n    function _getFee() internal pure returns (uint256) {\\n        return _getFeeRelayContextERC2771();\\n    }\\n}\\n\",\"keccak256\":\"0xb1e64af21e3d0045989a60e1cd917b02233d8406ae5e735a610f4ebd2a4bc160\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/base/GelatoRelayERC2771Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport {\\n    GelatoRelayContractsUtils\\n} from \\\"../utils/GelatoRelayContractsUtils.sol\\\";\\nimport {\\n    GELATO_RELAY_ERC2771_V1,\\n    GELATO_RELAY_CONCURRENT_ERC2771_V1,\\n    GELATO_RELAY_ERC2771_V2,\\n    GELATO_RELAY_CONCURRENT_ERC2771_V2,\\n    GELATO_RELAY_ERC2771_ZKSYNC_V1,\\n    GELATO_RELAY_CONCURRENT_ERC2771_ZKSYNC_V1,\\n    GELATO_RELAY_ERC2771_ZKSYNC_V2,\\n    GELATO_RELAY_CONCURRENT_ERC2771_ZKSYNC_V2,\\n    GELATO_RELAY_ERC2771_BOTANIX_V2,\\n    GELATO_RELAY_CONCURRENT_ERC2771_BOTANIX_V2\\n} from \\\"../constants/GelatoRelay.sol\\\";\\n\\nabstract contract GelatoRelayERC2771Base is GelatoRelayContractsUtils {\\n    modifier onlyGelatoRelayERC2771() {\\n        require(_isGelatoRelayERC2771(msg.sender), \\\"onlyGelatoRelayERC2771\\\");\\n        _;\\n    }\\n\\n    function _isGelatoRelayERC2771(address _forwarder)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        if (\\n            _forwarder == _gelatoRelayERC2771 ||\\n            _forwarder == _gelatoRelayConcurrentERC2771\\n        ) {\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0x73c249bca2422421c9f2b5394e1a0a242bfe074e5d9c8eb983eb540db733b72b\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/constants/GelatoRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\naddress constant GELATO_RELAY_V1 = 0xaBcC9b596420A9E9172FD5938620E265a0f9Df92;\\naddress constant GELATO_RELAY_ERC2771_V1 = 0xb539068872230f20456CF38EC52EF2f91AF4AE49;\\naddress constant GELATO_RELAY_CONCURRENT_ERC2771_V1 = 0x8598806401A63Ddf52473F1B3C55bC9E33e2d73b;\\n\\naddress constant GELATO_RELAY_V2 = 0xcd565435e0d2109feFde337a66491541Df0D1420;\\naddress constant GELATO_RELAY_ERC2771_V2 = 0x8aCE64CEA52b409F930f60B516F65197faD4B056;\\naddress constant GELATO_RELAY_CONCURRENT_ERC2771_V2 = 0xc7739c195618D314C08E8626C98f8573E4E43634;\\n\\naddress constant GELATO_RELAY_ZKSYNC_V1 = 0xB16a1DbE755f992636705fDbb3A8678a657EB3ea;\\naddress constant GELATO_RELAY_ERC2771_ZKSYNC_V1 = 0x22DCC39b2AC376862183dd35A1664798dafC7Da6;\\n// solhint-disable-next-line max-line-length\\naddress constant GELATO_RELAY_CONCURRENT_ERC2771_ZKSYNC_V1 = 0xBa4082F4961c8Fb76231995C967CD9aa40f321b5;\\n\\naddress constant GELATO_RELAY_ZKSYNC_V2 = 0x42120A1417a091a52A8d4590E28fc6C0F61E5632;\\naddress constant GELATO_RELAY_ERC2771_ZKSYNC_V2 = 0xACeD988c5B5Fe3f11848c728D9a5f66Cf34c9e73;\\n// solhint-disable-next-line max-line-length\\naddress constant GELATO_RELAY_CONCURRENT_ERC2771_ZKSYNC_V2 = 0xbbCe89ACdD86D0130BDc3f1fe37C3aEDd79fc1F4;\\n\\naddress constant GELATO_RELAY_BOTANIX_V2 = 0x61aCe8fBA7B80AEf8ED67f37CB60bE00180872aD;\\naddress constant GELATO_RELAY_ERC2771_BOTANIX_V2 = 0x368165B2AFb95FaE8ceC409Efa59d5091f9875A5;\\n// solhint-disable-next-line max-line-length\\naddress constant GELATO_RELAY_CONCURRENT_ERC2771_BOTANIX_V2 = 0x038479687b7bC7943313bFfd524A4aCc96B3F9BE;\\n\",\"keccak256\":\"0xc9b5cae520634d9f4df86fa556664eb76696f5dedcebf5d446b0c0e426c3f315\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/constants/Tokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\naddress constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\",\"keccak256\":\"0xf58ba7702aa3e8aebf160c14db02a66afcc28d7dd0b94dee6a30cc7c5fa8335a\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/lib/TokenUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport {NATIVE_TOKEN} from \\\"../constants/Tokens.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    IERC20Permit\\n} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary TokenUtils {\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IERC20Permit;\\n\\n    modifier onlyERC20(address _token) {\\n        require(_token != NATIVE_TOKEN, \\\"TokenUtils.onlyERC20\\\");\\n        _;\\n    }\\n\\n    function permit(\\n        address _token,\\n        address _owner,\\n        address _spender,\\n        uint256 _value,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) internal onlyERC20(_token) {\\n        IERC20Permit(_token).safePermit(\\n            _owner,\\n            _spender,\\n            _value,\\n            _deadline,\\n            _v,\\n            _r,\\n            _s\\n        );\\n    }\\n\\n    function transfer(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        if (_amount == 0) return;\\n        _token == NATIVE_TOKEN\\n            ? Address.sendValue(payable(_to), _amount)\\n            : IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n\\n    function transferFrom(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal onlyERC20(_token) {\\n        if (_amount == 0) return;\\n        IERC20(_token).safeTransferFrom(_from, _to, _amount);\\n    }\\n\\n    function getBalance(address token, address user)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            token == NATIVE_TOKEN\\n                ? user.balance\\n                : IERC20(token).balanceOf(user);\\n    }\\n}\\n\",\"keccak256\":\"0xe253b669748d9af2d2524855f49992ccc434c4a95a9a737ab03ef550749d5a14\",\"license\":\"MIT\"},\"@gelatonetwork/relay-context/contracts/utils/GelatoRelayContractsUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport {\\n    GELATO_RELAY_V1,\\n    GELATO_RELAY_V2,\\n    GELATO_RELAY_BOTANIX_V2,\\n    GELATO_RELAY_ZKSYNC_V1,\\n    GELATO_RELAY_ZKSYNC_V2,\\n    GELATO_RELAY_ERC2771_V1,\\n    GELATO_RELAY_CONCURRENT_ERC2771_V1,\\n    GELATO_RELAY_ERC2771_V2,\\n    GELATO_RELAY_CONCURRENT_ERC2771_V2,\\n    GELATO_RELAY_ERC2771_ZKSYNC_V1,\\n    GELATO_RELAY_CONCURRENT_ERC2771_ZKSYNC_V1,\\n    GELATO_RELAY_ERC2771_ZKSYNC_V2,\\n    GELATO_RELAY_CONCURRENT_ERC2771_ZKSYNC_V2,\\n    GELATO_RELAY_ERC2771_BOTANIX_V2,\\n    GELATO_RELAY_CONCURRENT_ERC2771_BOTANIX_V2\\n} from \\\"../constants/GelatoRelay.sol\\\";\\n\\nabstract contract GelatoRelayContractsUtils {\\n    address internal immutable _gelatoRelay;\\n    address internal immutable _gelatoRelayERC2771;\\n    address internal immutable _gelatoRelayConcurrentERC2771;\\n\\n    constructor() {\\n        (\\n            _gelatoRelay,\\n            _gelatoRelayERC2771,\\n            _gelatoRelayConcurrentERC2771\\n        ) = _getRelayAddresses();\\n    }\\n\\n    function _getRelayAddresses()\\n        internal\\n        view\\n        returns (\\n            address,\\n            address,\\n            address\\n        )\\n    {\\n        if (_isBotanixChainId(block.chainid)) {\\n            return (\\n                GELATO_RELAY_BOTANIX_V2,\\n                GELATO_RELAY_ERC2771_BOTANIX_V2,\\n                GELATO_RELAY_CONCURRENT_ERC2771_BOTANIX_V2\\n            );\\n        } else if (_isV1ZkSyncChainId(block.chainid)) {\\n            return (\\n                GELATO_RELAY_ZKSYNC_V1,\\n                GELATO_RELAY_ERC2771_ZKSYNC_V1,\\n                GELATO_RELAY_CONCURRENT_ERC2771_ZKSYNC_V1\\n            );\\n        } else if (_isV2ZkSyncChainId(block.chainid)) {\\n            return (\\n                GELATO_RELAY_ZKSYNC_V2,\\n                GELATO_RELAY_ERC2771_ZKSYNC_V2,\\n                GELATO_RELAY_CONCURRENT_ERC2771_ZKSYNC_V2\\n            );\\n        } else if (_isV1ChainId(block.chainid)) {\\n            return (\\n                GELATO_RELAY_V1,\\n                GELATO_RELAY_ERC2771_V1,\\n                GELATO_RELAY_CONCURRENT_ERC2771_V1\\n            );\\n        } else {\\n            return (\\n                GELATO_RELAY_V2,\\n                GELATO_RELAY_ERC2771_V2,\\n                GELATO_RELAY_CONCURRENT_ERC2771_V2\\n            );\\n        }\\n    }\\n\\n    // solhint-disable-next-line function-max-lines\\n    function _isV1ChainId(uint256 chainId) private pure returns (bool) {\\n        if (\\n            chainId == 1 ||\\n            chainId == 10 ||\\n            chainId == 25 ||\\n            chainId == 30 ||\\n            chainId == 56 ||\\n            chainId == 100 ||\\n            chainId == 109 ||\\n            chainId == 137 ||\\n            chainId == 183 ||\\n            chainId == 233 ||\\n            chainId == 250 ||\\n            chainId == 314 ||\\n            chainId == 1088 ||\\n            chainId == 1101 ||\\n            chainId == 1135 ||\\n            chainId == 1284 ||\\n            chainId == 1285 ||\\n            chainId == 1729 ||\\n            chainId == 1829 ||\\n            chainId == 1833 ||\\n            chainId == 2039 ||\\n            chainId == 3776 ||\\n            chainId == 4202 ||\\n            chainId == 6398 ||\\n            chainId == 8453 ||\\n            chainId == 10200 ||\\n            chainId == 18231 ||\\n            chainId == 18233 ||\\n            chainId == 25327 ||\\n            chainId == 34443 ||\\n            chainId == 41455 ||\\n            chainId == 42069 ||\\n            chainId == 42161 ||\\n            chainId == 43114 ||\\n            chainId == 59144 ||\\n            chainId == 80002 ||\\n            chainId == 80084 ||\\n            chainId == 81457 ||\\n            chainId == 84532 ||\\n            chainId == 111188 ||\\n            chainId == 241120 ||\\n            chainId == 421614 ||\\n            chainId == 656476 ||\\n            chainId == 1261120 ||\\n            chainId == 6038361 ||\\n            chainId == 7777777 ||\\n            chainId == 11155111 ||\\n            chainId == 11155420 ||\\n            chainId == 29313331 ||\\n            chainId == 69658185 ||\\n            chainId == 89346162 ||\\n            chainId == 94204209 ||\\n            chainId == 123420111 ||\\n            chainId == 168587773 ||\\n            chainId == 222000222 ||\\n            chainId == 994873017 ||\\n            chainId == 1380012617 ||\\n            chainId == 3155399334 ||\\n            chainId == 80998896642 ||\\n            chainId == 88153591557\\n        ) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function _isV1ZkSyncChainId(uint256 chainId) private pure returns (bool) {\\n        if (chainId == 324 || chainId == 280) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function _isV2ZkSyncChainId(uint256 chainId) private pure returns (bool) {\\n        if (chainId == 11124 || chainId == 2741) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function _isBotanixChainId(uint256 chainId) private pure returns (bool) {\\n        if (chainId == 3637 || chainId == 3636) {\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0xe7d28c6257c502666e1721ba7c37812d4d29914b1ce9d03d8af124ccbd8d9fbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/SpyOperations.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\ninterface IInfrastructure {\\n    function getInfrastructureCount(\\n        uint256 countryId\\n    ) external view returns (uint256);\\n\\n    function getTechnologyCount(\\n        uint256 countryId\\n    ) external view returns (uint256);\\n\\n    function getLandCount(uint256 countryId) external view returns (uint256);\\n\\n    // Spy effect hooks\\n    function decreaseLandCountFromSpyContract(\\n        uint256 defenderId,\\n        uint256 amount\\n    ) external;\\n\\n    function decreaseTechCountFromSpyContract(\\n        uint256 defenderId,\\n        uint256 amount\\n    ) external;\\n\\n    function decreaseInfrastructureCountFromSpyContract(\\n        uint256 defenderId,\\n        uint256 amount\\n    ) external;\\n\\n    function setTaxRateFromSpyContract(\\n        uint256 defenderId,\\n        uint256 newRate\\n    ) external;\\n\\n    // (If you need capturing logic for infrastructure, adjust accordingly)\\n}\\n\\ninterface IForces {\\n    function getDefendingTankCount(\\n        uint256 defenderId\\n    ) external view returns (uint256);\\n\\n    function decreaseDefendingTankCount(\\n        uint256 amount,\\n        uint256 defenderId\\n    ) external;\\n}\\n\\ninterface IMilitary {\\n    function getThreatLevel(uint256 countryId) external view returns (uint256);\\n\\n    function setThreatLevelFromSpyContract(\\n        uint256 defenderId,\\n        uint256 level\\n    ) external;\\n\\n    function setDefconLevelFromSpyContract(\\n        uint256 defenderId,\\n        uint256 level\\n    ) external;\\n}\\n\\ninterface INationStrength {\\n    function getNationStrength(\\n        uint256 countryId\\n    ) external view returns (uint256);\\n}\\n\\ninterface ITreasury {\\n    function spendBalance(uint256 attackerId, uint256 amount) external;\\n}\\n\\ninterface ICountryParameters {\\n    function getGovernmentType(\\n        uint256 countryId\\n    ) external view returns (uint256);\\n\\n    function getGovernmentPreference(\\n        uint256 countryId\\n    ) external view returns (uint256);\\n\\n    function updateDesiredGovernment(\\n        uint256 countryId,\\n        uint256 newPref\\n    ) external;\\n\\n    function getReligionPreference(\\n        uint256 countryId\\n    ) external view returns (uint256);\\n\\n    function updateDesiredReligion(uint256 countryId, uint256 newPref) external;\\n}\\n\\ninterface IWonders1 {\\n    function getCentralIntelligenceAgency(\\n        uint256 countryId\\n    ) external view returns (bool);\\n}\\n\\ninterface IWonders2 {\\n    function getHiddenNuclearMissileSilo(\\n        uint256 countryId\\n    ) external view returns (bool);\\n}\\n\\ninterface ICountryMinter {\\n    function checkOwnership(\\n        uint256 countryId,\\n        address user\\n    ) external view returns (bool);\\n}\\n\\ninterface ISpies {\\n    function getSpyCount(uint256 countryId) external view returns (uint256);\\n\\n    function decreaseDefenderSpyCount(\\n        uint256 amount,\\n        uint256 defenderId\\n    ) external;\\n}\\n\\ninterface IMissiles {\\n    function getNukeCount(uint256 countryId) external view returns (uint256);\\n\\n    function decreaseCruiseMissileCount(\\n        uint256 amount,\\n        uint256 defenderId\\n    ) external;\\n\\n    function decreaseNukeCountFromSpyContract(uint256 defenderId) external;\\n}\\n\\ninterface IKeeper {\\n    function getGameDay() external view returns (uint256);\\n}\\n\\ninterface IVRFCoordinatorV2 {\\n    function requestRandomWords(\\n        bytes32 keyHash,\\n        uint64 subId,\\n        uint16 minConfirmations,\\n        uint32 callbackGasLimit,\\n        uint32 numWords\\n    ) external returns (uint256 requestId);\\n}\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@gelatonetwork/relay-context/contracts/GelatoRelayContextERC2771.sol\\\";\\nimport {VRFConsumerBaseV2Plus} from \\\"@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol\\\";\\nimport {VRFV2PlusClient} from \\\"@chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol\\\";\\n\\n/* --------------------------------------------------------------------------\\n * Contract\\n * -------------------------------------------------------------------------- */\\n\\ncontract SpyOperationsContract is\\n    GelatoRelayContextERC2771,\\n    VRFConsumerBaseV2Plus\\n{\\n    struct DaySpies {\\n        uint8 outgoing;\\n        uint8 incoming;\\n    }\\n\\n    struct PendingAttack {\\n        uint256 attackerId;\\n        uint256 defenderId;\\n        uint8 attackType;\\n        bool exists;\\n    }\\n\\n    struct AttackMeta {\\n        uint256 attackerId;\\n        uint256 defenderId;\\n        uint8 attackType;\\n        bool success;\\n        bool revealed; // True if failure OR later reveal\\n        bool resolved;\\n    }\\n\\n    /* ------------------------------- Constants -------------------------------- */\\n\\n    uint8 public constant MAX_OUTGOING = 6;\\n    uint8 public constant MAX_INCOMING = 2;\\n    uint8 public constant MIN_ATTACK_TYPE = 1;\\n    uint8 public constant MAX_ATTACK_TYPE = 12;\\n    uint256 public constant MASK_SENTINEL = 0; // Masked attacker id in public success event\\n\\n    /* --------------------------------- Storage -------------------------------- */\\n\\n    // Incremental attack id\\n    uint256 public attackId;\\n\\n    // day => nationId => counts\\n    mapping(uint256 => mapping(uint256 => DaySpies)) private _daySpyCount;\\n\\n    // VRF request -> attackId\\n    mapping(uint256 => uint256) public vrfRequestToAttackId;\\n\\n    // attackId -> pending (while waiting for VRF)\\n    mapping(uint256 => PendingAttack) public pending;\\n\\n    // attackId -> final meta\\n    mapping(uint256 => AttackMeta) public attacks;\\n\\n    /* -------------------------- External Contract Refs ------------------------ */\\n\\n    IInfrastructure private inf;\\n    IForces private force;\\n    IMilitary private mil;\\n    INationStrength private strength;\\n    ITreasury private tsy;\\n    ICountryParameters private params;\\n    IMissiles private mis;\\n    IWonders1 private won1;\\n    IWonders2 private won2;\\n    ICountryMinter private mint;\\n    IKeeper private keep;\\n    ISpies private spy;\\n\\n    /* ----------------------------- VRF Configuration --------------------------- */\\n\\n    bytes32 private vrfKeyHash;\\n    uint256 private vrfSubId;\\n    uint16 private vrfMinConfirmations = 3;\\n    uint32 private vrfCallbackGasLimit;\\n    uint32 private vrfNumWords = 1;\\n    bool private useNativePayment = true;\\n\\n    /* ---------------------------------- Events -------------------------------- */\\n\\n    event SpyAttackCommitted(\\n        uint256 indexed attackId,\\n        uint256 indexed defenderId,\\n        uint8 attackType\\n    );\\n    event SpyAttackResolvedPublic(\\n        uint256 indexed attackId,\\n        uint256 maskedAttackerId,\\n        uint256 defenderId,\\n        bool success,\\n        uint256 attackType\\n    );\\n    event SpyAttackRevealed(uint256 indexed attackId, uint256 attackerId);\\n    event VrfRequested(uint256 indexed attackId, uint256 indexed requestId);\\n\\n    event VrfConfigUpdated(\\n        bytes32 keyHash,\\n        uint64 subId,\\n        uint16 minConf,\\n        uint32 gasLimit,\\n        uint32 numWords,\\n        bool nativePayment\\n    );\\n\\n    /* -------------------------------- Constructor ------------------------------ */\\n\\n    constructor(\\n        address _vrfCoordinator,\\n        uint256 _subId,\\n        bytes32 _keyHash,\\n        uint32 _vrfCallbackGasLimit\\n    ) GelatoRelayContextERC2771() VRFConsumerBaseV2Plus(_vrfCoordinator) {\\n        vrfKeyHash = _keyHash;\\n        vrfSubId = _subId;\\n        vrfCallbackGasLimit = _vrfCallbackGasLimit;\\n    }\\n\\n    /* ---------------------------- Owner Admin Setters ------------------------- */\\n\\n    function settings(\\n        address _infrastructure,\\n        address _forces,\\n        address _military,\\n        address _nationStrength,\\n        address _wonders1,\\n        address _wonders2,\\n        address _treasury,\\n        address _parameters,\\n        address _missiles,\\n        address _countryMinter\\n    ) public onlyOwner {\\n        inf = IInfrastructure(_infrastructure);\\n        force = IForces(_forces);\\n        mil = IMilitary(_military);\\n        strength = INationStrength(_nationStrength);\\n        won1 = IWonders1(_wonders1);\\n        won2 = IWonders2(_wonders2);\\n        tsy = ITreasury(_treasury);\\n        params = ICountryParameters(payable(_parameters));\\n        mis = IMissiles(_missiles);\\n        mint = ICountryMinter(_countryMinter);\\n    }\\n\\n    function settings2(address _keeper, address _spies) public onlyOwner {\\n        keep = IKeeper(_keeper);\\n        spy = ISpies(_spies);\\n    }\\n\\n    function setVRFConfig(\\n        bytes32 _keyHash,\\n        uint64 _subId,\\n        uint16 _minConf,\\n        uint32 _gasLimit,\\n        uint32 _numWords,\\n        bool _useNative\\n    ) external onlyOwner {\\n        vrfKeyHash = _keyHash;\\n        vrfSubId = _subId;\\n        vrfMinConfirmations = _minConf;\\n        vrfCallbackGasLimit = _gasLimit;\\n        vrfNumWords = _numWords;\\n        useNativePayment = _useNative;\\n        emit VrfConfigUpdated(\\n            _keyHash,\\n            _subId,\\n            _minConf,\\n            _gasLimit,\\n            _numWords,\\n            _useNative\\n        );\\n    }\\n\\n    /* ------------------------------ Public Getters ---------------------------- */\\n\\n    function attackedAlready(uint256 defenderId) external view returns (bool) {\\n        uint256 day = keep.getGameDay();\\n        DaySpies storage def = _daySpyCount[day][defenderId];\\n        return def.incoming >= MAX_INCOMING;\\n    }\\n\\n    function getAttackPublic(\\n        uint256 id\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 attackerIdOrMask,\\n            uint256 defenderId,\\n            uint8 attackType,\\n            bool success,\\n            bool revealed,\\n            bool resolved\\n        )\\n    {\\n        AttackMeta storage m = attacks[id];\\n        require(m.resolved, \\\"NOT_RESOLVED\\\");\\n        uint256 shown = (m.success && !m.revealed)\\n            ? MASK_SENTINEL\\n            : m.attackerId;\\n        return (\\n            shown,\\n            m.defenderId,\\n            m.attackType,\\n            m.success,\\n            m.revealed,\\n            m.resolved\\n        );\\n    }\\n\\n    event VrfRetried(\\n        uint256 indexed attackId,\\n        uint256 indexed oldRequestId,\\n        uint256 indexed newRequestId\\n    );\\n    event VrfRequestCleared(\\n        uint256 indexed attackId,\\n        uint256 indexed requestId\\n    );\\n    event VrfStaleResponseIgnored(\\n        uint256 indexed attackId,\\n        uint256 indexed staleRequestId\\n    );\\n\\n    error RequestPending(uint256 attackId, uint256 retryAfter);\\n    error UnknownRequest(uint256 requestId);\\n\\n    mapping(uint256 => bool) public pendingRequests; // attackId \\u2192 in-flight?\\n    mapping(uint256 => uint256) public pendingRequestTimestamp; // attackId \\u2192 block.timestamp\\n    mapping(uint256 => uint256) public attackIdToRequestId; // attackId \\u2192 latest requestId     // requestId \\u2192 attackId\\n\\n    uint256 public constant RETRY_TIMEOUT = 5 minutes;\\n\\n    /* helper: test if retry window elapsed */\\n    function canRetry(uint256 _attackId) public view returns (bool) {\\n        if (!pendingRequests[_attackId]) return true;\\n        return\\n            block.timestamp >=\\n            pendingRequestTimestamp[_attackId] + RETRY_TIMEOUT;\\n    }\\n\\n    /* external retry entry -- make open or gated as you prefer */\\n    function retrySpyAttackVRF(uint256 _attackId) external onlyOwner {\\n\\n        require(\\n            pendingRequests[_attackId] && canRetry(_attackId),\\n            \\\"Retry not yet available\\\"\\n        );\\n        _issueVRFRequest(_attackId);\\n    }\\n\\n    function initiateSpyAttack(\\n        uint256 attackerId,\\n        uint256 defenderId,\\n        uint8 attackType\\n    ) external onlyGelatoRelayERC2771 returns (uint256 newAttackId) {\\n        require(\\n            attackType >= MIN_ATTACK_TYPE && attackType <= MAX_ATTACK_TYPE,\\n            \\\"attackType\\\"\\n        );\\n        require(attackerId != defenderId, \\\"SELF\\\");\\n        address user = _getMsgSender();\\n        require(mint.checkOwnership(attackerId, user), \\\"!owner\\\");\\n\\n        _registerSpyOp(attackerId, defenderId);\\n        require(_internalCheckSpyOperation(defenderId, attackType), \\\"!allowed\\\");\\n\\n        uint256 defenderStrength = strength.getNationStrength(defenderId);\\n        uint256 cost = _calculateSpyOpCost(attackType, defenderStrength);\\n        tsy.spendBalance(attackerId, cost);\\n\\n        pending[attackId] = PendingAttack({\\n            attackerId: attackerId,\\n            defenderId: defenderId,\\n            attackType: attackType,\\n            exists: true\\n        });\\n\\n        _issueVRFRequest(attackId);\\n\\n        emit SpyAttackCommitted(attackId, defenderId, attackType);\\n        newAttackId = attackId;\\n        attackId++;\\n    }\\n\\n    function _issueVRFRequest(uint256 _attackId) internal {\\n        if (\\n            pendingRequests[_attackId] &&\\n            block.timestamp < pendingRequestTimestamp[_attackId] + RETRY_TIMEOUT\\n        ) {\\n            revert RequestPending(\\n                _attackId,\\n                pendingRequestTimestamp[_attackId] + RETRY_TIMEOUT\\n            );\\n        }\\n\\n        uint256 oldReqId = attackIdToRequestId[_attackId];\\n        uint256 newReqId = _requestRandomness(); // below\\n\\n        vrfRequestToAttackId[newReqId] = _attackId;\\n        attackIdToRequestId[_attackId] = newReqId;\\n        pendingRequests[_attackId] = true;\\n        pendingRequestTimestamp[_attackId] = block.timestamp;\\n\\n        if (oldReqId != 0 && oldReqId != newReqId) {\\n            emit VrfRetried(_attackId, oldReqId, newReqId);\\n        } else {\\n            emit VrfRequested(_attackId, newReqId);\\n        }\\n    }\\n\\n    /* -------------------------- VRF Request Helper ---------------------------- */\\n\\n    function _requestRandomness() internal returns (uint256 reqId) {\\n        VRFV2PlusClient.RandomWordsRequest memory req = VRFV2PlusClient\\n            .RandomWordsRequest({\\n                keyHash: vrfKeyHash,\\n                subId: vrfSubId,\\n                requestConfirmations: vrfMinConfirmations,\\n                callbackGasLimit: vrfCallbackGasLimit,\\n                numWords: vrfNumWords,\\n                extraArgs: VRFV2PlusClient._argsToBytes(\\n                    VRFV2PlusClient.ExtraArgsV1({\\n                        nativePayment: useNativePayment\\n                    })\\n                )\\n            });\\n\\n        reqId = s_vrfCoordinator.requestRandomWords(req);\\n    }\\n\\n    /* -------------------------- VRF Fulfillment (v2.5) ------------------------ */\\n\\n    /**\\n     * @dev VRFConsumerBaseV2Plus internal override.\\n     * NOTE: randomWords length = vrfNumWords.\\n     */\\n    function fulfillRandomWords(\\n        uint256 requestId,\\n        uint256[] calldata randomWords\\n    ) internal override {\\n        uint256 _attackId = vrfRequestToAttackId[requestId];\\n\\n        /* reject totally unknown requests */\\n        if (\\n            vrfRequestToAttackId[requestId] == 0 &&\\n            requestId != attackIdToRequestId[0]\\n        ) revert UnknownRequest(requestId);\\n\\n        /* ignore stale fulfillments */\\n        if (\\n            attackIdToRequestId[_attackId] != requestId ||\\n            !pendingRequests[_attackId]\\n        ) {\\n            emit VrfStaleResponseIgnored(_attackId, requestId);\\n            return;\\n        }\\n\\n        uint256 id = vrfRequestToAttackId[requestId];\\n        require(pending[id].exists, \\\"no pending\\\");\\n\\n        PendingAttack memory p = pending[id];\\n        delete pending[id];\\n        delete vrfRequestToAttackId[requestId];\\n\\n        // Compute success\\n        uint256 atkScore = getAttackerSuccessScore(p.attackerId);\\n        uint256 defScore = getDefenseSuccessScore(p.defenderId);\\n        uint256 total = atkScore + defScore;\\n        bool success = false;\\n        if (total > 0) {\\n            success = (randomWords[0] % total) < atkScore;\\n        }\\n\\n        attacks[id] = AttackMeta({\\n            attackerId: p.attackerId,\\n            defenderId: p.defenderId,\\n            attackType: p.attackType,\\n            success: success,\\n            revealed: !success,\\n            resolved: true\\n        });\\n\\n        if (success) {\\n            uint256 effectRand = uint256(\\n                keccak256(\\n                    abi.encode(randomWords[0], id, p.attackerId, p.defenderId)\\n                )\\n            );\\n            _applySpyEffects(\\n                p.attackerId,\\n                p.defenderId,\\n                p.attackType,\\n                effectRand\\n            );\\n            emit SpyAttackResolvedPublic(\\n                id,\\n                MASK_SENTINEL,\\n                p.defenderId,\\n                true,\\n                p.attackType\\n            );\\n        } else {\\n            emit SpyAttackResolvedPublic(\\n                id,\\n                p.attackerId,\\n                p.defenderId,\\n                false,\\n                p.attackType\\n            );\\n        }\\n\\n        delete pendingRequests[_attackId];\\n        delete pendingRequestTimestamp[_attackId];\\n        delete attackIdToRequestId[_attackId];\\n        delete vrfRequestToAttackId[requestId];\\n\\n        emit VrfRequestCleared(_attackId, requestId);\\n    }\\n\\n    /* ------------------------------ Reveal Success ---------------------------- */\\n\\n    function revealAttack(uint256 id) external {\\n        AttackMeta storage m = attacks[id];\\n        require(m.resolved, \\\"!resolved\\\");\\n        require(m.success, \\\"only success\\\");\\n        require(!m.revealed, \\\"revealed\\\");\\n        require(\\n            mint.checkOwnership(m.attackerId, _getMsgSender()) ||\\n                msg.sender == owner(),\\n            \\\"!auth\\\"\\n        );\\n        m.revealed = true;\\n        emit SpyAttackRevealed(id, m.attackerId);\\n    }\\n\\n    /* ------------------------- Daily Cap Registration ------------------------- */\\n\\n    function _registerSpyOp(uint256 attackerId, uint256 defenderId) internal {\\n        uint256 day = keep.getGameDay();\\n\\n        DaySpies storage atk = _daySpyCount[day][attackerId];\\n        require(atk.outgoing < MAX_OUTGOING, \\\"atk cap\\\");\\n        atk.outgoing += 1;\\n\\n        DaySpies storage def = _daySpyCount[day][defenderId];\\n        require(def.incoming < MAX_INCOMING, \\\"def cap\\\");\\n        def.incoming += 1;\\n    }\\n\\n    /* ---------------------- Operation Allowance (internal) -------------------- */\\n\\n    function _internalCheckSpyOperation(\\n        uint256 defenderId,\\n        uint8 attackType\\n    ) internal view returns (bool) {\\n        uint256 infra = inf.getInfrastructureCount(defenderId);\\n        uint256 tech = inf.getTechnologyCount(defenderId);\\n        uint256 land = inf.getLandCount(defenderId);\\n\\n        if (attackType == 4) require(land >= 15, \\\"land<15\\\");\\n        if (attackType == 10) require(tech >= 15, \\\"tech<15\\\");\\n        if (attackType == 11) require(infra >= 15, \\\"infra<15\\\");\\n        if (attackType == 12) {\\n            uint256 nukeCount = mis.getNukeCount(defenderId);\\n            bool silo = won2.getHiddenNuclearMissileSilo(defenderId);\\n            if (silo) require(nukeCount >= 6, \\\"nukes<6\\\");\\n            else require(nukeCount >= 1, \\\"nukes<1\\\");\\n        }\\n        return true;\\n    }\\n\\n    /* --------------------------- Success Score Logic -------------------------- */\\n\\n    function getAttackerSuccessScore(\\n        uint256 countryId\\n    ) public view returns (uint256) {\\n        uint256 spyCount = spy.getSpyCount(countryId);\\n        uint256 techAmount = inf.getTechnologyCount(countryId);\\n        uint256 score = spyCount + (techAmount / 15);\\n        if (won1.getCentralIntelligenceAgency(countryId)) {\\n            score = (score * 110) / 100;\\n        }\\n        if (_accommodativeGov(countryId)) {\\n            score = (score * 110) / 100;\\n        }\\n        return score;\\n    }\\n\\n    function getDefenseSuccessScore(\\n        uint256 countryId\\n    ) public view returns (uint256) {\\n        uint256 spyCount = spy.getSpyCount(countryId);\\n        uint256 techAmount = inf.getTechnologyCount(countryId);\\n        uint256 landAmount = inf.getLandCount(countryId);\\n        uint256 threat = mil.getThreatLevel(countryId);\\n\\n        uint256 gross = spyCount + (techAmount / 20) + (landAmount / 70);\\n        if (threat == 1) return (gross * 75) / 100;\\n        if (threat == 2) return (gross * 90) / 100;\\n        if (threat == 3) return gross;\\n        if (threat == 4) return (gross * 110) / 100;\\n        if (threat == 4) return (gross * 125) / 100;\\n        return (gross * 125) / 100;\\n    }\\n\\n    function _accommodativeGov(uint256 id) internal view returns (bool) {\\n        uint256 g = params.getGovernmentType(id);\\n        return (g == 2 || g == 7 || g == 10);\\n    }\\n\\n    /* ------------------------------ Cost Function ----------------------------- */\\n\\n    function _calculateSpyOpCost(\\n        uint8 attackType,\\n        uint256 defenderStrength\\n    ) internal pure returns (uint256) {\\n        if (attackType == 1) return 100_000 + defenderStrength;\\n        if (attackType == 2) return 100_000 + defenderStrength * 2;\\n        if (attackType == 3) return 100_000 + defenderStrength * 3;\\n        if (attackType == 4) return 100_000 + defenderStrength * 3;\\n        if (attackType == 5) return 100_000 + defenderStrength * 3;\\n        if (attackType == 6) return 150_000 + defenderStrength;\\n        if (attackType == 7) return 150_000 + defenderStrength * 5;\\n        if (attackType == 8) return 250_000 + defenderStrength * 2;\\n        if (attackType == 9) return 300_000 + defenderStrength * 2;\\n        if (attackType == 10) return 100_000 + defenderStrength * 20;\\n        if (attackType == 11) return 500_000 + defenderStrength * 5;\\n        if (attackType == 12) return 500_000 + defenderStrength * 15;\\n        revert(\\\"attackType\\\");\\n    }\\n\\n    /* ------------------------------- Effect Engine ---------------------------- */\\n\\n    function _applySpyEffects(\\n        uint256 /*attackerId*/,\\n        uint256 defenderId,\\n        uint8 attackType,\\n        uint256 seed\\n    ) internal {\\n        if (attackType == 1) {\\n            _destroyCruiseMissiles(defenderId, seed);\\n        } else if (attackType == 2) {\\n            _destroyDefendingTanks(defenderId, seed);\\n        } else if (attackType == 3) {\\n            _captureLand(defenderId, seed);\\n        } else if (attackType == 4) {\\n            _changeDesiredGovernment(defenderId, seed);\\n        } else if (attackType == 5) {\\n            _changeDesiredReligion(defenderId, seed);\\n        } else if (attackType == 6) {\\n            mil.setThreatLevelFromSpyContract(defenderId, 1);\\n        } else if (attackType == 7) {\\n            mil.setDefconLevelFromSpyContract(defenderId, 5);\\n        } else if (attackType == 8) {\\n            _destroySpies(defenderId, seed);\\n        } else if (attackType == 9) {\\n            _captureTechnology(defenderId, seed);\\n        } else if (attackType == 10) {\\n            _sabotageTaxes(defenderId, seed);\\n        } else if (attackType == 11) {\\n            _captureInfrastructure(defenderId, seed);\\n        } else if (attackType == 12) {\\n            mis.decreaseNukeCountFromSpyContract(defenderId);\\n        }\\n    }\\n\\n    function _randSlice(\\n        uint256 seed,\\n        bytes32 tag,\\n        uint256 modBase\\n    ) private pure returns (uint256) {\\n        return uint256(keccak256(abi.encode(seed, tag))) % modBase;\\n    }\\n\\n    function _destroyCruiseMissiles(uint256 defenderId, uint256 seed) internal {\\n        uint256 amount = (_randSlice(seed, \\\"CRUISE\\\", 5) + 1); // 1..5\\n        mis.decreaseCruiseMissileCount(amount, defenderId);\\n    }\\n\\n    function _destroyDefendingTanks(uint256 defenderId, uint256 seed) internal {\\n        uint256 pct = (_randSlice(seed, \\\"TANKS\\\", 5) + 5); // 5..9%\\n        uint256 defending = force.getDefendingTankCount(defenderId);\\n        uint256 delta = (defending * pct) / 100;\\n        if (delta > 0) force.decreaseDefendingTankCount(delta, defenderId);\\n    }\\n\\n    function _captureLand(uint256 defenderId, uint256 seed) internal {\\n        uint256 amt = (_randSlice(seed, \\\"LAND\\\", 10) + 5); // 5..14\\n        inf.decreaseLandCountFromSpyContract(defenderId, amt);\\n    }\\n\\n    function _changeDesiredGovernment(\\n        uint256 defenderId,\\n        uint256 seed\\n    ) internal {\\n        uint256 current = params.getGovernmentPreference(defenderId);\\n        uint256 newPref = (_randSlice(seed, \\\"GOV\\\", 10) + 1); // 1..10\\n        if (newPref == current) {\\n            newPref = (current == 1) ? 2 : current - 1;\\n        }\\n        params.updateDesiredGovernment(defenderId, newPref);\\n    }\\n\\n    function _changeDesiredReligion(uint256 defenderId, uint256 seed) internal {\\n        uint256 current = params.getReligionPreference(defenderId);\\n        uint256 newPref = (_randSlice(seed, \\\"REL\\\", 14) + 1); // 1..14\\n        if (newPref == current) {\\n            newPref = (current == 1) ? 2 : current - 1;\\n        }\\n        params.updateDesiredReligion(defenderId, newPref);\\n    }\\n\\n    function _destroySpies(uint256 defenderId, uint256 seed) internal {\\n        uint256 spyCount = spy.getSpyCount(defenderId);\\n        uint256 toDestroy = (_randSlice(seed, \\\"SPY\\\", 20) + 1); // 1..20\\n        if (toDestroy > spyCount) toDestroy = spyCount;\\n        if (toDestroy > 0) spy.decreaseDefenderSpyCount(toDestroy, defenderId);\\n    }\\n\\n    function _captureTechnology(uint256 defenderId, uint256 seed) internal {\\n        uint256 amt = (_randSlice(seed, \\\"TECH\\\", 10) + 5); // 5..14\\n        inf.decreaseTechCountFromSpyContract(defenderId, amt);\\n    }\\n\\n    function _sabotageTaxes(uint256 defenderId, uint256 seed) internal {\\n        uint256 newRate = (_randSlice(seed, \\\"TAX\\\", 4) + 20); // 20..23\\n        inf.setTaxRateFromSpyContract(defenderId, newRate);\\n    }\\n\\n    function _captureInfrastructure(uint256 defenderId, uint256 seed) internal {\\n        uint256 amt = (_randSlice(seed, \\\"INFRA\\\", 10) + 5); // 5..14\\n        inf.decreaseInfrastructureCountFromSpyContract(defenderId, amt);\\n    }\\n}\\n\",\"keccak256\":\"0xf6e627338ab983299a02d979f530653f54f919d146e91e15dcc2b306528cccef\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c80638b56cf3811610104578063c52dd212116100a2578063e5b6521f11610071578063e5b6521f14610573578063ef97788b146105a3578063f2fde38b146105d3578063f42e1b59146105ef576101da565b8063c52dd212146104e8578063d22b068914610504578063d78b1d3914610522578063e1cbef4214610557576101da565b806394d66a39116100de57806394d66a391461044b5780639eccacf61461047b578063a544381514610499578063af6e6238146104b5576101da565b80638b56cf38146103f55780638da5cb5b146104115780638ea981171461042f576101da565b80633c652a9a1161017c5780635bb26c971161014b5780635bb26c971461037f578063692c098d146103af57806379ba5097146103cd5780638b460d71146103d7576101da565b80633c652a9a146102e35780634f878ded14610313578063576df493146103315780635aba37c41461034f576101da565b80631fe543e3116101b85780631fe543e31461026f578063334974661461028b57806334ed5f32146102a957806339de8f92146102c7576101da565b8063018518a8146101df57806302c57a961461020f5780630ee6998f1461023f575b600080fd5b6101f960048036038101906101f49190614315565b610624565b604051610206919061435d565b60405180910390f35b61022960048036038101906102249190614315565b610707565b6040516102369190614387565b60405180910390f35b61025960048036038101906102549190614315565b610aaa565b604051610266919061435d565b60405180910390f35b61028960048036038101906102849190614407565b610b06565b005b610293610bcc565b6040516102a09190614483565b60405180910390f35b6102b1610bd1565b6040516102be9190614483565b60405180910390f35b6102e160048036038101906102dc91906144fc565b610bd6565b005b6102fd60048036038101906102f89190614315565b610e74565b60405161030a919061435d565b60405180910390f35b61031b610e94565b6040516103289190614387565b60405180910390f35b610339610e99565b6040516103469190614387565b60405180910390f35b61036960048036038101906103649190614607565b610e9f565b6040516103769190614387565b60405180910390f35b61039960048036038101906103949190614315565b611302565b6040516103a69190614387565b60405180910390f35b6103b761131a565b6040516103c49190614483565b60405180910390f35b6103d561131f565b005b6103df6114b4565b6040516103ec9190614387565b60405180910390f35b61040f600480360381019061040a9190614772565b6114ba565b005b61041961159c565b604051610426919061480e565b60405180910390f35b61044960048036038101906104449190614829565b6115c5565b005b61046560048036038101906104609190614315565b6117a6565b6040516104729190614387565b60405180910390f35b6104836117be565b60405161049091906148b5565b60405180910390f35b6104b360048036038101906104ae91906148d0565b6117e4565b005b6104cf60048036038101906104ca9190614315565b611872565b6040516104df9493929190614910565b60405180910390f35b61050260048036038101906104fd9190614315565b6118bc565b005b61050c611b49565b6040516105199190614483565b60405180910390f35b61053c60048036038101906105379190614315565b611b4e565b60405161054e96959493929190614955565b60405180910390f35b610571600480360381019061056c9190614315565b611bbe565b005b61058d60048036038101906105889190614315565b611c43565b60405161059a9190614387565b60405180910390f35b6105bd60048036038101906105b89190614315565b611e92565b6040516105ca9190614387565b60405180910390f35b6105ed60048036038101906105e89190614829565b611eaa565b005b61060960048036038101906106049190614315565b611ebe565b60405161061b96959493929190614955565b60405180910390f35b600080601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634bf47c0b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610694573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b891906149cb565b905060006004600083815260200190815260200160002060008581526020019081526020016000209050600260ff168160000160019054906101000a900460ff1660ff16101592505050919050565b600080601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637f0df537846040518263ffffffff1660e01b81526004016107659190614387565b602060405180830381865afa158015610782573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a691906149cb565b90506000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663221a528f856040518263ffffffff1660e01b81526004016108059190614387565b602060405180830381865afa158015610822573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084691906149cb565b90506000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9266dde866040518263ffffffff1660e01b81526004016108a59190614387565b602060405180830381865afa1580156108c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e691906149cb565b90506000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663afeeef19876040518263ffffffff1660e01b81526004016109459190614387565b602060405180830381865afa158015610962573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098691906149cb565b905060006046836109979190614a56565b6014856109a49190614a56565b866109af9190614a87565b6109b99190614a87565b9050600182036109e8576064604b826109d29190614abb565b6109dc9190614a56565b95505050505050610aa5565b60028203610a15576064605a826109ff9190614abb565b610a099190614a56565b95505050505050610aa5565b60038203610a2a578095505050505050610aa5565b60048203610a57576064606e82610a419190614abb565b610a4b9190614a56565b95505050505050610aa5565b60048203610a84576064607d82610a6e9190614abb565b610a789190614a56565b95505050505050610aa5565b6064607d82610a939190614abb565b610a9d9190614a56565b955050505050505b919050565b60006017600083815260200190815260200160002060009054906101000a900460ff16610ada5760019050610b01565b61012c6018600084815260200190815260200160002054610afb9190614a87565b42101590505b919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610bbc5733600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610bb3929190614afd565b60405180910390fd5b610bc7838383611fd6565b505050565b600181565b600681565b610bde612534565b89600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555088600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084601060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080601160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050505050505050565b60176020528060005260406000206000915054906101000a900460ff1681565b600081565b61012c81565b6000610eaa336125c4565b610ee9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee090614b83565b60405180910390fd5b600160ff168260ff1610158015610f075750600c60ff168260ff1611155b610f46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3d90614bef565b60405180910390fd5b828403610f88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7f90614c5b565b60405180910390fd5b6000610f92612683565b9050601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166377ade19086836040518363ffffffff1660e01b8152600401610ff1929190614c7b565b602060405180830381865afa15801561100e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110329190614cb9565b611071576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106890614d32565b60405180910390fd5b61107b85856126a6565b61108584846128b8565b6110c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110bb90614d9e565b60405180910390fd5b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663299e5942866040518263ffffffff1660e01b81526004016111219190614387565b602060405180830381865afa15801561113e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116291906149cb565b905060006111708583612d78565b9050600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635ff38ff188836040518363ffffffff1660e01b81526004016111cf929190614dbe565b600060405180830381600087803b1580156111e957600080fd5b505af11580156111fd573d6000803e3d6000fd5b5050505060405180608001604052808881526020018781526020018660ff16815260200160011515815250600660006003548152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a81548160ff0219169083151502179055509050506112a0600354612fbf565b856003547f4f0b5a55cd2a88bbc7c42d3ee2d6d263bf3d3a63c40acf310d6a6c5341d5b3a8876040516112d39190614483565b60405180910390a36003549350600360008154809291906112f390614de7565b91905055505050509392505050565b60056020528060005260406000206000915090505481565b600c81565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146113af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113a690614e7b565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b60035481565b6114c2612534565b856014819055508467ffffffffffffffff1660158190555083601660006101000a81548161ffff021916908361ffff16021790555082601660026101000a81548163ffffffff021916908363ffffffff16021790555081601660066101000a81548163ffffffff021916908363ffffffff160217905550806016600a6101000a81548160ff0219169083151502179055507f3bb6ddbf26a0f80b74cfc94ed21a6d2ec325bd3c62721c2aad7e4c427f679b3886868686868660405161158c96959493929190614ed7565b60405180910390a1505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6115cd61159c565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141580156116565750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b156116c5573361166461159c565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040517f061db9c10000000000000000000000000000000000000000000000000000000081526004016116bc93929190614f38565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361172b576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fd1a6a14209a385a964d036e404cb5cfb71f4000cdb03c9366292430787261be68160405161179b919061480e565b60405180910390a150565b60196020528060005260406000206000915090505481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6117ec612534565b81601260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080601360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60066020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900460ff16908060020160019054906101000a900460ff16905084565b60006007600083815260200190815260200160002090508060020160039054906101000a900460ff16611924576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191b90614fbb565b60405180910390fd5b8060020160019054906101000a900460ff16611975576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161196c90615027565b60405180910390fd5b8060020160029054906101000a900460ff16156119c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119be90615093565b60405180910390fd5b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166377ade1908260000154611a12612683565b6040518363ffffffff1660e01b8152600401611a2f929190614c7b565b602060405180830381865afa158015611a4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a709190614cb9565b80611aad5750611a7e61159c565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b611aec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ae3906150ff565b60405180910390fd5b60018160020160026101000a81548160ff021916908315150217905550817f47f6f7f991c6aedda7a7ef9255cffa419474c6453ebbc281025ea2f9ebd8221d8260000154604051611b3d9190614387565b60405180910390a25050565b600281565b60076020528060005260406000206000915090508060000154908060010154908060020160009054906101000a900460ff16908060020160019054906101000a900460ff16908060020160029054906101000a900460ff16908060020160039054906101000a900460ff16905086565b611bc6612534565b6017600082815260200190815260200160002060009054906101000a900460ff168015611bf85750611bf781610aaa565b5b611c37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c2e9061516b565b60405180910390fd5b611c4081612fbf565b50565b600080601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637f0df537846040518263ffffffff1660e01b8152600401611ca19190614387565b602060405180830381865afa158015611cbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce291906149cb565b90506000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663221a528f856040518263ffffffff1660e01b8152600401611d419190614387565b602060405180830381865afa158015611d5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8291906149cb565b90506000600f82611d939190614a56565b83611d9e9190614a87565b9050600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663899638c1866040518263ffffffff1660e01b8152600401611dfb9190614387565b602060405180830381865afa158015611e18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3c9190614cb9565b15611e5d576064606e82611e509190614abb565b611e5a9190614a56565b90505b611e6685613185565b15611e87576064606e82611e7a9190614abb565b611e849190614a56565b90505b809350505050919050565b60186020528060005260406000206000915090505481565b611eb2612534565b611ebb81613248565b50565b60008060008060008060006007600089815260200190815260200160002090508060020160039054906101000a900460ff16611f2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f26906151d7565b60405180910390fd5b60008160020160019054906101000a900460ff168015611f5e57508160020160029054906101000a900460ff16155b611f6c578160000154611f6f565b60005b90508082600101548360020160009054906101000a900460ff168460020160019054906101000a900460ff168560020160029054906101000a900460ff168660020160039054906101000a900460ff16975097509750975097509750505091939550919395565b60006005600085815260200190815260200160002054905060006005600086815260200190815260200160002054148015612024575060196000808152602001908152602001600020548414155b1561206657836040517f1f79bbe700000000000000000000000000000000000000000000000000000000815260040161205d9190614387565b60405180910390fd5b8360196000838152602001908152602001600020541415806120a657506017600082815260200190815260200160002060009054906101000a900460ff16155b156120df5783817f892bc84d39dbbfa685101d004c2eebd8ce2e44b7af1ec01e722f1979ef04287d60405160405180910390a35061252f565b6000600560008681526020019081526020016000205490506006600082815260200190815260200160002060020160019054906101000a900460ff1661215a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161215190615243565b60405180910390fd5b60006006600083815260200190815260200160002060405180608001604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff1660ff1660ff1681526020016002820160019054906101000a900460ff16151515158152505090506006600083815260200190815260200160002060008082016000905560018201600090556002820160006101000a81549060ff02191690556002820160016101000a81549060ff021916905550506005600087815260200190815260200160002060009055600061223c8260000151611c43565b9050600061224d8360200151610707565b90506000818361225d9190614a87565b90506000808211156122945783828a8a600081811061227f5761227e615263565b5b905060200201356122909190615292565b1090505b6040518060c001604052808660000151815260200186602001518152602001866040015160ff16815260200182151581526020018215151581526020016001151581525060076000888152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a81548160ff02191690831515021790555060808201518160020160026101000a81548160ff02191690831515021790555060a08201518160020160036101000a81548160ff02191690831515021790555090505080156124455760008989600081811061239f5761239e615263565b5b9050602002013587876000015188602001516040516020016123c494939291906152c3565b6040516020818303038152906040528051906020012060001c90506123f786600001518760200151886040015184613374565b867fe6cb7e8ca08261a136f8acc013d4c66936c0117b410883cee06f21420e0dc7ef6000886020015160018a604001516040516124379493929190615339565b60405180910390a250612491565b857fe6cb7e8ca08261a136f8acc013d4c66936c0117b410883cee06f21420e0dc7ef86600001518760200151600089604001516040516124889493929190615339565b60405180910390a25b6017600088815260200190815260200160002060006101000a81549060ff021916905560186000888152602001908152602001600020600090556019600088815260200190815260200160002060009055600560008b81526020019081526020016000206000905589877ffbc1109d8af717011211ea2c5299f97bdf9383aac95a70236156096b18d412c360405160405180910390a3505050505050505b505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146125c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125b9906153ca565b60405180910390fd5b565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16148061266b57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b15612679576001905061267e565b600090505b919050565b600061268e336125c4565b61269857336126a1565b6126a0613648565b5b905090565b6000601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634bf47c0b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612715573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061273991906149cb565b905060006004600083815260200190815260200160002060008581526020019081526020016000209050600660ff168160000160009054906101000a900460ff1660ff16106127bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127b490615436565b60405180910390fd5b60018160000160008282829054906101000a900460ff166127de9190615456565b92506101000a81548160ff021916908360ff16021790555060006004600084815260200190815260200160002060008581526020019081526020016000209050600260ff168160000160019054906101000a900460ff1660ff1610612878576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161286f906154d7565b60405180910390fd5b60018160000160018282829054906101000a900460ff166128999190615456565b92506101000a81548160ff021916908360ff1602179055505050505050565b600080600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663897e9dd1856040518263ffffffff1660e01b81526004016129169190614387565b602060405180830381865afa158015612933573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061295791906149cb565b90506000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663221a528f866040518263ffffffff1660e01b81526004016129b69190614387565b602060405180830381865afa1580156129d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129f791906149cb565b90506000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9266dde876040518263ffffffff1660e01b8152600401612a569190614387565b602060405180830381865afa158015612a73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a9791906149cb565b905060048560ff1603612ae957600f811015612ae8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612adf90615543565b60405180910390fd5b5b600a8560ff1603612b3957600f821015612b38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b2f906155af565b60405180910390fd5b5b600b8560ff1603612b8957600f831015612b88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b7f9061561b565b60405180910390fd5b5b600c8560ff1603612d6b576000600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630d24094a886040518263ffffffff1660e01b8152600401612bf19190614387565b602060405180830381865afa158015612c0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c3291906149cb565b90506000601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630cccc2dd896040518263ffffffff1660e01b8152600401612c919190614387565b602060405180830381865afa158015612cae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cd29190614cb9565b90508015612d23576006821015612d1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d1590615687565b60405180910390fd5b612d68565b6001821015612d67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d5e906156f3565b60405180910390fd5b5b50505b6001935050505092915050565b600060018360ff1603612d9b5781620186a0612d949190614a87565b9050612fb9565b60028360ff1603612dc857600282612db39190614abb565b620186a0612dc19190614a87565b9050612fb9565b60038360ff1603612df557600382612de09190614abb565b620186a0612dee9190614a87565b9050612fb9565b60048360ff1603612e2257600382612e0d9190614abb565b620186a0612e1b9190614a87565b9050612fb9565b60058360ff1603612e4f57600382612e3a9190614abb565b620186a0612e489190614a87565b9050612fb9565b60068360ff1603612e705781620249f0612e699190614a87565b9050612fb9565b60078360ff1603612e9d57600582612e889190614abb565b620249f0612e969190614a87565b9050612fb9565b60088360ff1603612eca57600282612eb59190614abb565b6203d090612ec39190614a87565b9050612fb9565b60098360ff1603612ef757600282612ee29190614abb565b620493e0612ef09190614a87565b9050612fb9565b600a8360ff1603612f2457601482612f0f9190614abb565b620186a0612f1d9190614a87565b9050612fb9565b600b8360ff1603612f5157600582612f3c9190614abb565b6207a120612f4a9190614a87565b9050612fb9565b600c8360ff1603612f7e57600f82612f699190614abb565b6207a120612f779190614a87565b9050612fb9565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fb090614bef565b60405180910390fd5b92915050565b6017600082815260200190815260200160002060009054906101000a900460ff16801561300b575061012c60186000838152602001908152602001600020546130089190614a87565b42105b1561306f578061012c60186000848152602001908152602001600020546130329190614a87565b6040517f08a0fb9e000000000000000000000000000000000000000000000000000000008152600401613066929190614dbe565b60405180910390fd5b6000601960008381526020019081526020016000205490506000613091613657565b905082600560008381526020019081526020016000208190555080601960008581526020019081526020016000208190555060016017600085815260200190815260200160002060006101000a81548160ff021916908315150217905550426018600085815260200190815260200160002081905550600082141580156131185750808214155b15613151578082847f3836c1459c1ac0e57aea1dd7adddc10f4f4965288f73f7ae4a2397b6b4c2555a60405160405180910390a4613180565b80837f6bb6d9629c0d789662101058a2c5a7e71fbcae2a88dbf122d96bafca3e57b32a60405160405180910390a35b505050565b600080600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663131dbbe9846040518263ffffffff1660e01b81526004016131e39190614387565b602060405180830381865afa158015613200573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061322491906149cb565b905060028114806132355750600781145b806132405750600a81145b915050919050565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036132b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132ad9061575f565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b60018260ff160361338e57613389838261379c565b613642565b60028260ff16036133a8576133a3838261386c565b613641565b60038260ff16036133c2576133bd8382613a04565b613640565b60048260ff16036133dc576133d78382613ad4565b61363f565b60058260ff16036133f6576133f18382613c6c565b61363e565b60068260ff160361349657600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663393b9c118460016040518363ffffffff1660e01b815260040161345f9291906157ba565b600060405180830381600087803b15801561347957600080fd5b505af115801561348d573d6000803e3d6000fd5b5050505061363d565b60078260ff160361353657600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634f259d918460056040518363ffffffff1660e01b81526004016134ff92919061581e565b600060405180830381600087803b15801561351957600080fd5b505af115801561352d573d6000803e3d6000fd5b5050505061363c565b60088260ff16036135505761354b8382613e04565b61363b565b60098260ff160361356a576135658382613f8b565b61363a565b600a8260ff16036135845761357f838261405b565b613639565b600b8260ff160361359e57613599838261412b565b613638565b600c8260ff160361363757600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166317164212846040518263ffffffff1660e01b81526004016136049190614387565b600060405180830381600087803b15801561361e57600080fd5b505af1158015613632573d6000803e3d6000fd5b505050505b5b5b5b5b5b5b5b5b5b5b5b50505050565b6000601436033560601c905090565b6000806040518060c0016040528060145481526020016015548152602001601660009054906101000a900461ffff1661ffff168152602001601660029054906101000a900463ffffffff1663ffffffff168152602001601660069054906101000a900463ffffffff1663ffffffff1681526020016136f360405180602001604052806016600a9054906101000a900460ff1615158152506141fb565b8152509050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639b1c385e826040518263ffffffff1660e01b8152600401613753919061599c565b6020604051808303816000875af1158015613772573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061379691906149cb565b91505090565b600060016137cc837f43525549534500000000000000000000000000000000000000000000000000006005614293565b6137d69190614a87565b9050600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d6849bf682856040518363ffffffff1660e01b8152600401613835929190614dbe565b600060405180830381600087803b15801561384f57600080fd5b505af1158015613863573d6000803e3d6000fd5b50505050505050565b6000600561389c837f54414e4b530000000000000000000000000000000000000000000000000000006005614293565b6138a69190614a87565b90506000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166314d67456856040518263ffffffff1660e01b81526004016139059190614387565b602060405180830381865afa158015613922573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061394691906149cb565b90506000606483836139589190614abb565b6139629190614a56565b905060008111156139fd57600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639ff5c44782876040518363ffffffff1660e01b81526004016139ca929190614dbe565b600060405180830381600087803b1580156139e457600080fd5b505af11580156139f8573d6000803e3d6000fd5b505050505b5050505050565b60006005613a34837f4c414e4400000000000000000000000000000000000000000000000000000000600a614293565b613a3e9190614a87565b9050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166355be628484836040518363ffffffff1660e01b8152600401613a9d929190614dbe565b600060405180830381600087803b158015613ab757600080fd5b505af1158015613acb573d6000803e3d6000fd5b50505050505050565b6000600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663db76dd66846040518263ffffffff1660e01b8152600401613b319190614387565b602060405180830381865afa158015613b4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b7291906149cb565b905060006001613ba4847f474f560000000000000000000000000000000000000000000000000000000000600a614293565b613bae9190614a87565b9050818103613bd75760018214613bd157600182613bcc91906159be565b613bd4565b60025b90505b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a528538985836040518363ffffffff1660e01b8152600401613c34929190614dbe565b600060405180830381600087803b158015613c4e57600080fd5b505af1158015613c62573d6000803e3d6000fd5b5050505050505050565b6000600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663eefed831846040518263ffffffff1660e01b8152600401613cc99190614387565b602060405180830381865afa158015613ce6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d0a91906149cb565b905060006001613d3c847f52454c0000000000000000000000000000000000000000000000000000000000600e614293565b613d469190614a87565b9050818103613d6f5760018214613d6957600182613d6491906159be565b613d6c565b60025b90505b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cfadac7085836040518363ffffffff1660e01b8152600401613dcc929190614dbe565b600060405180830381600087803b158015613de657600080fd5b505af1158015613dfa573d6000803e3d6000fd5b5050505050505050565b6000601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637f0df537846040518263ffffffff1660e01b8152600401613e619190614387565b602060405180830381865afa158015613e7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ea291906149cb565b905060006001613ed4847f53505900000000000000000000000000000000000000000000000000000000006014614293565b613ede9190614a87565b905081811115613eec578190505b6000811115613f8557601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637838b8d682866040518363ffffffff1660e01b8152600401613f52929190614dbe565b600060405180830381600087803b158015613f6c57600080fd5b505af1158015613f80573d6000803e3d6000fd5b505050505b50505050565b60006005613fbb837f5445434800000000000000000000000000000000000000000000000000000000600a614293565b613fc59190614a87565b9050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166311c65d8184836040518363ffffffff1660e01b8152600401614024929190614dbe565b600060405180830381600087803b15801561403e57600080fd5b505af1158015614052573d6000803e3d6000fd5b50505050505050565b6000601461408b837f54415800000000000000000000000000000000000000000000000000000000006004614293565b6140959190614a87565b9050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ae1dbc1d84836040518363ffffffff1660e01b81526004016140f4929190614dbe565b600060405180830381600087803b15801561410e57600080fd5b505af1158015614122573d6000803e3d6000fd5b50505050505050565b6000600561415b837f494e465241000000000000000000000000000000000000000000000000000000600a614293565b6141659190614a87565b9050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634d0421b184836040518363ffffffff1660e01b81526004016141c4929190614dbe565b600060405180830381600087803b1580156141de57600080fd5b505af11580156141f2573d6000803e3d6000fd5b50505050505050565b60607f92fd13387c7fe7befbc38d303d6468778fb9731bc4583f17d92989c6fcfdeaaa8260405160240161422f9190615a1d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050919050565b60008184846040516020016142a9929190615a38565b6040516020818303038152906040528051906020012060001c6142cc9190615292565b90509392505050565b600080fd5b600080fd5b6000819050919050565b6142f2816142df565b81146142fd57600080fd5b50565b60008135905061430f816142e9565b92915050565b60006020828403121561432b5761432a6142d5565b5b600061433984828501614300565b91505092915050565b60008115159050919050565b61435781614342565b82525050565b6000602082019050614372600083018461434e565b92915050565b614381816142df565b82525050565b600060208201905061439c6000830184614378565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126143c7576143c66143a2565b5b8235905067ffffffffffffffff8111156143e4576143e36143a7565b5b602083019150836020820283011115614400576143ff6143ac565b5b9250929050565b6000806000604084860312156144205761441f6142d5565b5b600061442e86828701614300565b935050602084013567ffffffffffffffff81111561444f5761444e6142da565b5b61445b868287016143b1565b92509250509250925092565b600060ff82169050919050565b61447d81614467565b82525050565b60006020820190506144986000830184614474565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006144c98261449e565b9050919050565b6144d9816144be565b81146144e457600080fd5b50565b6000813590506144f6816144d0565b92915050565b6000806000806000806000806000806101408b8d0312156145205761451f6142d5565b5b600061452e8d828e016144e7565b9a5050602061453f8d828e016144e7565b99505060406145508d828e016144e7565b98505060606145618d828e016144e7565b97505060806145728d828e016144e7565b96505060a06145838d828e016144e7565b95505060c06145948d828e016144e7565b94505060e06145a58d828e016144e7565b9350506101006145b78d828e016144e7565b9250506101206145c98d828e016144e7565b9150509295989b9194979a5092959850565b6145e481614467565b81146145ef57600080fd5b50565b600081359050614601816145db565b92915050565b6000806000606084860312156146205761461f6142d5565b5b600061462e86828701614300565b935050602061463f86828701614300565b9250506040614650868287016145f2565b9150509250925092565b6000819050919050565b61466d8161465a565b811461467857600080fd5b50565b60008135905061468a81614664565b92915050565b600067ffffffffffffffff82169050919050565b6146ad81614690565b81146146b857600080fd5b50565b6000813590506146ca816146a4565b92915050565b600061ffff82169050919050565b6146e7816146d0565b81146146f257600080fd5b50565b600081359050614704816146de565b92915050565b600063ffffffff82169050919050565b6147238161470a565b811461472e57600080fd5b50565b6000813590506147408161471a565b92915050565b61474f81614342565b811461475a57600080fd5b50565b60008135905061476c81614746565b92915050565b60008060008060008060c0878903121561478f5761478e6142d5565b5b600061479d89828a0161467b565b96505060206147ae89828a016146bb565b95505060406147bf89828a016146f5565b94505060606147d089828a01614731565b93505060806147e189828a01614731565b92505060a06147f289828a0161475d565b9150509295509295509295565b614808816144be565b82525050565b600060208201905061482360008301846147ff565b92915050565b60006020828403121561483f5761483e6142d5565b5b600061484d848285016144e7565b91505092915050565b6000819050919050565b600061487b6148766148718461449e565b614856565b61449e565b9050919050565b600061488d82614860565b9050919050565b600061489f82614882565b9050919050565b6148af81614894565b82525050565b60006020820190506148ca60008301846148a6565b92915050565b600080604083850312156148e7576148e66142d5565b5b60006148f5858286016144e7565b9250506020614906858286016144e7565b9150509250929050565b60006080820190506149256000830187614378565b6149326020830186614378565b61493f6040830185614474565b61494c606083018461434e565b95945050505050565b600060c08201905061496a6000830189614378565b6149776020830188614378565b6149846040830187614474565b614991606083018661434e565b61499e608083018561434e565b6149ab60a083018461434e565b979650505050505050565b6000815190506149c5816142e9565b92915050565b6000602082840312156149e1576149e06142d5565b5b60006149ef848285016149b6565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614a61826142df565b9150614a6c836142df565b925082614a7c57614a7b6149f8565b5b828204905092915050565b6000614a92826142df565b9150614a9d836142df565b9250828201905080821115614ab557614ab4614a27565b5b92915050565b6000614ac6826142df565b9150614ad1836142df565b9250828202614adf816142df565b91508282048414831517614af657614af5614a27565b5b5092915050565b6000604082019050614b1260008301856147ff565b614b1f60208301846147ff565b9392505050565b600082825260208201905092915050565b7f6f6e6c7947656c61746f52656c61794552433237373100000000000000000000600082015250565b6000614b6d601683614b26565b9150614b7882614b37565b602082019050919050565b60006020820190508181036000830152614b9c81614b60565b9050919050565b7f61747461636b5479706500000000000000000000000000000000000000000000600082015250565b6000614bd9600a83614b26565b9150614be482614ba3565b602082019050919050565b60006020820190508181036000830152614c0881614bcc565b9050919050565b7f53454c4600000000000000000000000000000000000000000000000000000000600082015250565b6000614c45600483614b26565b9150614c5082614c0f565b602082019050919050565b60006020820190508181036000830152614c7481614c38565b9050919050565b6000604082019050614c906000830185614378565b614c9d60208301846147ff565b9392505050565b600081519050614cb381614746565b92915050565b600060208284031215614ccf57614cce6142d5565b5b6000614cdd84828501614ca4565b91505092915050565b7f216f776e65720000000000000000000000000000000000000000000000000000600082015250565b6000614d1c600683614b26565b9150614d2782614ce6565b602082019050919050565b60006020820190508181036000830152614d4b81614d0f565b9050919050565b7f21616c6c6f776564000000000000000000000000000000000000000000000000600082015250565b6000614d88600883614b26565b9150614d9382614d52565b602082019050919050565b60006020820190508181036000830152614db781614d7b565b9050919050565b6000604082019050614dd36000830185614378565b614de06020830184614378565b9392505050565b6000614df2826142df565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614e2457614e23614a27565b5b600182019050919050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b6000614e65601683614b26565b9150614e7082614e2f565b602082019050919050565b60006020820190508181036000830152614e9481614e58565b9050919050565b614ea48161465a565b82525050565b614eb381614690565b82525050565b614ec2816146d0565b82525050565b614ed18161470a565b82525050565b600060c082019050614eec6000830189614e9b565b614ef96020830188614eaa565b614f066040830187614eb9565b614f136060830186614ec8565b614f206080830185614ec8565b614f2d60a083018461434e565b979650505050505050565b6000606082019050614f4d60008301866147ff565b614f5a60208301856147ff565b614f6760408301846147ff565b949350505050565b7f217265736f6c7665640000000000000000000000000000000000000000000000600082015250565b6000614fa5600983614b26565b9150614fb082614f6f565b602082019050919050565b60006020820190508181036000830152614fd481614f98565b9050919050565b7f6f6e6c7920737563636573730000000000000000000000000000000000000000600082015250565b6000615011600c83614b26565b915061501c82614fdb565b602082019050919050565b6000602082019050818103600083015261504081615004565b9050919050565b7f72657665616c6564000000000000000000000000000000000000000000000000600082015250565b600061507d600883614b26565b915061508882615047565b602082019050919050565b600060208201905081810360008301526150ac81615070565b9050919050565b7f2161757468000000000000000000000000000000000000000000000000000000600082015250565b60006150e9600583614b26565b91506150f4826150b3565b602082019050919050565b60006020820190508181036000830152615118816150dc565b9050919050565b7f5265747279206e6f742079657420617661696c61626c65000000000000000000600082015250565b6000615155601783614b26565b91506151608261511f565b602082019050919050565b6000602082019050818103600083015261518481615148565b9050919050565b7f4e4f545f5245534f4c5645440000000000000000000000000000000000000000600082015250565b60006151c1600c83614b26565b91506151cc8261518b565b602082019050919050565b600060208201905081810360008301526151f0816151b4565b9050919050565b7f6e6f2070656e64696e6700000000000000000000000000000000000000000000600082015250565b600061522d600a83614b26565b9150615238826151f7565b602082019050919050565b6000602082019050818103600083015261525c81615220565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061529d826142df565b91506152a8836142df565b9250826152b8576152b76149f8565b5b828206905092915050565b60006080820190506152d86000830187614378565b6152e56020830186614378565b6152f26040830185614378565b6152ff6060830184614378565b95945050505050565b600061532361531e61531984614467565b614856565b6142df565b9050919050565b61533381615308565b82525050565b600060808201905061534e6000830187614378565b61535b6020830186614378565b615368604083018561434e565b615375606083018461532a565b95945050505050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b60006153b4601683614b26565b91506153bf8261537e565b602082019050919050565b600060208201905081810360008301526153e3816153a7565b9050919050565b7f61746b2063617000000000000000000000000000000000000000000000000000600082015250565b6000615420600783614b26565b915061542b826153ea565b602082019050919050565b6000602082019050818103600083015261544f81615413565b9050919050565b600061546182614467565b915061546c83614467565b9250828201905060ff81111561548557615484614a27565b5b92915050565b7f6465662063617000000000000000000000000000000000000000000000000000600082015250565b60006154c1600783614b26565b91506154cc8261548b565b602082019050919050565b600060208201905081810360008301526154f0816154b4565b9050919050565b7f6c616e643c313500000000000000000000000000000000000000000000000000600082015250565b600061552d600783614b26565b9150615538826154f7565b602082019050919050565b6000602082019050818103600083015261555c81615520565b9050919050565b7f746563683c313500000000000000000000000000000000000000000000000000600082015250565b6000615599600783614b26565b91506155a482615563565b602082019050919050565b600060208201905081810360008301526155c88161558c565b9050919050565b7f696e6672613c3135000000000000000000000000000000000000000000000000600082015250565b6000615605600883614b26565b9150615610826155cf565b602082019050919050565b60006020820190508181036000830152615634816155f8565b9050919050565b7f6e756b65733c3600000000000000000000000000000000000000000000000000600082015250565b6000615671600783614b26565b915061567c8261563b565b602082019050919050565b600060208201905081810360008301526156a081615664565b9050919050565b7f6e756b65733c3100000000000000000000000000000000000000000000000000600082015250565b60006156dd600783614b26565b91506156e8826156a7565b602082019050919050565b6000602082019050818103600083015261570c816156d0565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b6000615749601783614b26565b915061575482615713565b602082019050919050565b600060208201905081810360008301526157788161573c565b9050919050565b6000819050919050565b60006157a461579f61579a8461577f565b614856565b6142df565b9050919050565b6157b481615789565b82525050565b60006040820190506157cf6000830185614378565b6157dc60208301846157ab565b9392505050565b6000819050919050565b60006158086158036157fe846157e3565b614856565b6142df565b9050919050565b615818816157ed565b82525050565b60006040820190506158336000830185614378565b615840602083018461580f565b9392505050565b6158508161465a565b82525050565b61585f816142df565b82525050565b61586e816146d0565b82525050565b61587d8161470a565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156158bd5780820151818401526020810190506158a2565b60008484015250505050565b6000601f19601f8301169050919050565b60006158e582615883565b6158ef818561588e565b93506158ff81856020860161589f565b615908816158c9565b840191505092915050565b600060c08301600083015161592b6000860182615847565b50602083015161593e6020860182615856565b5060408301516159516040860182615865565b5060608301516159646060860182615874565b5060808301516159776080860182615874565b5060a083015184820360a086015261598f82826158da565b9150508091505092915050565b600060208201905081810360008301526159b68184615913565b905092915050565b60006159c9826142df565b91506159d4836142df565b92508282039050818111156159ec576159eb614a27565b5b92915050565b6159fb81614342565b82525050565b602082016000820151615a1760008501826159f2565b50505050565b6000602082019050615a326000830184615a01565b92915050565b6000604082019050615a4d6000830185614378565b615a5a6020830184614e9b565b939250505056fea2646970667358221220f30bd421565078568e99e4a939b9379faddf7b27d7bed6ff83fd2104a4db659a64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "setCoordinator(address)": {
        "notice": "Sets the VRF Coordinator addressThis method should only be callable by the coordinator or contract owner"
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 29,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "s_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 31,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 231,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "s_vrfCoordinator",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IVRFCoordinatorV2Plus)380"
      },
      {
        "astId": 61521,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "attackId",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 61528,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "_daySpyCount",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(DaySpies)61482_storage))"
      },
      {
        "astId": 61532,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "vrfRequestToAttackId",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 61537,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "pending",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(PendingAttack)61491_storage)"
      },
      {
        "astId": 61542,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "attacks",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(AttackMeta)61504_storage)"
      },
      {
        "astId": 61545,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "inf",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IInfrastructure)61295"
      },
      {
        "astId": 61548,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "force",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IForces)61310"
      },
      {
        "astId": 61551,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "mil",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IMilitary)61332"
      },
      {
        "astId": 61554,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "strength",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(INationStrength)61340"
      },
      {
        "astId": 61557,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "tsy",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(ITreasury)61348"
      },
      {
        "astId": 61560,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "params",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(ICountryParameters)61384"
      },
      {
        "astId": 61563,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "mis",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(IMissiles)61445"
      },
      {
        "astId": 61566,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "won1",
        "offset": 0,
        "slot": "15",
        "type": "t_contract(IWonders1)61392"
      },
      {
        "astId": 61569,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "won2",
        "offset": 0,
        "slot": "16",
        "type": "t_contract(IWonders2)61400"
      },
      {
        "astId": 61572,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "mint",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(ICountryMinter)61410"
      },
      {
        "astId": 61575,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "keep",
        "offset": 0,
        "slot": "18",
        "type": "t_contract(IKeeper)61451"
      },
      {
        "astId": 61578,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "spy",
        "offset": 0,
        "slot": "19",
        "type": "t_contract(ISpies)61425"
      },
      {
        "astId": 61580,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "vrfKeyHash",
        "offset": 0,
        "slot": "20",
        "type": "t_bytes32"
      },
      {
        "astId": 61582,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "vrfSubId",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 61585,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "vrfMinConfirmations",
        "offset": 0,
        "slot": "22",
        "type": "t_uint16"
      },
      {
        "astId": 61587,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "vrfCallbackGasLimit",
        "offset": 2,
        "slot": "22",
        "type": "t_uint32"
      },
      {
        "astId": 61590,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "vrfNumWords",
        "offset": 6,
        "slot": "22",
        "type": "t_uint32"
      },
      {
        "astId": 61593,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "useNativePayment",
        "offset": 10,
        "slot": "22",
        "type": "t_bool"
      },
      {
        "astId": 61950,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "pendingRequests",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 61954,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "pendingRequestTimestamp",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 61958,
        "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
        "label": "attackIdToRequestId",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICountryMinter)61410": {
        "encoding": "inplace",
        "label": "contract ICountryMinter",
        "numberOfBytes": "20"
      },
      "t_contract(ICountryParameters)61384": {
        "encoding": "inplace",
        "label": "contract ICountryParameters",
        "numberOfBytes": "20"
      },
      "t_contract(IForces)61310": {
        "encoding": "inplace",
        "label": "contract IForces",
        "numberOfBytes": "20"
      },
      "t_contract(IInfrastructure)61295": {
        "encoding": "inplace",
        "label": "contract IInfrastructure",
        "numberOfBytes": "20"
      },
      "t_contract(IKeeper)61451": {
        "encoding": "inplace",
        "label": "contract IKeeper",
        "numberOfBytes": "20"
      },
      "t_contract(IMilitary)61332": {
        "encoding": "inplace",
        "label": "contract IMilitary",
        "numberOfBytes": "20"
      },
      "t_contract(IMissiles)61445": {
        "encoding": "inplace",
        "label": "contract IMissiles",
        "numberOfBytes": "20"
      },
      "t_contract(INationStrength)61340": {
        "encoding": "inplace",
        "label": "contract INationStrength",
        "numberOfBytes": "20"
      },
      "t_contract(ISpies)61425": {
        "encoding": "inplace",
        "label": "contract ISpies",
        "numberOfBytes": "20"
      },
      "t_contract(ITreasury)61348": {
        "encoding": "inplace",
        "label": "contract ITreasury",
        "numberOfBytes": "20"
      },
      "t_contract(IVRFCoordinatorV2Plus)380": {
        "encoding": "inplace",
        "label": "contract IVRFCoordinatorV2Plus",
        "numberOfBytes": "20"
      },
      "t_contract(IWonders1)61392": {
        "encoding": "inplace",
        "label": "contract IWonders1",
        "numberOfBytes": "20"
      },
      "t_contract(IWonders2)61400": {
        "encoding": "inplace",
        "label": "contract IWonders2",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(DaySpies)61482_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct SpyOperationsContract.DaySpies))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(DaySpies)61482_storage)"
      },
      "t_mapping(t_uint256,t_struct(AttackMeta)61504_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SpyOperationsContract.AttackMeta)",
        "numberOfBytes": "32",
        "value": "t_struct(AttackMeta)61504_storage"
      },
      "t_mapping(t_uint256,t_struct(DaySpies)61482_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SpyOperationsContract.DaySpies)",
        "numberOfBytes": "32",
        "value": "t_struct(DaySpies)61482_storage"
      },
      "t_mapping(t_uint256,t_struct(PendingAttack)61491_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SpyOperationsContract.PendingAttack)",
        "numberOfBytes": "32",
        "value": "t_struct(PendingAttack)61491_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AttackMeta)61504_storage": {
        "encoding": "inplace",
        "label": "struct SpyOperationsContract.AttackMeta",
        "members": [
          {
            "astId": 61493,
            "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
            "label": "attackerId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 61495,
            "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
            "label": "defenderId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 61497,
            "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
            "label": "attackType",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 61499,
            "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
            "label": "success",
            "offset": 1,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 61501,
            "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
            "label": "revealed",
            "offset": 2,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 61503,
            "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
            "label": "resolved",
            "offset": 3,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(DaySpies)61482_storage": {
        "encoding": "inplace",
        "label": "struct SpyOperationsContract.DaySpies",
        "members": [
          {
            "astId": 61479,
            "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
            "label": "outgoing",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 61481,
            "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
            "label": "incoming",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PendingAttack)61491_storage": {
        "encoding": "inplace",
        "label": "struct SpyOperationsContract.PendingAttack",
        "members": [
          {
            "astId": 61484,
            "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
            "label": "attackerId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 61486,
            "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
            "label": "defenderId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 61488,
            "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
            "label": "attackType",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 61490,
            "contract": "contracts/SpyOperations.sol:SpyOperationsContract",
            "label": "exists",
            "offset": 1,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}