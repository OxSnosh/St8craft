{
  "address": "0xc3e53F4d16Ae77Db1c982e75a937B9f60FE63690",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_updateInterval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gameDay",
          "type": "uint256"
        }
      ],
      "name": "GameDayIncremented",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gameDay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGameDay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "incrementGameDay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keeperRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_interval",
          "type": "uint256"
        }
      ],
      "name": "updateInterval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeperRegistry",
          "type": "address"
        }
      ],
      "name": "updateKeeperRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1a2d91549e5a49e389c736593fafcc707cd0068093d98ea77d8c16496cf4fcf1",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xc3e53F4d16Ae77Db1c982e75a937B9f60FE63690",
    "transactionIndex": 0,
    "gasUsed": "776874",
    "logsBloom": "0x
    "blockHash": "0xef3f9a06a61057d1d9164cb3b27d5b9a277a5b150d094592ecf43819c9f422ff",
    "transactionHash": "0x1a2d91549e5a49e389c736593fafcc707cd0068093d98ea77d8c16496cf4fcf1",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 32,
        "transactionHash": "0x1a2d91549e5a49e389c736593fafcc707cd0068093d98ea77d8c16496cf4fcf1",
        "address": "0xc3e53F4d16Ae77Db1c982e75a937B9f60FE63690",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xef3f9a06a61057d1d9164cb3b27d5b9a277a5b150d094592ecf43819c9f422ff"
      }
    ],
    "blockNumber": 32,
    "cumulativeGasUsed": "776874",
    "status": 1,
    "byzantium": true
  },
  "args": [
    86400
  ],
  "numDeployments": 1,
  "solcInputHash": "83567e297eb1ee7869baf0f79cdb2de0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_updateInterval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gameDay\",\"type\":\"uint256\"}],\"name\":\"GameDayIncremented\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGameDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incrementGameDay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeperRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"}],\"name\":\"updateInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeperRegistry\",\"type\":\"address\"}],\"name\":\"updateKeeperRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"OxSnosh\",\"details\":\"this contract will allow the chainlink keeper to maintain the game clock that increments daily\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"KeeperContract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/KeeperFile.sol\":\"KeeperContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/KeeperFile.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\n// import \\\"./Nuke.sol\\\";\\n// import \\\"./Aid.sol\\\";\\n// import \\\"./War.sol\\\";\\n// import \\\"./Treasury.sol\\\";\\n// import \\\"./Forces.sol\\\";\\n// import \\\"./Navy.sol\\\";\\n// import \\\"./CountryParameters.sol\\\";\\n// import \\\"./Military.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\n///@title KeeperContract\\n///@author OxSnosh\\n///@dev this contract will allow the chainlink keeper to maintain the game clock that increments daily\\ncontract KeeperContract is Ownable, KeeperCompatibleInterface {\\n    uint256 public gameDay;\\n    uint public interval;\\n    uint public lastTimeStamp;\\n    address public keeperRegistry;\\n\\n    event GameDayIncremented(uint256 indexed gameDay);\\n\\n    constructor(uint _updateInterval) {\\n        interval = _updateInterval;\\n        lastTimeStamp = block.timestamp;\\n        gameDay = 0;\\n    }\\n\\n    function checkUpkeep(\\n        bytes calldata /* checkData */\\n    )\\n        external\\n        view\\n        override\\n        returns (bool upkeepNeeded, bytes memory /* performData */)\\n    {\\n        upkeepNeeded = (block.timestamp - lastTimeStamp) >= interval;\\n        return (upkeepNeeded, \\\"\\\");\\n    }\\n\\n    function performUpkeep(bytes calldata /* performData */) external override {\\n        if ((block.timestamp - lastTimeStamp) > interval) {\\n            lastTimeStamp = lastTimeStamp + interval;\\n            gameDay++;\\n            emit GameDayIncremented(gameDay);\\n        } else {\\n            revert(\\\"Not enough time has passed for upkeep\\\");\\n        }\\n    }\\n\\n    function incrementGameDay() public onlyOwner {\\n        gameDay++;\\n        lastTimeStamp = block.timestamp;\\n        emit GameDayIncremented(gameDay);\\n    }\\n\\n    function updateKeeperRegistry(address _keeperRegistry) public onlyOwner {\\n        keeperRegistry = _keeperRegistry;\\n    }\\n\\n    function updateInterval(uint _interval) public onlyOwner {\\n        interval = _interval;\\n    }\\n\\n    function getGameDay() public view returns (uint256) {\\n        return gameDay;\\n    }\\n}\\n\",\"keccak256\":\"0x9ed1ad2b82efcc8369b7a8a93f6778c4c4d6aad22aee7a2cf6ff9059be926236\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610d68380380610d6883398181016040528101906100329190610171565b61004e61004361006a60201b60201c565b61007260201b60201c565b806002819055504260038190555060006001819055505061019e565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b6000819050919050565b61014e8161013b565b811461015957600080fd5b50565b60008151905061016b81610145565b92915050565b60006020828403121561018757610186610136565b5b60006101958482850161015c565b91505092915050565b610bbb806101ad6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806383e227741161008c578063b0bf017511610066578063b0bf0175146101df578063d0f07926146101e9578063e573d4ec14610205578063f2fde38b14610221576100cf565b806383e22774146101855780638da5cb5b146101a3578063947a36fb146101c1576100cf565b806332cac735146100d45780633f3b3b27146100f25780634585e33b146101105780634bf47c0b1461012c5780636e04ff0d1461014a578063715018a61461017b575b600080fd5b6100dc61023d565b6040516100e99190610645565b60405180910390f35b6100fa610243565b6040516101079190610645565b60405180910390f35b61012a600480360381019061012591906106cf565b610249565b005b610134610301565b6040516101419190610645565b60405180910390f35b610164600480360381019061015f91906106cf565b61030b565b6040516101729291906107c7565b60405180910390f35b610183610340565b005b61018d610354565b60405161019a9190610838565b60405180910390f35b6101ab61037a565b6040516101b89190610838565b60405180910390f35b6101c96103a3565b6040516101d69190610645565b60405180910390f35b6101e76103a9565b005b61020360048036038101906101fe919061087f565b610401565b005b61021f600480360381019061021a91906108d8565b610413565b005b61023b600480360381019061023691906108d8565b61045f565b005b60015481565b60035481565b6002546003544261025a9190610934565b11156102c2576002546003546102709190610968565b600381905550600160008154809291906102899061099c565b91905055506001547f43f7bffe5b6f9993e37b802f6118ac19ff9d88c22a6d1a3bb840ddd53ae73a8f60405160405180910390a26102fd565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f490610a67565b60405180910390fd5b5050565b6000600154905090565b60006060600254600354426103209190610934565b101591508160405180602001604052806000815250915091509250929050565b6103486104e2565b6103526000610560565b565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60025481565b6103b16104e2565b600160008154809291906103c49061099c565b9190505550426003819055506001547f43f7bffe5b6f9993e37b802f6118ac19ff9d88c22a6d1a3bb840ddd53ae73a8f60405160405180910390a2565b6104096104e2565b8060028190555050565b61041b6104e2565b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6104676104e2565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036104d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104cd90610af9565b60405180910390fd5b6104df81610560565b50565b6104ea610624565b73ffffffffffffffffffffffffffffffffffffffff1661050861037a565b73ffffffffffffffffffffffffffffffffffffffff161461055e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055590610b65565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000819050919050565b61063f8161062c565b82525050565b600060208201905061065a6000830184610636565b92915050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261068f5761068e61066a565b5b8235905067ffffffffffffffff8111156106ac576106ab61066f565b5b6020830191508360018202830111156106c8576106c7610674565b5b9250929050565b600080602083850312156106e6576106e5610660565b5b600083013567ffffffffffffffff81111561070457610703610665565b5b61071085828601610679565b92509250509250929050565b60008115159050919050565b6107318161071c565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610771578082015181840152602081019050610756565b60008484015250505050565b6000601f19601f8301169050919050565b600061079982610737565b6107a38185610742565b93506107b3818560208601610753565b6107bc8161077d565b840191505092915050565b60006040820190506107dc6000830185610728565b81810360208301526107ee818461078e565b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610822826107f7565b9050919050565b61083281610817565b82525050565b600060208201905061084d6000830184610829565b92915050565b61085c8161062c565b811461086757600080fd5b50565b60008135905061087981610853565b92915050565b60006020828403121561089557610894610660565b5b60006108a38482850161086a565b91505092915050565b6108b581610817565b81146108c057600080fd5b50565b6000813590506108d2816108ac565b92915050565b6000602082840312156108ee576108ed610660565b5b60006108fc848285016108c3565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061093f8261062c565b915061094a8361062c565b925082820390508181111561096257610961610905565b5b92915050565b60006109738261062c565b915061097e8361062c565b925082820190508082111561099657610995610905565b5b92915050565b60006109a78261062c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036109d9576109d8610905565b5b600182019050919050565b600082825260208201905092915050565b7f4e6f7420656e6f7567682074696d65206861732070617373656420666f72207560008201527f706b656570000000000000000000000000000000000000000000000000000000602082015250565b6000610a516025836109e4565b9150610a5c826109f5565b604082019050919050565b60006020820190508181036000830152610a8081610a44565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610ae36026836109e4565b9150610aee82610a87565b604082019050919050565b60006020820190508181036000830152610b1281610ad6565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610b4f6020836109e4565b9150610b5a82610b19565b602082019050919050565b60006020820190508181036000830152610b7e81610b42565b905091905056fea264697066735822122088f59b0da38973721736fbb7a94dbb6a554085e9283280e0e77f555b05a68c7764736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c806383e227741161008c578063b0bf017511610066578063b0bf0175146101df578063d0f07926146101e9578063e573d4ec14610205578063f2fde38b14610221576100cf565b806383e22774146101855780638da5cb5b146101a3578063947a36fb146101c1576100cf565b806332cac735146100d45780633f3b3b27146100f25780634585e33b146101105780634bf47c0b1461012c5780636e04ff0d1461014a578063715018a61461017b575b600080fd5b6100dc61023d565b6040516100e99190610645565b60405180910390f35b6100fa610243565b6040516101079190610645565b60405180910390f35b61012a600480360381019061012591906106cf565b610249565b005b610134610301565b6040516101419190610645565b60405180910390f35b610164600480360381019061015f91906106cf565b61030b565b6040516101729291906107c7565b60405180910390f35b610183610340565b005b61018d610354565b60405161019a9190610838565b60405180910390f35b6101ab61037a565b6040516101b89190610838565b60405180910390f35b6101c96103a3565b6040516101d69190610645565b60405180910390f35b6101e76103a9565b005b61020360048036038101906101fe919061087f565b610401565b005b61021f600480360381019061021a91906108d8565b610413565b005b61023b600480360381019061023691906108d8565b61045f565b005b60015481565b60035481565b6002546003544261025a9190610934565b11156102c2576002546003546102709190610968565b600381905550600160008154809291906102899061099c565b91905055506001547f43f7bffe5b6f9993e37b802f6118ac19ff9d88c22a6d1a3bb840ddd53ae73a8f60405160405180910390a26102fd565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f490610a67565b60405180910390fd5b5050565b6000600154905090565b60006060600254600354426103209190610934565b101591508160405180602001604052806000815250915091509250929050565b6103486104e2565b6103526000610560565b565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60025481565b6103b16104e2565b600160008154809291906103c49061099c565b9190505550426003819055506001547f43f7bffe5b6f9993e37b802f6118ac19ff9d88c22a6d1a3bb840ddd53ae73a8f60405160405180910390a2565b6104096104e2565b8060028190555050565b61041b6104e2565b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6104676104e2565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036104d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104cd90610af9565b60405180910390fd5b6104df81610560565b50565b6104ea610624565b73ffffffffffffffffffffffffffffffffffffffff1661050861037a565b73ffffffffffffffffffffffffffffffffffffffff161461055e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055590610b65565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000819050919050565b61063f8161062c565b82525050565b600060208201905061065a6000830184610636565b92915050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261068f5761068e61066a565b5b8235905067ffffffffffffffff8111156106ac576106ab61066f565b5b6020830191508360018202830111156106c8576106c7610674565b5b9250929050565b600080602083850312156106e6576106e5610660565b5b600083013567ffffffffffffffff81111561070457610703610665565b5b61071085828601610679565b92509250509250929050565b60008115159050919050565b6107318161071c565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610771578082015181840152602081019050610756565b60008484015250505050565b6000601f19601f8301169050919050565b600061079982610737565b6107a38185610742565b93506107b3818560208601610753565b6107bc8161077d565b840191505092915050565b60006040820190506107dc6000830185610728565b81810360208301526107ee818461078e565b90509392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610822826107f7565b9050919050565b61083281610817565b82525050565b600060208201905061084d6000830184610829565b92915050565b61085c8161062c565b811461086757600080fd5b50565b60008135905061087981610853565b92915050565b60006020828403121561089557610894610660565b5b60006108a38482850161086a565b91505092915050565b6108b581610817565b81146108c057600080fd5b50565b6000813590506108d2816108ac565b92915050565b6000602082840312156108ee576108ed610660565b5b60006108fc848285016108c3565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061093f8261062c565b915061094a8361062c565b925082820390508181111561096257610961610905565b5b92915050565b60006109738261062c565b915061097e8361062c565b925082820190508082111561099657610995610905565b5b92915050565b60006109a78261062c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036109d9576109d8610905565b5b600182019050919050565b600082825260208201905092915050565b7f4e6f7420656e6f7567682074696d65206861732070617373656420666f72207560008201527f706b656570000000000000000000000000000000000000000000000000000000602082015250565b6000610a516025836109e4565b9150610a5c826109f5565b604082019050919050565b60006020820190508181036000830152610a8081610a44565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610ae36026836109e4565b9150610aee82610a87565b604082019050919050565b60006020820190508181036000830152610b1281610ad6565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610b4f6020836109e4565b9150610b5a82610b19565b602082019050919050565b60006020820190508181036000830152610b7e81610b42565b905091905056fea264697066735822122088f59b0da38973721736fbb7a94dbb6a554085e9283280e0e77f555b05a68c7764736f6c63430008110033",
  "devdoc": {
    "author": "OxSnosh",
    "details": "this contract will allow the chainlink keeper to maintain the game clock that increments daily",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "KeeperContract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2356,
        "contract": "contracts/KeeperFile.sol:KeeperContract",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 39946,
        "contract": "contracts/KeeperFile.sol:KeeperContract",
        "label": "gameDay",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 39948,
        "contract": "contracts/KeeperFile.sol:KeeperContract",
        "label": "interval",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 39950,
        "contract": "contracts/KeeperFile.sol:KeeperContract",
        "label": "lastTimeStamp",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 39952,
        "contract": "contracts/KeeperFile.sol:KeeperContract",
        "label": "keeperRegistry",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}