{
  "address": "0x851356ae760d987E095750cCeb3bC6014560891C",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BattleshipDecommissioned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "purchasePrice",
          "type": "uint256"
        }
      ],
      "name": "BattleshipPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CorvetteDecommissioned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "purchasePrice",
          "type": "uint256"
        }
      ],
      "name": "CorvettePurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CruiserDecommissioned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "purchasePrice",
          "type": "uint256"
        }
      ],
      "name": "CruiserPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LandingShipDecommissioned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "purchasePrice",
          "type": "uint256"
        }
      ],
      "name": "LandingShipPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "defenderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "corvetteCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "landingShip",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cruiserCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "frigateCount",
          "type": "uint256"
        }
      ],
      "name": "NukeDamageToNavy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "additionalNavy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "battleshipCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "battleshipRequiredInfrastructure",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "battleshipRequiredTechnology",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bonusResources",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "buyBattleship",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "buyCorvette",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "buyCruiser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "buyLandingShip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "corvetteCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "corvetteRequiredInfrastructure",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "corvetteRequiredTechnology",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "countryMinter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cruiserCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cruiserRequiredInfrastructure",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cruiserRequiredTechnology",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "decommissionBattleship",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "decommissionCorvette",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "decommissionCruiser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "decommissionLandingShip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "defenderId",
          "type": "uint256"
        }
      ],
      "name": "decreaseNavyFromNukeContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nationId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shipType",
          "type": "uint256"
        }
      ],
      "name": "decreaseShipCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "generateNavy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getBattleshipCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getCorvetteCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getCruiserCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getLandingShipCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getNavyVesselCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "idToNavy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "initialized",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "corvetteCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "landingShipCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "battleshipCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cruiserCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "improvements4",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "improvementsContract1Address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "improvementsContract3Address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "infrastructure",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "landingShipCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "landingShipRequiredInfrastructure",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "landingShipRequiredTechnology",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "military",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "navalActions",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "navy2Contract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "navyBattleAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nukes",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resources",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasuryAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_improvementsContract1Address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_improvementsContract3Address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_improvements4",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_resources",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_military",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nukes",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wonders1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_navalActions",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_additionalNavy",
          "type": "address"
        }
      ],
      "name": "settings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_countryMinter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bonusResources",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_navy2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_infrastructure",
          "type": "address"
        }
      ],
      "name": "settings2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newRequiredInf",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newRequiredTech",
          "type": "uint256"
        }
      ],
      "name": "updateBattleshipSpecs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newRequiredInf",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newRequiredTech",
          "type": "uint256"
        }
      ],
      "name": "updateCorvetteSpecs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newRequiredInf",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newRequiredTech",
          "type": "uint256"
        }
      ],
      "name": "updateCruiserSpecs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newRequiredInf",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newRequiredTech",
          "type": "uint256"
        }
      ],
      "name": "updateLandingShipSpecs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wonders1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa3ad167c7c55f281f478a3ab7395f035f54d5630a2dbc0b86babb6bb2e3f2844",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x851356ae760d987E095750cCeb3bC6014560891C",
    "transactionIndex": 0,
    "gasUsed": "5234201",
    "logsBloom": "0x
    "blockHash": "0x364a8a1a5cff6bdfb8ca2a04c42132904a8a156431d656bc3b89ef6ea2b055c8",
    "transactionHash": "0xa3ad167c7c55f281f478a3ab7395f035f54d5630a2dbc0b86babb6bb2e3f2844",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 37,
        "transactionHash": "0xa3ad167c7c55f281f478a3ab7395f035f54d5630a2dbc0b86babb6bb2e3f2844",
        "address": "0x851356ae760d987E095750cCeb3bC6014560891C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x364a8a1a5cff6bdfb8ca2a04c42132904a8a156431d656bc3b89ef6ea2b055c8"
      }
    ],
    "blockNumber": 37,
    "cumulativeGasUsed": "5234201",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7a293bd061535f7a34152263d80fb349",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BattleshipDecommissioned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"purchasePrice\",\"type\":\"uint256\"}],\"name\":\"BattleshipPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CorvetteDecommissioned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"purchasePrice\",\"type\":\"uint256\"}],\"name\":\"CorvettePurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CruiserDecommissioned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"purchasePrice\",\"type\":\"uint256\"}],\"name\":\"CruiserPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LandingShipDecommissioned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"purchasePrice\",\"type\":\"uint256\"}],\"name\":\"LandingShipPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"defenderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"corvetteCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"landingShip\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cruiserCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"frigateCount\",\"type\":\"uint256\"}],\"name\":\"NukeDamageToNavy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"additionalNavy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"battleshipCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"battleshipRequiredInfrastructure\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"battleshipRequiredTechnology\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bonusResources\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"buyBattleship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"buyCorvette\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"buyCruiser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"buyLandingShip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"corvetteCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"corvetteRequiredInfrastructure\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"corvetteRequiredTechnology\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countryMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cruiserCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cruiserRequiredInfrastructure\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cruiserRequiredTechnology\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"decommissionBattleship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"decommissionCorvette\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"decommissionCruiser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"decommissionLandingShip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"defenderId\",\"type\":\"uint256\"}],\"name\":\"decreaseNavyFromNukeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nationId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shipType\",\"type\":\"uint256\"}],\"name\":\"decreaseShipCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"generateNavy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getBattleshipCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getCorvetteCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getCruiserCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getLandingShipCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getNavyVesselCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToNavy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"corvetteCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"landingShipCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"battleshipCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cruiserCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"improvements4\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"improvementsContract1Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"improvementsContract3Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"infrastructure\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"landingShipCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"landingShipRequiredInfrastructure\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"landingShipRequiredTechnology\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"military\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"navalActions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"navy2Contract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"navyBattleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nukes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resources\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_improvementsContract1Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_improvementsContract3Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_improvements4\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_resources\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_military\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nukes\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wonders1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_navalActions\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_additionalNavy\",\"type\":\"address\"}],\"name\":\"settings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_countryMinter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bonusResources\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_navy2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_infrastructure\",\"type\":\"address\"}],\"name\":\"settings2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newRequiredInf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newRequiredTech\",\"type\":\"uint256\"}],\"name\":\"updateBattleshipSpecs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newRequiredInf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newRequiredTech\",\"type\":\"uint256\"}],\"name\":\"updateCorvetteSpecs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newRequiredInf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newRequiredTech\",\"type\":\"uint256\"}],\"name\":\"updateCruiserSpecs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newRequiredInf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newRequiredTech\",\"type\":\"uint256\"}],\"name\":\"updateLandingShipSpecs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wonders1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"OxSnosh\",\"details\":\"this contract inherits from openzeppelin's ownable contract\",\"kind\":\"dev\",\"methods\":{\"buyBattleship(uint256,uint256)\":{\"details\":\"this is a public function callable only by the nation ownerthis function will allow a nation owner to purchase a battleship vessel\",\"params\":{\"amount\":\"this is the number of battleship being purchased\",\"id\":\"this is the naton id of the nation purchasing vessels\"}},\"buyCorvette(uint256,uint256)\":{\"details\":\"this is a public function callable only by the nation ownerthis function will allow a nation owner to purchase a corvette vessel\",\"params\":{\"amount\":\"this is the number of corvettes being purchased\",\"id\":\"this is the naton id of the nation purchasing vessels\"}},\"buyCruiser(uint256,uint256)\":{\"details\":\"this is a public function callable only by the nation ownerthis function will allow a nation owner to purchase a cruiser vessel\",\"params\":{\"amount\":\"this is the number of cruisers being purchased\",\"id\":\"this is the naton id of the nation purchasing vessels\"}},\"buyLandingShip(uint256,uint256)\":{\"details\":\"this is a public function callable only by the nation ownerthis function will allow a nation owner to purchase a landing ships vessel\",\"params\":{\"amount\":\"this is the number of landing ships being purchased\",\"id\":\"this is the naton id of the nation purchasing vessels\"}},\"decreaseNavyFromNukeContract(uint256)\":{\"details\":\"this is a public function only callable from the nuke contractthis function will decrease the amount of ships that are vulnerable to nuclear attacks when a nation is attacked by a nuke strike\",\"params\":{\"defenderId\":\"this is the nation id of the nation being attacked\"}},\"generateNavy(uint256)\":{\"details\":\"this is a public function only callable from the countryMinter contractthis function will allow a nation owner to buy navy vessels\",\"params\":{\"id\":\"this is the nation id of the nation being minted\"}},\"getBattleshipCount(uint256)\":{\"details\":\"this is a public view function that will return the number of battleships a nation ownsthis function wll return the number of battleships a nation owns\",\"params\":{\"id\":\"this is the nation id of the nation being queried\"},\"returns\":{\"_0\":\"uint256 this is the number of battleships for a given nation\"}},\"getCorvetteCount(uint256)\":{\"details\":\"this is a public view function that will return the number of corvettes a nation ownsthis function wll return the number of corvettes a nation owns\",\"params\":{\"id\":\"this is the nation id of the nation being queried\"},\"returns\":{\"_0\":\"uint256 this is the number of corvettes for a given nation\"}},\"getCruiserCount(uint256)\":{\"details\":\"this is a public view function that will return the number of cruisers a nation ownsthis function wll return the number of cruisers a nation owns\",\"params\":{\"id\":\"this is the nation id of the nation being queried\"},\"returns\":{\"_0\":\"uint256 this is the number of cruisers for a given nation\"}},\"getLandingShipCount(uint256)\":{\"details\":\"this is a public view function that will return the number of landing ships a nation ownsthis function wll return the number of landing ships a nation owns\",\"params\":{\"id\":\"this is the nation id of the nation being queried\"},\"returns\":{\"_0\":\"uint256 this is the number of landing ships for a given nation\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"settings(address,address,address,address,address,address,address,address,address,address)\":{\"details\":\"this function is only callable by the contract ownerthis function will be called immediately after contract deployment in order to set contract pointers\"},\"settings2(address,address,address,address)\":{\"details\":\"this function is only callable by the contract ownerthis function will be called immediately after contract deployment in order to set contract pointers\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateBattleshipSpecs(uint256,uint256,uint256)\":{\"details\":\"this function is only callable by the contract owner\"},\"updateCorvetteSpecs(uint256,uint256,uint256)\":{\"details\":\"this function is only callable by the contract owner\"},\"updateCruiserSpecs(uint256,uint256,uint256)\":{\"details\":\"this function is only callable by the contract owner\"},\"updateLandingShipSpecs(uint256,uint256,uint256)\":{\"details\":\"this function is only callable by the contract owner\"}},\"title\":\"NavyContract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"buyBattleship(uint256,uint256)\":{\"notice\":\"this function will allow a nation owner to purchase a battleship vessel\"},\"buyCorvette(uint256,uint256)\":{\"notice\":\"this function will allow a nation owner to purchase a corvette vessel\"},\"buyCruiser(uint256,uint256)\":{\"notice\":\"this function will allow a nation owner to purchase a cruiser vessel\"},\"buyLandingShip(uint256,uint256)\":{\"notice\":\"this function will allow a nation owner to purchase a landing ships vessel\"},\"decreaseNavyFromNukeContract(uint256)\":{\"notice\":\"this function will decrease the amount of ships that are vulnerable to nuclear attacks when a nation is attacked by a nuke strikevessels available to nuke strikes are corvettes, landing ships, cruisers and frigatesa nuke strike will reduce the number of these ships by 25% (12% with a fallout shelter system)\"},\"generateNavy(uint256)\":{\"notice\":\"this function will allow a nation owner to buy navy vessels\"},\"getBattleshipCount(uint256)\":{\"notice\":\"this functon will return the number of battleships a nation owns\"},\"getCorvetteCount(uint256)\":{\"notice\":\"this functon will return the number of corvettes a nation owns\"},\"getCruiserCount(uint256)\":{\"notice\":\"this functon will return the number of cruisers a nation owns\"},\"getLandingShipCount(uint256)\":{\"notice\":\"this functon will return the number of landing ships a nation owns\"}},\"notice\":\"this contract will allow a user to purchase navy vessels\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Navy.sol\":\"NavyContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/Aid.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"./Infrastructure.sol\\\";\\nimport \\\"./Forces.sol\\\";\\nimport \\\"./Treasury.sol\\\";\\nimport \\\"./Wonders.sol\\\";\\nimport \\\"./CountryMinter.sol\\\";\\nimport \\\"./KeeperFile.sol\\\";\\nimport \\\"./Senate.sol\\\";\\nimport \\\"./CountryParameters.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/// @title AidContract this contract facilitates aid being sent between nations\\n/// @author OxSnosh\\ncontract AidContract is Ownable, ReentrancyGuard {\\n    address public countryMinter;\\n    address public treasury;\\n    address public forces;\\n    address public keeper;\\n    address public infrastructure;\\n    address public wonder1;\\n    address public senate;\\n    address public countryParameters;\\n    uint256 public aidProposalId;\\n    uint256 public proposalExpirationDays = 7;\\n\\n    CountryMinter mint;\\n    WondersContract1 won1;\\n    KeeperContract keep;\\n    SenateContract sen;\\n    CountryParametersContract param;\\n\\n    /// @dev this function is callable by the owner only\\n    /// @dev this function will be called after deployment to initiate contract pointers within this contract\\n    function settings(\\n        address _countryMinter,\\n        address _treasury,\\n        address _forces,\\n        address _infrastructure,\\n        address _keeper,\\n        address _wonder1,\\n        address _senate,\\n        address _countryParameters\\n    ) public onlyOwner {\\n        countryMinter = _countryMinter;\\n        mint = CountryMinter(_countryMinter);\\n        treasury = _treasury;\\n        forces = _forces;\\n        infrastructure = _infrastructure;\\n        keeper = _keeper;\\n        keep = KeeperContract(_keeper);\\n        wonder1 = _wonder1;\\n        won1 = WondersContract1(_wonder1);\\n        senate = _senate;\\n        sen = SenateContract(_senate);\\n        countryParameters = _countryParameters;\\n        param = CountryParametersContract(_countryParameters);\\n    }\\n\\n    struct Proposal {\\n        uint256 proposalId;\\n        uint256 dayProposed;\\n        uint256 idSender;\\n        uint256 idRecipient;\\n        uint256 techAid;\\n        uint256 balanceAid;\\n        uint256 soldierAid;\\n        bool accepted;\\n        bool cancelled;\\n    }\\n\\n    event AidProposed(\\n        uint256 indexed proposalId,\\n        uint256 indexed idSender,\\n        uint256 indexed idRecipient,\\n        uint256 dayProposed,\\n        uint256 techAid,\\n        uint256 balanceAid,\\n        uint256 soldierAid\\n    );\\n\\n    event AidAccepted(\\n        uint256 indexed proposalId,\\n        uint256 indexed idSender,\\n        uint256 indexed idRecipient,\\n        uint256 techAid,\\n        uint256 balanceAid,\\n        uint256 soldierAid\\n    );\\n\\n    event ProposalCancelled(\\n        uint256 indexed proposalId,\\n        uint256 indexed idSender,\\n        uint256 indexed idRecipient\\n    );\\n\\n    mapping(uint256 => Proposal) public idToProposal;\\n    mapping(uint256 => uint256[]) public idToAidProposalsSent;\\n    mapping(uint256 => uint256[]) public idToAidProposalsReceived;\\n    mapping(uint256 => mapping(uint256 => uint256[]))\\n        public idToAidProposalsLast10Days;\\n\\n    /// @dev this is the function a nations owner will call to initiate an aid proposal\\n    /// @param idSender is the country ID of the aid sender (caller of the function)\\n    /// @param idRecipient is the country ID of the aid recipient\\n    /// @param techAid is the amount of Technology being sent in the proposal\\n    /// @param balanceAid is the amount of balance being sent in the proposal\\n    /// @param soldiersAid is the amount of troops beind sent in the proposal\\n    /// @notice the max aid is 100 Tech, 6,000,000 balance and 4,000 soldiers without a Federal Aid Commission\\n    /// @notice the max aid is 150 Tech, 9,000,000 balance and 6,000 soldiers with a Federal Aid Commission\\n    function proposeAid(\\n        uint256 idSender,\\n        uint256 idRecipient,\\n        uint256 techAid,\\n        uint256 balanceAid,\\n        uint256 soldiersAid\\n    ) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(idSender, msg.sender);\\n        require(isOwner, \\\"!nation ruler\\\");\\n        bool availableAidSlot = checkAidSlots(idSender);\\n        require(availableAidSlot, \\\"aid slot not available\\\");\\n        bool availableAidSlotRecipient = checkAidSlots(idRecipient);\\n        require(availableAidSlotRecipient, \\\"recipient aid slot not available\\\");\\n        uint256 day = keep.getGameDay();\\n        idToAidProposalsLast10Days[idSender][day].push(aidProposalId);\\n        idToAidProposalsLast10Days[idRecipient][day].push(aidProposalId);\\n        bool aidAvailable = checkAvailability(\\n            idSender,\\n            techAid,\\n            balanceAid,\\n            soldiersAid\\n        );\\n        require(aidAvailable, \\\"aid not available\\\");\\n        bool sanctioned = sen.isSanctioned(idSender, idRecipient);\\n        require(!sanctioned, \\\"trade not possible\\\");\\n        bool federalAidEligible = getFederalAidEligibility(\\n            idSender,\\n            idRecipient\\n        );\\n        uint256[3] memory maximums;\\n        if (!federalAidEligible) {\\n            maximums = [\\n                uint256(100),\\n                uint256(6000000 * (10 ** 18)),\\n                uint256(4000)\\n            ];\\n        }\\n        if (federalAidEligible) {\\n            maximums = [\\n                uint256(150),\\n                uint256(9000000 * (10 ** 18)),\\n                uint256(6000)\\n            ];\\n        }\\n        require(techAid <= maximums[0], \\\"max tech exceeded\\\");\\n        require(balanceAid <= maximums[1], \\\"max balance exceeded\\\");\\n        require(soldiersAid <= maximums[2], \\\"max soldier aid is exceeded\\\");\\n        completeProposal(\\n            aidProposalId,\\n            day,\\n            idSender,\\n            idRecipient,\\n            techAid,\\n            balanceAid,\\n            soldiersAid\\n        );\\n    }\\n\\n    function completeProposal(\\n        uint256 proposalId,\\n        uint256 day,\\n        uint256 idSender,\\n        uint256 idRecipient,\\n        uint256 techAid,\\n        uint256 balanceAid,\\n        uint256 soldiersAid\\n    ) internal {\\n        Proposal memory newProposal = Proposal(\\n            proposalId,\\n            day,\\n            idSender,\\n            idRecipient,\\n            techAid,\\n            balanceAid,\\n            soldiersAid,\\n            false,\\n            false\\n        );\\n        idToProposal[proposalId] = newProposal;\\n        idToAidProposalsSent[idSender].push(proposalId);\\n        idToAidProposalsReceived[idRecipient].push(proposalId);\\n        emit AidProposed(\\n            proposalId,\\n            idSender,\\n            idRecipient,\\n            day,\\n            techAid,\\n            balanceAid,\\n            soldiersAid\\n        );\\n        aidProposalId++;\\n    }\\n\\n    ///@dev this function is public but called by the proposeAid() function to check the availabiliy of proposing aid\\n    ///@notice nations can only send one aid proposal per day without a Disaster Relief Agency\\n    ///@notice nations can send 2 aid proposals per day with a disaster relief agency\\n    ///@param idSender id the nation ID of the nation proposing aid\\n    ///@return bool returns a boolean value if there is an aid slot available for the propposal\\n    function checkAidSlots(uint256 idSender) public view returns (bool) {\\n        uint256 maxAidSlots = getMaxAidSlots(idSender);\\n        uint256 aidProposalsLast10Days = getAidProposalsLast10Days(idSender);\\n        if ((aidProposalsLast10Days + 1) <= maxAidSlots) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    ///@dev this function is public but also callable from the proposeAid() function\\n    ///@notice this function checks max aid slots per day for a nation\\n    ///@notice max aid slots allow you to propose 10 aid packages every 10 days (13 with a disaster relief agency)\\n    ///@param id id the nation ID of the nation proposing aid\\n    ///@return uint256 defaults to 1 aid slot per day and 2 with a disaster relief agency\\n    function getMaxAidSlots(uint256 id) public view returns (uint256) {\\n        uint256 maxAidSlotsPer10Days = 10;\\n        bool disasterReliefAgency = won1.getDisasterReliefAgency(id);\\n        if (disasterReliefAgency) {\\n            maxAidSlotsPer10Days += 3;\\n        }\\n        return (maxAidSlotsPer10Days);\\n    }\\n\\n    function getAidProposalsLast10Days(\\n        uint256 id\\n    ) public view returns (uint256) {\\n        uint256 day = keep.getGameDay();\\n        uint256 proposalsLast10Days = 0;\\n        uint256 daysToCheck;\\n        if (day >= 10) {\\n            daysToCheck = 10;\\n        } else {\\n            daysToCheck = day;\\n        }\\n        for (uint256 i = 0; i < daysToCheck; i++) {\\n            uint256 dayToCheck = day - i;\\n            proposalsLast10Days += idToAidProposalsLast10Days[id][dayToCheck]\\n                .length;\\n            uint256[] memory proposalsForThatDay = idToAidProposalsLast10Days[\\n                id\\n            ][dayToCheck];\\n            for (uint256 j = 0; j < proposalsForThatDay.length; j++) {\\n                uint256 proposalId = proposalsForThatDay[j];\\n                bool cancelled = idToProposal[proposalId].cancelled;\\n                if (cancelled) {\\n                    proposalsLast10Days -= 1;\\n                }\\n            }\\n        }\\n        return proposalsLast10Days;\\n    }\\n\\n    ///@dev this function is public but also callable by the proposeAid() and acceptProposal() function\\n    ///@notice this function checks that the aid proposed is less than the available aid of the sender nation\\n    ///@param idSender is the nation ID of the nations proposing aid\\n    ///@param techAid is the amount of Tech in the aid proposal\\n    ///@param balanceAid is the amount of Balance in the aid proposal\\n    ///@param soldiersAid is the amount of soldiers in the aid proposal\\n    ///@return bool true if the sender has enough of each aid parameter to send\\n    function checkAvailability(\\n        uint256 idSender,\\n        uint256 techAid,\\n        uint256 balanceAid,\\n        uint256 soldiersAid\\n    ) public view returns (bool) {\\n        uint256 techAvailable = InfrastructureContract(infrastructure)\\n            .getTechnologyCount(idSender);\\n        uint256 balanceAvailable = TreasuryContract(treasury).checkBalance(\\n            idSender\\n        );\\n        uint256 soldiersAvailable = ForcesContract(forces)\\n            .getDefendingSoldierCount(idSender);\\n        require(techAvailable >= techAid, \\\"not enough tech for this proposal\\\");\\n        require(\\n            balanceAvailable >= balanceAid,\\n            \\\"not enough funds for this proposal\\\"\\n        );\\n        require(\\n            soldiersAvailable >= soldiersAid,\\n            \\\"not enough soldiers for this proposal\\\"\\n        );\\n        return true;\\n    }\\n\\n    ///@dev this function is a public view function that is called by the proposeAid() function\\n    ///@notice if both nations have a federal aid commission then max aid amounts increase 50%\\n    ///@param idSender is the nation ID of the sender of the aid proposal\\n    ///@param idRecipient id the nation ID of the recipient of the aid proposal\\n    ///@return bool true if both sender and reciever have a federal aid commission\\n    function getFederalAidEligibility(\\n        uint256 idSender,\\n        uint256 idRecipient\\n    ) public view returns (bool) {\\n        bool senderEligable = won1.getFederalAidCommission(idSender);\\n        bool recipientEligable = won1.getFederalAidCommission(idRecipient);\\n        if (senderEligable && recipientEligable) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    ///@dev this function is only callable by the owner of the contract\\n    ///@dev this function allows the contract owner to set how long aid proposals stay active for\\n    function setProposalExpiration(uint256 newExpiration) public onlyOwner {\\n        proposalExpirationDays = newExpiration;\\n    }\\n\\n    ///@dev this is a view function that allows anyone to view the duration aid proposals have untile they expire\\n    ///@return uint256 the number of days a proposal has to be expected otherwise it expires\\n    function getProposalExpiration() public view returns (uint256) {\\n        return proposalExpirationDays;\\n    }\\n\\n    ///@dev this function is a public view function that checks to see if an aid propoals is expired (too much time has elapsed since proposal)\\n    ///@notice this function will prevent an aid proposal from being fulfilled if the proposal is passed the expiration duration\\n    ///@param proposalId id the ID of the aid proposal\\n    ///@return bool true if amount of time elapsed since proposal is greater than the proposal expiration time\\n    function proposalExpired(uint256 proposalId) public view returns (bool) {\\n        uint256 day = keep.getGameDay();\\n        uint256 dayProposed = idToProposal[proposalId].dayProposed;\\n        uint256 timeElapsed = (day - dayProposed);\\n        bool expired = false;\\n        if (timeElapsed > proposalExpirationDays) {\\n            expired = true;\\n        }\\n        return expired;\\n    }\\n\\n    ///@dev this is a public function that is callable by the recipient of the aid proposal\\n    ///@notice this function is called by the recipient of an aid proposal in order to accept the aid\\n    ///@param proposalId this id the ID of the aid proposal\\n    function acceptProposal(uint256 proposalId) public nonReentrant {\\n        require(!idToProposal[proposalId].accepted, \\\"this offer has been accepted already\\\");\\n        require(!idToProposal[proposalId].cancelled, \\\"this offer has been cancelled\\\");\\n        uint256 idSender = idToProposal[proposalId].idSender;\\n        uint256 idRecipient = idToProposal[proposalId].idRecipient;\\n        if (proposalExpired(proposalId)) {\\n            removeProposal(proposalId, idSender, idRecipient);\\n            revert(\\\"Proposal expired and removed\\\");\\n        }\\n        uint256 tech = idToProposal[proposalId].techAid;\\n        uint256 balance = idToProposal[proposalId].balanceAid;\\n        uint256 soldiers = idToProposal[proposalId].soldierAid;\\n        address addressRecipient = mint.ownerOf(idRecipient);\\n        require(\\n            addressRecipient == msg.sender,\\n            \\\"you are not the recipient of this proposal\\\"\\n        );\\n        bool sanctioned = sen.isSanctioned(idSender, idRecipient);\\n        require(!sanctioned, \\\"trade not possible\\\");\\n        bool available = checkAvailability(idSender, tech, balance, soldiers);\\n        require(available, \\\"balances not available\\\");\\n        idToProposal[proposalId].accepted = true;\\n        require(InfrastructureContract(infrastructure).sendTech(\\n            idSender,\\n            idRecipient,\\n            tech\\n        ));\\n        require(TreasuryContract(treasury).sendAidBalance(\\n            idSender,\\n            idRecipient,\\n            balance\\n        ));\\n        require(ForcesContract(forces).sendSoldiers(idSender, idRecipient, soldiers));\\n        finishAcceptProposal(\\n            proposalId,\\n            idSender,\\n            idRecipient,\\n            tech,\\n            balance,\\n            soldiers\\n        );\\n    }\\n\\n    function finishAcceptProposal(\\n        uint256 proposalId,\\n        uint256 idSender,\\n        uint256 idRecipient,\\n        uint256 tech,\\n        uint256 balance,\\n        uint256 soldiers\\n    ) internal {\\n        uint256[] storage senderProposals = idToAidProposalsSent[idSender];\\n        uint256[] storage recipientProposals = idToAidProposalsReceived[\\n            idRecipient\\n        ];\\n        uint256 day = keep.getGameDay();\\n        for (uint256 i = 0; i < senderProposals.length; i++) {\\n            if (senderProposals[i] == proposalId) {\\n                senderProposals[i] = senderProposals[senderProposals.length - 1];\\n                senderProposals.pop();\\n            }\\n            Proposal memory proposal = idToProposal[proposalId];\\n            if (day - proposal.dayProposed > proposalExpirationDays) {\\n                senderProposals[i] = senderProposals[senderProposals.length - 1];\\n                senderProposals.pop();                    \\n            }\\n        }\\n        for (uint256 i = 0; i < recipientProposals.length; i++) {\\n            if (recipientProposals[i] == proposalId) {\\n                recipientProposals[i] = recipientProposals[recipientProposals\\n                    .length - 1];\\n                recipientProposals.pop();\\n            }\\n            Proposal memory proposal = idToProposal[proposalId];\\n            if (day - proposal.dayProposed > proposalExpirationDays) {\\n                recipientProposals[i] = recipientProposals[recipientProposals\\n                    .length - 1];\\n                recipientProposals.pop();                    \\n            }\\n        }\\n        emit AidAccepted(\\n            proposalId,\\n            idSender,\\n            idRecipient,\\n            tech,\\n            balance,\\n            soldiers\\n        );\\n    }\\n\\n    function removeProposal(uint256 proposalId, uint256 idSender, uint256 idRecipient) internal {\\n        delete idToProposal[proposalId];\\n\\n        uint256[] storage senderProposals = idToAidProposalsSent[idSender];\\n        uint256[] storage recipientProposals = idToAidProposalsReceived[idRecipient];\\n\\n        // Remove from sender's proposals\\n        for (uint256 i = 0; i < senderProposals.length; i++) {\\n            if (senderProposals[i] == proposalId) {\\n                senderProposals[i] = senderProposals[senderProposals.length - 1];\\n                senderProposals.pop();\\n                break;\\n            }\\n        }\\n\\n        // Remove from recipient's proposals\\n        for (uint256 i = 0; i < recipientProposals.length; i++) {\\n            if (recipientProposals[i] == proposalId) {\\n                recipientProposals[i] = recipientProposals[recipientProposals.length - 1];\\n                recipientProposals.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    ///@dev this function is a public function that allows the aid proposal to be cancelled by the sender of the proposal\\n    ///@notice this function allows the aid sender or recipient to cancel an aid proposal prior to it being accepted\\n    ///@param proposalId this is the id of the proposal\\n    function cancelAid(uint256 proposalId) public nonReentrant{\\n        uint256 idRecipient = idToProposal[proposalId].idRecipient;\\n        uint256 idSender = idToProposal[proposalId].idSender;\\n        address addressRecipient = mint.ownerOf(idRecipient);\\n        address addressSender = mint.ownerOf(idSender);\\n        require(\\n            addressSender == msg.sender || addressRecipient == msg.sender,\\n            \\\"caller not a participant in this trade\\\"\\n        );\\n        bool cancelled = idToProposal[proposalId].cancelled;\\n        require(cancelled == false, \\\"trade already cancelled\\\");\\n        bool accepted = idToProposal[proposalId].accepted;\\n        require(accepted == false, \\\"trade already accepted\\\");\\n        bool expired = proposalExpired(proposalId);\\n        require(expired == false, \\\"trade already expired\\\");\\n        idToProposal[proposalId].cancelled = true;\\n        uint256 nationCancelling;\\n        if (addressSender == msg.sender) {\\n            nationCancelling = idSender;\\n        } else if (addressRecipient == msg.sender) {\\n            nationCancelling = idRecipient;\\n        }\\n        completeCancelAid(proposalId, idSender, idRecipient);\\n    }\\n\\n    function completeCancelAid(\\n        uint256 proposalId,\\n        uint256 idSender,\\n        uint256 idRecipient\\n    ) internal {\\n        uint256[] storage senderProposals = idToAidProposalsSent[idSender];\\n        uint256[] storage recipientProposals = idToAidProposalsReceived[\\n            idRecipient\\n        ];\\n        uint256 day = keep.getGameDay();\\n        for (uint256 i = 0; i < senderProposals.length; i++) {\\n            if (senderProposals[i] == proposalId) {\\n                senderProposals[i] = senderProposals[senderProposals.length - 1];\\n                senderProposals.pop();\\n            }\\n            Proposal memory proposal = idToProposal[proposalId];\\n            if (day - proposal.dayProposed > proposalExpirationDays) {\\n                senderProposals[i] = senderProposals[senderProposals.length - 1];\\n                senderProposals.pop();                    \\n            }\\n        }\\n        for (uint256 i = 0; i < recipientProposals.length; i++) {\\n            if (recipientProposals[i] == proposalId) {\\n                recipientProposals[i] = recipientProposals[recipientProposals\\n                    .length - 1];\\n                recipientProposals.pop();\\n            }\\n            Proposal memory proposal = idToProposal[proposalId];\\n            if (day - proposal.dayProposed > proposalExpirationDays) {\\n                recipientProposals[i] = recipientProposals[recipientProposals\\n                    .length - 1];\\n                recipientProposals.pop();                    \\n            }\\n        }\\n        emit ProposalCancelled(\\n            proposalId,\\n            idSender,\\n            idRecipient\\n        );\\n    }\\n\\n    ///@dev this is public view function that allows a caller to return the items in a proposal struct\\n    ///@return uint256 this funtion returns the contects of a proposal struct\\n    function getProposal(\\n        uint256 proposalId\\n    )\\n        public\\n        view\\n        returns (uint256, uint256, uint256, uint256, uint256, uint256, uint256)\\n    {\\n        return (\\n            idToProposal[proposalId].proposalId,\\n            idToProposal[proposalId].dayProposed,\\n            idToProposal[proposalId].idSender,\\n            idToProposal[proposalId].idRecipient,\\n            idToProposal[proposalId].techAid,\\n            idToProposal[proposalId].balanceAid,\\n            idToProposal[proposalId].soldierAid\\n        );\\n    }\\n\\n    ///@dev this function is a public view function that allows the caller to see if an aid proposal is cancelled or accepted already\\n    ///@return bool true if the proposal has cancelled or accepted\\n    function checkCancelledOrAccepted(\\n        uint256 proposalId\\n    ) public view returns (bool, bool) {\\n        return (\\n            idToProposal[proposalId].accepted,\\n            idToProposal[proposalId].cancelled\\n        );\\n    }\\n\\n    function getProposalsSent(uint256 id)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return idToAidProposalsSent[id];\\n    }\\n\\n    function getProposalsReceived(uint256 id)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return idToAidProposalsReceived[id];\\n    }\\n}\\n\",\"keccak256\":\"0x3bc4761a901b7130c1711e0cba8547334ba6bc410bb2319b46d314f1546934d0\",\"license\":\"BUSL-1.1\"},\"contracts/Bombers.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"./Treasury.sol\\\";\\nimport \\\"./CountryMinter.sol\\\";\\nimport \\\"./Infrastructure.sol\\\";\\nimport \\\"./Fighters.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n///@title BombersContract\\n///@author OxSnosh\\n///@notice this contract will store this information about each nation's bomber fleet\\ncontract BombersContract is Ownable, ReentrancyGuard {\\n    address public countryMinter;\\n    address public bombersMarket1;\\n    address public bombersMarket2;\\n    address public airBattle;\\n    address public fighters;\\n    address public treasury;\\n    address public infrastructure;\\n    address public war;\\n\\n    CountryMinter mint;\\n\\n    struct Bombers {\\n        bool initialized;\\n        uint256 ah1CobraCount;\\n        uint256 ah64ApacheCount;\\n        uint256 bristolBlenheimCount;\\n        uint256 b52MitchellCount;\\n        uint256 b17gFlyingFortressCount;\\n        uint256 b52StratofortressCount;\\n        uint256 b2SpiritCount;\\n        uint256 b1bLancerCount;\\n        uint256 tupolevTu160Count;\\n    }\\n\\n    event Ah1CobraPurchased(uint256 indexed id, uint256 indexed amount);\\n    event Ah64ApachePurchased(uint256 indexed id, uint256 indexed amount);\\n    event BristolBlenheimPurchased(uint256 indexed id, uint256 indexed amount);\\n    event B52MitchellPurchased(uint256 indexed id, uint256 indexed amount);\\n    event B17gFlyingFortressPurchased(\\n        uint256 indexed id,\\n        uint256 indexed amount\\n    );\\n    event B52StratofortressPurchased(\\n        uint256 indexed id,\\n        uint256 indexed amount\\n    );\\n    event B2SpiritPurchased(uint256 indexed id, uint256 indexed amount);\\n    event B1bLancerPurchased(uint256 indexed id, uint256 indexed amount);\\n    event TupolevTu160Purchased(uint256 indexed id, uint256 indexed amount);\\n\\n    event Ah1CobraDecommissioned(uint256 indexed id, uint256 indexed amount);\\n    event Ah64ApacheDecommissioned(uint256 indexed id, uint256 indexed amount);\\n    event BristolBlenheimDecommissioned(uint256 indexed id, uint256 indexed amount);\\n    event B52MitchellDecommissioned(uint256 indexed id, uint256 indexed amount);\\n    event B17gFlyingFortressDecommissioned(uint256 indexed id, uint256 indexed amount);\\n    event B52StratofortressDecommissioned(uint256 indexed id, uint256 indexed amount);\\n    event B2SpiritDecommissioned(uint256 indexed id, uint256 indexed amount);\\n    event B1bLancerDecommissioned(uint256 indexed id, uint256 indexed amount);\\n    event TupolevTu160Decommissioned(uint256 indexed id, uint256 indexed amount);\\n\\n    mapping(uint256 => Bombers) public idToBombers;\\n\\n    ///@dev this function is only callable from the contact owner\\n    ///@dev this function will be called right after contract deployment to set contract pointers\\n    function settings(\\n        address _countryMinter,\\n        address _bombersMarket1,\\n        address _bombersMarket2,\\n        address _airBattle,\\n        address _treasuryAddress,\\n        address _fightersAddress,\\n        address _infrastructure,\\n        address _war\\n    ) public onlyOwner {\\n        countryMinter = _countryMinter;\\n        mint = CountryMinter(_countryMinter);\\n        bombersMarket1 = _bombersMarket1;\\n        bombersMarket2 = _bombersMarket2;\\n        airBattle = _airBattle;\\n        treasury = _treasuryAddress;\\n        fighters = _fightersAddress;\\n        infrastructure = _infrastructure;\\n        war = _war;\\n    }\\n\\n    modifier onlyCountryMinter() {\\n        require(msg.sender == countryMinter, \\\"only countryMinter can call\\\");\\n        _;\\n    }\\n\\n    modifier onlyWar() {\\n        require(\\n            msg.sender == war,\\n            \\\"this function can only be called by battle\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyAirBattle() {\\n        require(\\n            msg.sender == airBattle,\\n            \\\"function only callable from Air Battle Contract\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyMarket() {\\n        require(\\n            msg.sender == bombersMarket1 || msg.sender == bombersMarket2,\\n            \\\"this function can only be called by market\\\"\\n        );\\n        _;\\n    }\\n\\n    ///@dev this function is only callable from the country minter contract\\n    ///@notice this function will initiate a nation to be bale to buy bombers when a nation is minted\\n    function generateBombers(uint256 id) public onlyCountryMinter {\\n        require(\\n            !idToBombers[id].initialized,\\n            \\\"Bombers already initialized for this nation\\\"\\n        );\\n        Bombers memory newBombers = Bombers(true, 0, 0, 0, 0, 0, 0, 0, 0, 0);\\n        idToBombers[id] = newBombers;\\n    }\\n\\n    ///@notice this function will return the amount of defending AH1 Cobra's of a nation\\n    ///@param id is the nation ID of the nation\\n    ///@return uint256 is the number of defending AH1 Cobra aircraft for the nation\\n    function getAh1CobraCount(uint256 id) public view returns (uint256) {\\n        uint256 count = idToBombers[id].ah1CobraCount;\\n        return count;\\n    }\\n\\n    ///@dev this function is only callabel from the Bomber marketplace contract\\n    ///@notice this function will increase the number of aircraft when they are purchased in the marketplace\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being purchased\\n    function increaseAh1CobraCount(\\n        uint256 id,\\n        uint256 amount\\n    ) public onlyMarket {\\n        idToBombers[id].ah1CobraCount += amount;\\n        emit Ah1CobraPurchased(id, amount);\\n    }\\n\\n    ///@dev this function is only callable from the war contract\\n    ///@notice this function will decrease the amount of aircraft lost in a battle\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being destroyed\\n    function decreaseAh1CobraCount(uint256 amount, uint256 id) internal {\\n        uint256 currentAmount = idToBombers[id].ah1CobraCount;\\n        if (currentAmount >= amount) {\\n            idToBombers[id].ah1CobraCount -= amount;\\n        } else {\\n            idToBombers[id].ah1CobraCount = 0;\\n        }\\n    }\\n\\n    ///@notice this function will allow a nation owner to decommission Ah1Cobras\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being destroyed\\n    function scrapAh1Cobra(uint256 amount, uint256 id) public {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation ruler\\\");\\n        uint256 currentAmount = idToBombers[id].ah1CobraCount;\\n        require(currentAmount >= amount, \\\"cannot delete that many\\\");\\n        idToBombers[id].ah1CobraCount -= amount;\\n        emit Ah1CobraDecommissioned(id, amount);\\n    }\\n\\n    ///@notice this function will return the amount of defending A64Apaches a nation owns\\n    ///@param id is the nation ID of the nation\\n    ///@return uint256 is the number of defending A64Apache aircraft for the nation\\n    function getAh64ApacheCount(uint256 id) public view returns (uint256) {\\n        uint256 count = idToBombers[id].ah64ApacheCount;\\n        return count;\\n    }\\n\\n    ///@dev this function is only callabel from the Bomber marketplace contract\\n    ///@notice this function will increase the number of aircraft when they are purchased in the marketplace\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being purchased\\n    function increaseAh64ApacheCount(\\n        uint256 id,\\n        uint256 amount\\n    ) public onlyMarket {\\n        idToBombers[id].ah64ApacheCount += amount;\\n        emit Ah64ApachePurchased(id, amount);\\n    }\\n\\n    ///@dev this function is only callable from the war contract\\n    ///@notice this function will decrease the amount of aircraft lost in a battle\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being destroyed\\n    function decreaseAh64ApacheCount(uint256 amount, uint256 id) internal {\\n        uint256 currentAmount = idToBombers[id].ah64ApacheCount;\\n        if (currentAmount >= amount) {\\n            idToBombers[id].ah64ApacheCount -= amount;\\n        } else {\\n            idToBombers[id].ah64ApacheCount = 0;\\n        }\\n    }\\n\\n    ///@notice this function will allow a nation owner to decommission Ah64 Apache's\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being destroyed\\n    function scrapAh64Apache(uint256 amount, uint256 id) public {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation ruler\\\");\\n        uint256 currentAmount = idToBombers[id].ah64ApacheCount;\\n        require(currentAmount >= amount, \\\"cannot delete that many\\\");\\n        idToBombers[id].ah64ApacheCount -= amount;\\n        emit Ah64ApacheDecommissioned(id, amount);\\n    }\\n\\n    ///@notice this function will return the amount of defending Bristol Blenheim's a nation owns\\n    ///@param id is the nation ID of the nation\\n    ///@return uint256 is the number of defending Bristol Blenheim aircraft for the nation\\n    function getBristolBlenheimCount(uint256 id) public view returns (uint256) {\\n        uint256 count = idToBombers[id].bristolBlenheimCount;\\n        return count;\\n    }\\n\\n    ///@dev this function is only callabel from the Bomber marketplace contract\\n    ///@notice this function will increase the number of aircraft when they are purchased in the marketplace\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being purchased\\n    function increaseBristolBlenheimCount(\\n        uint256 id,\\n        uint256 amount\\n    ) public onlyMarket {\\n        idToBombers[id].bristolBlenheimCount += amount;\\n        emit BristolBlenheimPurchased(id, amount);\\n    }\\n\\n    ///@dev this function is only callable from the war contract\\n    ///@notice this function will decrease the amount of aircraft lost in a battle\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being destroyed\\n    function decreaseBristolBlenheimCount(uint256 amount, uint256 id) internal {\\n        uint256 currentAmount = idToBombers[id].bristolBlenheimCount;\\n        if (currentAmount >= amount) {\\n            idToBombers[id].bristolBlenheimCount -= amount;\\n        } else {\\n            idToBombers[id].bristolBlenheimCount = 0;\\n        }\\n    }\\n\\n    ///@notice this function will allow a nation owner to decommission Bristol Blenheim's\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being destroyed\\n    function scrapBristolBlenheim(uint256 amount, uint256 id) public {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation ruler\\\");\\n        uint256 currentAmount = idToBombers[id].bristolBlenheimCount;\\n        require(currentAmount >= amount, \\\"cannot delete that many\\\");\\n        idToBombers[id].bristolBlenheimCount -= amount;\\n        emit BristolBlenheimDecommissioned(id, amount);\\n    }\\n\\n    ///@notice this function will return the amount of defending b52 Mitchell's a nation owns\\n    ///@param id is the nation ID of the nation\\n    ///@return uint256 is the number of defending b52 Mitchell aircraft for the nation\\n    function getB52MitchellCount(uint256 id) public view returns (uint256) {\\n        uint256 count = idToBombers[id].b52MitchellCount;\\n        return count;\\n    }\\n\\n    ///@dev this function is only callabel from the Bomber marketplace contract\\n    ///@notice this function will increase the number of aircraft when they are purchased in the marketplace\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being purchased\\n    function increaseB52MitchellCount(\\n        uint256 id,\\n        uint256 amount\\n    ) public onlyMarket {\\n        idToBombers[id].b52MitchellCount += amount;\\n        emit B52MitchellPurchased(id, amount);\\n    }\\n\\n    ///@dev this function is only callable from the war contract\\n    ///@notice this function will decrease the amount of aircraft lost in a battle\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being destroyed\\n    function decreaseB52MitchellCount(uint256 amount, uint256 id) internal {\\n        uint256 currentAmount = idToBombers[id].b52MitchellCount;\\n        if (currentAmount >= amount) {\\n            idToBombers[id].b52MitchellCount -= amount;\\n        } else {\\n            idToBombers[id].b52MitchellCount = 0;\\n        }\\n    }\\n\\n    ///@notice this function will allow a nation owner to decommission B52 Mitchell\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being destroyed\\n    function scrapB52Mitchell(uint256 amount, uint256 id) public {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation ruler\\\");\\n        uint256 currentAmount = idToBombers[id].b52MitchellCount;\\n        require(currentAmount >= amount, \\\"cannot delete that many\\\");\\n        idToBombers[id].b52MitchellCount -= amount;\\n        emit B52MitchellDecommissioned(id, amount);\\n    }\\n\\n    ///@notice this function will return the amount of defending B17's a nation owns\\n    ///@param id is the nation ID of the nation\\n    ///@return uint256 is the number of defending B17 aircraft for the nation\\n    function getB17gFlyingFortressCount(\\n        uint256 id\\n    ) public view returns (uint256) {\\n        uint256 count = idToBombers[id].b17gFlyingFortressCount;\\n        return count;\\n    }\\n\\n    ///@dev this function is only callabel from the Bomber marketplace contract\\n    ///@notice this function will increase the number of aircraft when they are purchased in the marketplace\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being purchased\\n    function increaseB17gFlyingFortressCount(\\n        uint256 id,\\n        uint256 amount\\n    ) public onlyMarket {\\n        idToBombers[id].b17gFlyingFortressCount += amount;\\n        emit B17gFlyingFortressPurchased(id, amount);\\n    }\\n\\n    ///@dev this function is only callable from the war contract\\n    ///@notice this function will decrease the amount of aircraft lost in a battle\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being destroyed\\n    function decreaseB17gFlyingFortressCount(\\n        uint256 amount,\\n        uint256 id\\n    ) internal {\\n        uint256 currentAmount = idToBombers[id].b17gFlyingFortressCount;\\n        if (currentAmount >= amount) {\\n            idToBombers[id].b17gFlyingFortressCount -= amount;\\n        } else {\\n            idToBombers[id].b17gFlyingFortressCount = 0;\\n        }\\n    }\\n\\n    ///@notice this function will allow a nation owner to decommission B17 Flying Fortresses\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being destroyed\\n    function scrapB17gFlyingFortress(uint256 amount, uint256 id) public {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation ruler\\\");\\n        uint256 currentAmount = idToBombers[id].b17gFlyingFortressCount;\\n        require(currentAmount >= amount, \\\"cannot delete that many\\\");\\n        idToBombers[id].b17gFlyingFortressCount -= amount;\\n        emit B17gFlyingFortressDecommissioned(id, amount);\\n    }\\n\\n    ///@notice this function will return the amount of defending b52Stratofortresses a nation owns\\n    ///@param id is the nation ID of the nation\\n    ///@return uint256 is the number of defending b52Stratofortress aircraft for the nation\\n    function getB52StratofortressCount(\\n        uint256 id\\n    ) public view returns (uint256) {\\n        uint256 count = idToBombers[id].b52StratofortressCount;\\n        return count;\\n    }\\n\\n    ///@dev this function is only callabel from the Bomber marketplace contract\\n    ///@notice this function will increase the number of aircraft when they are purchased in the marketplace\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being purchased\\n    function increaseB52StratofortressCount(\\n        uint256 id,\\n        uint256 amount\\n    ) public onlyMarket {\\n        idToBombers[id].b52StratofortressCount += amount;\\n        emit B52StratofortressPurchased(id, amount);\\n    }\\n\\n    ///@dev this function is only callable from the war contract\\n    ///@notice this function will decrease the amount of aircraft lost in a battle\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being destroyed\\n    function decreaseB52StratofortressCount(\\n        uint256 amount,\\n        uint256 id\\n    ) internal {\\n        uint256 currentAmount = idToBombers[id].b52StratofortressCount;\\n        if (currentAmount >= amount) {\\n            idToBombers[id].b52StratofortressCount -= amount;\\n        } else {\\n            idToBombers[id].b52StratofortressCount = 0;\\n        }\\n    }\\n\\n    ///@notice this function will allow a nation owner to decommission B52 Stratofortresses\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being destroyed\\n    function scrapB52Stratofortress(uint256 amount, uint256 id) public {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation ruler\\\");\\n        uint256 currentAmount = idToBombers[id].b52StratofortressCount;\\n        require(currentAmount >= amount, \\\"cannot delete that many\\\");\\n        idToBombers[id].b52StratofortressCount -= amount;\\n        emit B52StratofortressDecommissioned(id, amount);\\n    }\\n\\n    ///@notice this function will return the amount of defending B2Spirits's a nation owns\\n    ///@param id is the nation ID of the nation\\n    ///@return uint256 is the number of defending B2Spirit aircraft for the nation\\n    function getB2SpiritCount(uint256 id) public view returns (uint256) {\\n        uint256 count = idToBombers[id].b2SpiritCount;\\n        return count;\\n    }\\n\\n    ///@dev this function is only callabel from the Bomber marketplace contract\\n    ///@notice this function will increase the number of aircraft when they are purchased in the marketplace\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being purchased\\n    function increaseB2SpiritCount(\\n        uint256 id,\\n        uint256 amount\\n    ) public onlyMarket {\\n        idToBombers[id].b2SpiritCount += amount;\\n        emit B2SpiritPurchased(id, amount);\\n    }\\n\\n    ///@dev this function is only callable from the war contract\\n    ///@notice this function will decrease the amount of aircraft lost in a battle\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being destroyed\\n    function decreaseB2SpiritCount(uint256 amount, uint256 id) internal {\\n        uint256 currentAmount = idToBombers[id].b2SpiritCount;\\n        if (currentAmount >= amount) {\\n            idToBombers[id].b2SpiritCount -= amount;\\n        } else {\\n            idToBombers[id].b2SpiritCount = 0;\\n        }\\n    }\\n\\n    ///@notice this function will allow a nation owner to decommission B2 Spirit's\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being destroyed\\n    function scrapB2Spirit(uint256 amount, uint256 id) public {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation ruler\\\");\\n        uint256 currentAmount = idToBombers[id].b2SpiritCount;\\n        require(currentAmount >= amount, \\\"cannot delete that many\\\");\\n        idToBombers[id].b2SpiritCount -= amount;\\n        emit B2SpiritDecommissioned(id, amount);\\n    }\\n\\n    ///@notice this function will return the amount of defending B1bLancer's a nation owns\\n    ///@param id is the nation ID of the nation\\n    ///@return uint256 is the number of defending B1bLancer aircraft for the nation\\n    function getB1bLancerCount(uint256 id) public view returns (uint256) {\\n        uint256 count = idToBombers[id].b1bLancerCount;\\n        return count;\\n    }\\n\\n    ///@dev this function is only callabel from the Bomber marketplace contract\\n    ///@notice this function will increase the number of aircraft when they are purchased in the marketplace\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being purchased\\n    function increaseB1bLancerCount(\\n        uint256 id,\\n        uint256 amount\\n    ) public onlyMarket {\\n        idToBombers[id].b1bLancerCount += amount;\\n        emit B1bLancerPurchased(id, amount);\\n    }\\n\\n    ///@dev this function is only callable from the war contract\\n    ///@notice this function will decrease the amount of aircraft lost in a battle\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being destroyed\\n    function decreaseB1bLancerCount(uint256 amount, uint256 id) internal {\\n        uint256 currentAmount = idToBombers[id].b1bLancerCount;\\n        if (currentAmount >= amount) {\\n            idToBombers[id].b1bLancerCount -= amount;\\n        } else {\\n            idToBombers[id].b1bLancerCount = 0;\\n        }\\n    }\\n\\n    ///@notice this function will allow a nation owner to decommission B1B Lancers\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being destroyed\\n    function scrapB1bLancer(uint256 amount, uint256 id) public {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation ruler\\\");\\n        uint256 currentAmount = idToBombers[id].b1bLancerCount;\\n        require(currentAmount >= amount, \\\"cannot delete that many\\\");\\n        idToBombers[id].b1bLancerCount -= amount;\\n        emit B1bLancerDecommissioned(id, amount);\\n    }\\n\\n    ///@notice this function will return the amount of defending Tu160's a nation owns\\n    ///@param id is the nation ID of the nation\\n    ///@return uint256 is the number of defending Tu160 aircraft for the nation\\n    function getTupolevTu160Count(uint256 id) public view returns (uint256) {\\n        uint256 count = idToBombers[id].tupolevTu160Count;\\n        return count;\\n    }\\n\\n    ///@dev this function is only callabel from the Bomber marketplace contract\\n    ///@notice this function will increase the number of aircraft when they are purchased in the marketplace\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being purchased\\n    function increaseTupolevTu160Count(\\n        uint256 id,\\n        uint256 amount\\n    ) public onlyMarket {\\n        idToBombers[id].tupolevTu160Count += amount;\\n        emit TupolevTu160Purchased(id, amount);\\n    }\\n\\n    ///@dev this function is only callable from the war contract\\n    ///@notice this function will decrease the amount of aircraft lost in a battle\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being destroyed\\n    function decreaseTupolevTu160Count(uint256 amount, uint256 id) internal {\\n        uint256 currentAmount = idToBombers[id].tupolevTu160Count;\\n        if (currentAmount >= amount) {\\n            idToBombers[id].tupolevTu160Count -= amount;\\n        } else {\\n            idToBombers[id].tupolevTu160Count = 0;\\n        }\\n    }\\n\\n    ///@notice this function will allow a nation owner to decommission Tupolev TU160's\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being destroyed\\n    function scrapTupolevTu160(uint256 amount, uint256 id) public {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation ruler\\\");\\n        uint256 currentAmount = idToBombers[id].tupolevTu160Count;\\n        require(currentAmount >= amount, \\\"cannot delete that many\\\");\\n        idToBombers[id].tupolevTu160Count -= amount;\\n        emit TupolevTu160Decommissioned(id, amount);\\n    }\\n\\n    function getBomberCount(uint256 id) public view returns (uint256) {\\n        uint256 count = idToBombers[id].ah1CobraCount +\\n            idToBombers[id].ah64ApacheCount +\\n            idToBombers[id].bristolBlenheimCount +\\n            idToBombers[id].b52MitchellCount +\\n            idToBombers[id].b17gFlyingFortressCount +\\n            idToBombers[id].b52StratofortressCount +\\n            idToBombers[id].b2SpiritCount +\\n            idToBombers[id].b1bLancerCount +\\n            idToBombers[id].tupolevTu160Count;\\n        return count;\\n    }\\n\\n    ///@dev this is a public function that is only callable from the Air Battle contract\\n    ///@notice this function will decrease the amount of fighers lost in battle from the FighersContract\\n    ///@param losses is an array of uints that represent the fighters that the defender lost in battle\\n    ///@param id is the nation ID of the defender\\n    function decrementBomberLosses(\\n        uint256[] memory losses,\\n        uint256 id\\n    ) public onlyAirBattle nonReentrant returns (bool) {\\n        for (uint256 i; i < losses.length; i++) {\\n            if (losses[i] == 1) {\\n                decreaseAh1CobraCount(1, id);\\n            } else if (losses[i] == 2) {\\n                decreaseAh64ApacheCount(1, id);\\n            } else if (losses[i] == 3) {\\n                decreaseBristolBlenheimCount(1, id);\\n            } else if (losses[i] == 4) {\\n                decreaseB52MitchellCount(1, id);\\n            } else if (losses[i] == 5) {\\n                decreaseB17gFlyingFortressCount(1, id);\\n            } else if (losses[i] == 6) {\\n                decreaseB52StratofortressCount(1, id);\\n            } else if (losses[i] == 7) {\\n                decreaseB2SpiritCount(1, id);\\n            } else if (losses[i] == 8) {\\n                decreaseB1bLancerCount(1, id);\\n            } else if (losses[i] == 9) {\\n                decreaseTupolevTu160Count(1, id);\\n            }\\n        }\\n        return true;\\n    }\\n}\\n\\n///@title BombersMarketplace1\\n///@author OxSnosh\\n///@notice this is the contract that will allow nation owners to purchase AH1 Cobras, AH64 Apaches, Bristol Blenheims, B52 Mitchells and B17 Flying Fortresses\\ncontract BombersMarketplace1 is Ownable, ReentrancyGuard {\\n    address public countryMinter;\\n    address public bombers;\\n    address public fighters;\\n    address public fightersMarket1;\\n    address public infrastructure;\\n    address public treasury;\\n    uint256 public ah1CobraCost = 10000 * (10 ** 18);\\n    uint256 public ah1CobraRequiredInfrastructure = 100;\\n    uint256 public ah1CobraRequiredTech = 30;\\n    uint256 public ah64ApacheCost = 15000 * (10 ** 18);\\n    uint256 public ah64ApacheRequiredInfrastructure = 200;\\n    uint256 public ah64ApacheRequiredTech = 65;\\n    uint256 public bristolBlenheimCost = 20000 * (10 ** 18);\\n    uint256 public bristolBlenheimRequiredInfrastructure = 300;\\n    uint256 public bristolBlenheimRequiredTech = 105;\\n    uint256 public b52MitchellCost = 25000 * (10 ** 18);\\n    uint256 public b52MitchellRequiredInfrastructure = 400;\\n    uint256 public b52MitchellRequiredTech = 150;\\n    uint256 public b17gFlyingFortressCost = 30000 * (10 ** 18);\\n    uint256 public b17gFlyingFortressRequiredInfrastructure = 500;\\n    uint256 public b17gFlyingFortressRequiredTech = 200;\\n\\n    CountryMinter mint;\\n    FightersContract fight;\\n    FightersMarketplace1 fightMarket1;\\n    InfrastructureContract inf;\\n    TreasuryContract tsy;\\n    BombersContract bomb1;\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings(\\n        address _countryMinter,\\n        address _bombers,\\n        address _fighters,\\n        address _fightersMarket1,\\n        address _infrastructure,\\n        address _treasury\\n    ) public onlyOwner {\\n        countryMinter = _countryMinter;\\n        mint = CountryMinter(_countryMinter);\\n        bombers = _bombers;\\n        bomb1 = BombersContract(_bombers);\\n        fighters = _fighters;\\n        fight = FightersContract(_fighters);\\n        fightersMarket1 = _fightersMarket1;\\n        fightMarket1 = FightersMarketplace1(_fightersMarket1);\\n        infrastructure = _infrastructure;\\n        inf = InfrastructureContract(_infrastructure);\\n        treasury = _treasury;\\n        tsy = TreasuryContract(_treasury);\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be used to update the price, infrastructure requirement and tech requirement in order to purchase a AH1 Cobra\\n    function updateAh1CobraSpecs(\\n        uint256 newPrice,\\n        uint256 newInfra,\\n        uint256 newTech\\n    ) public onlyOwner {\\n        ah1CobraCost = newPrice;\\n        ah1CobraRequiredInfrastructure = newInfra;\\n        ah1CobraRequiredTech = newTech;\\n    }\\n\\n    function getAh1CobraSpecs()\\n        public\\n        view\\n        returns (uint256, uint256, uint256)\\n    {\\n        return (\\n            ah1CobraCost,\\n            ah1CobraRequiredInfrastructure,\\n            ah1CobraRequiredTech\\n        );\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be used to update the price, infrastructure requirement and tech requirement in order to purchase a A64 Apache\\n    function updateAh64ApacheSpecs(\\n        uint256 newPrice,\\n        uint256 newInfra,\\n        uint256 newTech\\n    ) public onlyOwner {\\n        ah64ApacheCost = newPrice;\\n        ah64ApacheRequiredInfrastructure = newInfra;\\n        ah64ApacheRequiredTech = newTech;\\n    }\\n\\n    function getAh64ApacheSpecs()\\n        public\\n        view\\n        returns (uint256, uint256, uint256)\\n    {\\n        return (\\n            ah64ApacheCost,\\n            ah64ApacheRequiredInfrastructure,\\n            ah64ApacheRequiredTech\\n        );\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be used to update the price, infrastructure requirement and tech requirement in order to purchase a Bristol Blenheim\\n    function updateBristolBlenheimSpecs(\\n        uint256 newPrice,\\n        uint256 newInfra,\\n        uint256 newTech\\n    ) public onlyOwner {\\n        bristolBlenheimCost = newPrice;\\n        bristolBlenheimRequiredInfrastructure = newInfra;\\n        bristolBlenheimRequiredTech = newTech;\\n    }\\n\\n    function getBristolBlenheimSpecs()\\n        public\\n        view\\n        returns (uint256, uint256, uint256)\\n    {\\n        return (\\n            bristolBlenheimCost,\\n            bristolBlenheimRequiredInfrastructure,\\n            bristolBlenheimRequiredTech\\n        );\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be used to update the price, infrastructure requirement and tech requirement in order to purchase a B52 Mitchell\\n    function updateB52MitchellSpecs(\\n        uint256 newPrice,\\n        uint256 newInfra,\\n        uint256 newTech\\n    ) public onlyOwner {\\n        b52MitchellCost = newPrice;\\n        b52MitchellRequiredInfrastructure = newInfra;\\n        b52MitchellRequiredTech = newTech;\\n    }\\n\\n    function getB52MitchellSpecs()\\n        public\\n        view\\n        returns (uint256, uint256, uint256)\\n    {\\n        return (\\n            b52MitchellCost,\\n            b52MitchellRequiredInfrastructure,\\n            b52MitchellRequiredTech\\n        );\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be used to update the price, infrastructure requirement and tech requirement in order to purchase a B17 Flying Fortress\\n    function updateB17gFlyingFortressSpecs(\\n        uint256 newPrice,\\n        uint256 newInfra,\\n        uint256 newTech\\n    ) public onlyOwner {\\n        b17gFlyingFortressCost = newPrice;\\n        b17gFlyingFortressRequiredInfrastructure = newInfra;\\n        b17gFlyingFortressRequiredTech = newTech;\\n    }\\n\\n    function getB17gFlyingFortressSpecs()\\n        public\\n        view\\n        returns (uint256, uint256, uint256)\\n    {\\n        return (\\n            b17gFlyingFortressCost,\\n            b17gFlyingFortressRequiredInfrastructure,\\n            b17gFlyingFortressRequiredTech\\n        );\\n    }\\n\\n    ///@dev this is a public function that will allow the caller to purchase an AH1 Cobra for their nation\\n    ///@notice this function allowes the caller to purchase an AH1 Cobra for their nation\\n    ///@param amount specifies the number of aircraft being purchased\\n    ///@param id is the nation ID\\n    function buyAh1Cobra(uint256 amount, uint256 id) public nonReentrant{\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation ruler\\\");\\n        uint256 aircraftCount = fight.getAircraftCount(id);\\n        uint256 maxAircraft = fightMarket1.getMaxAircraftCount(id);\\n        require((aircraftCount + amount) <= maxAircraft, \\\"too many aircraft\\\");\\n        uint256 callerInfra = inf.getInfrastructureCount(id);\\n        require(\\n            callerInfra >= ah1CobraRequiredInfrastructure,\\n            \\\"!enough infrastructure\\\"\\n        );\\n        uint256 callerTech = inf.getTechnologyCount(id);\\n        require(callerTech >= ah1CobraRequiredTech, \\\"!enough tech\\\");\\n        uint256 cost = getAh1CobraCost(id);\\n        uint256 purchasePrice = (cost * amount);\\n        uint256 balance = tsy.checkBalance(id);\\n        require(balance >= purchasePrice);\\n        require(tsy.spendBalance(id, purchasePrice), \\\"failed to purchase\\\");\\n        bomb1.increaseAh1CobraCount(id, amount);\\n    }\\n\\n    function getAh1CobraCost(uint256 id) public view returns (uint256) {\\n        uint256 mod = fightMarket1.getAircraftPurchaseCostModifier(id);\\n        uint256 cost = ((ah1CobraCost * mod) / 100);\\n        return cost;\\n    }\\n\\n    ///@dev this is a public function that will allow the caller to purchase an A64 Apache for their nation\\n    ///@notice this function allowes the caller to purchase an A64 Apache for their nation\\n    ///@param amount specifies the number of aircraft being purchased\\n    ///@param id is the nation ID\\n    function buyAh64Apache(uint256 amount, uint256 id) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation ruler\\\");\\n        uint256 aircraftCount = fight.getAircraftCount(id);\\n        uint256 maxAircraft = fightMarket1.getMaxAircraftCount(id);\\n        require((aircraftCount + amount) <= maxAircraft, \\\"too many aircraft\\\");\\n        uint256 callerInfra = inf.getInfrastructureCount(id);\\n        require(\\n            callerInfra >= ah64ApacheRequiredInfrastructure,\\n            \\\"!enough infrastructure\\\"\\n        );\\n        uint256 callerTech = inf.getTechnologyCount(id);\\n        require(callerTech >= ah64ApacheRequiredTech, \\\"!enough tech\\\");\\n        uint256 cost = getAh64ApacheCost(id);\\n        uint256 purchasePrice = (cost * amount);\\n        uint256 balance = tsy.checkBalance(id);\\n        require(balance >= purchasePrice);\\n        require(tsy.spendBalance(id, purchasePrice), \\\"failed to purchase\\\");\\n        bomb1.increaseAh64ApacheCount(id, amount);\\n    }\\n\\n    function getAh64ApacheCost(uint256 id) public view returns (uint256) {\\n        uint256 mod = fightMarket1.getAircraftPurchaseCostModifier(id);\\n        uint256 cost = ((ah64ApacheCost * mod) / 100);\\n        return cost;\\n    }\\n\\n    ///@dev this is a public function that will allow the caller to purchase a Bristol Blenheim for their nation\\n    ///@notice this function allowes the caller to purchase a Bristol Blenheim for their nation\\n    ///@param amount specifies the number of aircraft being purchased\\n    ///@param id is the nation ID\\n    function buyBristolBlenheim(uint256 amount, uint256 id) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation ruler\\\");\\n        uint256 aircraftCount = fight.getAircraftCount(id);\\n        uint256 maxAircraft = fightMarket1.getMaxAircraftCount(id);\\n        require((aircraftCount + amount) <= maxAircraft, \\\"too many aircraft\\\");\\n        uint256 callerInfra = inf.getInfrastructureCount(id);\\n        require(\\n            callerInfra >= bristolBlenheimRequiredInfrastructure,\\n            \\\"!enough infrastructure\\\"\\n        );\\n        uint256 callerTech = inf.getTechnologyCount(id);\\n        require(callerTech >= bristolBlenheimRequiredTech, \\\"!enough tech\\\");\\n        uint256 cost = getBristolBlenheimCost(id);\\n        uint256 purchasePrice = (cost * amount);\\n        uint256 balance = tsy.checkBalance(id);\\n        require(balance >= purchasePrice);\\n        require(tsy.spendBalance(id, purchasePrice), \\\"failed to purchase\\\");\\n        bomb1.increaseBristolBlenheimCount(id, amount);\\n    }\\n\\n    function getBristolBlenheimCost(uint256 id) public view returns (uint256) {\\n        uint256 mod = fightMarket1.getAircraftPurchaseCostModifier(id);\\n        uint256 cost = ((bristolBlenheimCost * mod) / 100);\\n        return cost;\\n    }\\n\\n    ///@dev this is a public function that will allow the caller to purchase a B52 Mitchell for their nation\\n    ///@notice this function allowes the caller to purchase a B52 Mitchell for their nation\\n    ///@param amount specifies the number of aircraft being purchased\\n    ///@param id is the nation ID\\n    function buyB52Mitchell(uint256 amount, uint256 id) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation ruler\\\");\\n        uint256 aircraftCount = fight.getAircraftCount(id);\\n        uint256 maxAircraft = fightMarket1.getMaxAircraftCount(id);\\n        require((aircraftCount + amount) <= maxAircraft, \\\"too many aircraft\\\");\\n        uint256 callerInfra = inf.getInfrastructureCount(id);\\n        require(\\n            callerInfra >= b52MitchellRequiredInfrastructure,\\n            \\\"!enough infrastructure\\\"\\n        );\\n        uint256 callerTech = inf.getTechnologyCount(id);\\n        require(callerTech >= b52MitchellRequiredTech, \\\"!enough tech\\\");\\n        uint256 cost = getB52MitchellCost(id);\\n        uint256 purchasePrice = (cost * amount);\\n        uint256 balance = tsy.checkBalance(id);\\n        require(balance >= purchasePrice);\\n        require(tsy.spendBalance(id, purchasePrice), \\\"failed to purchase\\\");\\n        bomb1.increaseB52MitchellCount(id, amount);\\n    }\\n\\n    function getB52MitchellCost(uint256 id) public view returns (uint256) {\\n        uint256 mod = fightMarket1.getAircraftPurchaseCostModifier(id);\\n        uint256 cost = ((b52MitchellCost * mod) / 100);\\n        return cost;\\n    }\\n\\n    ///@dev this is a public function that will allow the caller to purchase a B17 Flying Fortress for their nation\\n    ///@notice this function allowes the caller to purchase a B17 Flying Fortress for their nation\\n    ///@param amount specifies the number of aircraft being purchased\\n    ///@param id is the nation ID\\n    function buyB17gFlyingFortress(uint256 amount, uint256 id) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation ruler\\\");\\n        uint256 aircraftCount = fight.getAircraftCount(id);\\n        uint256 maxAircraft = fightMarket1.getMaxAircraftCount(id);\\n        require((aircraftCount + amount) <= maxAircraft, \\\"too many aircraft\\\");\\n        uint256 callerInfra = inf.getInfrastructureCount(id);\\n        require(\\n            callerInfra >= b17gFlyingFortressRequiredInfrastructure,\\n            \\\"!enough infrastructure\\\"\\n        );\\n        uint256 callerTech = inf.getTechnologyCount(id);\\n        require(callerTech >= b17gFlyingFortressRequiredTech, \\\"!enough tech\\\");\\n        uint256 cost = getB17gFlyingFortressCost(id);\\n        uint256 purchasePrice = (cost * amount);\\n        uint256 balance = tsy.checkBalance(id);\\n        require(balance >= purchasePrice);\\n        require(tsy.spendBalance(id, purchasePrice), \\\"failed to purchase\\\");\\n        bomb1.increaseB17gFlyingFortressCount(id, amount);\\n    }\\n\\n    function getB17gFlyingFortressCost(\\n        uint256 id\\n    ) public view returns (uint256) {\\n        uint256 mod = fightMarket1.getAircraftPurchaseCostModifier(id);\\n        uint256 cost = ((b17gFlyingFortressCost * mod) / 100);\\n        return cost;\\n    }\\n}\\n\\n///@title BombersMarketplace2\\n///@author OxSnosh\\n///@notice this contract allows nation owners to purchase B52 Stratofortresses, B2 Spirits, B1B Lancers and Tupolev TO160s\\ncontract BombersMarketplace2 is Ownable, ReentrancyGuard {\\n    address public countryMinter;\\n    address public bombers;\\n    address public fighters;\\n    address public fightersMarket1;\\n    address public infrastructure;\\n    address public treasury;\\n    uint256 public b52StratofortressCost = 35000 * (10 ** 18);\\n    uint256 public b52StratofortressRequiredInfrastructure = 600;\\n    uint256 public b52StratofortressRequiredTech = 255;\\n    uint256 public b2SpiritCost = 40000 * (10 ** 18);\\n    uint256 public b2SpiritRequiredInfrastructure = 700;\\n    uint256 public b2SpiritRequiredTech = 315;\\n    uint256 public b1bLancerCost = 45000 * (10 ** 18);\\n    uint256 public b1bLancerRequiredInfrastructure = 850;\\n    uint256 public b1bLancerRequiredTech = 405;\\n    uint256 public tupolevTu160Cost = 50000 * (10 ** 18);\\n    uint256 public tupolevTu160RequiredInfrastructure = 1000;\\n    uint256 public tupolevTu160RequiredTech = 500;\\n\\n    event AircraftPurchased(uint256 indexed id, string aircraftType, uint256 amount, uint256 price);\\n\\n    CountryMinter mint;\\n    FightersContract fight;\\n    FightersMarketplace1 fightMarket1;\\n    InfrastructureContract inf;\\n    TreasuryContract tsy;\\n    BombersContract bomb1;\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings(\\n        address _countryMinter,\\n        address _bombers,\\n        address _fighters,\\n        address _fightersMarket1,\\n        address _infrastructure,\\n        address _treasury\\n    ) public onlyOwner {\\n        countryMinter = _countryMinter;\\n        mint = CountryMinter(_countryMinter);\\n        bombers = _bombers;\\n        bomb1 = BombersContract(_bombers);\\n        fighters = _fighters;\\n        fight = FightersContract(_fighters);\\n        fightersMarket1 = _fightersMarket1;\\n        fightMarket1 = FightersMarketplace1(_fightersMarket1);\\n        infrastructure = _infrastructure;\\n        inf = InfrastructureContract(_infrastructure);\\n        treasury = _treasury;\\n        tsy = TreasuryContract(_treasury);\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be used to update the price, infrastructure requirement and tech requirement in order to purchase a B52 Stratofortress\\n    function updateB52StratofortressSpecs(\\n        uint256 newPrice,\\n        uint256 newInfra,\\n        uint256 newTech\\n    ) public onlyOwner {\\n        b52StratofortressCost = newPrice;\\n        b52StratofortressRequiredInfrastructure = newInfra;\\n        b52StratofortressRequiredTech = newTech;\\n    }\\n\\n    function getB52StratofortressSpecs()\\n        public\\n        view\\n        returns (uint256, uint256, uint256)\\n    {\\n        return (\\n            b52StratofortressCost,\\n            b52StratofortressRequiredInfrastructure,\\n            b52StratofortressRequiredTech\\n        );\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be used to update the price, infrastructure requirement and tech requirement in order to purchase a B2 Spirit\\n    function updateb2SpiritSpecs(\\n        uint256 newPrice,\\n        uint256 newInfra,\\n        uint256 newTech\\n    ) public onlyOwner {\\n        b2SpiritCost = newPrice;\\n        b2SpiritRequiredInfrastructure = newInfra;\\n        b2SpiritRequiredTech = newTech;\\n    }\\n\\n    function getb2SpiritSpecs()\\n        public\\n        view\\n        returns (uint256, uint256, uint256)\\n    {\\n        return (\\n            b2SpiritCost,\\n            b2SpiritRequiredInfrastructure,\\n            b2SpiritRequiredTech\\n        );\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be used to update the price, infrastructure requirement and tech requirement in order to purchase a B1B Lancer\\n    function updateB1bLancerSpecs(\\n        uint256 newPrice,\\n        uint256 newInfra,\\n        uint256 newTech\\n    ) public onlyOwner {\\n        b1bLancerCost = newPrice;\\n        b1bLancerRequiredInfrastructure = newInfra;\\n        b1bLancerRequiredTech = newTech;\\n    }\\n\\n    function getB1bLancerSpecs()\\n        public\\n        view\\n        returns (uint256, uint256, uint256)\\n    {\\n        return (\\n            b1bLancerCost,\\n            b1bLancerRequiredInfrastructure,\\n            b1bLancerRequiredTech\\n        );\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be used to update the price, infrastructure requirement and tech requirement in order to purchase a Tupolev TU160\\n    function updateTupolevTu160Specs(\\n        uint256 newPrice,\\n        uint256 newInfra,\\n        uint256 newTech\\n    ) public onlyOwner {\\n        tupolevTu160Cost = newPrice;\\n        tupolevTu160RequiredInfrastructure = newInfra;\\n        tupolevTu160RequiredTech = newTech;\\n    }\\n\\n    function getTupolevTu160Specs()\\n        public\\n        view\\n        returns (uint256, uint256, uint256)\\n    {\\n        return (\\n            tupolevTu160Cost,\\n            tupolevTu160RequiredInfrastructure,\\n            tupolevTu160RequiredTech\\n        );\\n    }\\n\\n    ///@dev this is a public function that will allow the caller to purchase a B52 Stratofortress for their nation\\n    ///@notice this function allowes the caller to purchase a B52 Stratofortress for their nation\\n    ///@param amount specifies the number of aircraft being purchased\\n    ///@param id is the nation ID\\n    function buyB52Stratofortress(uint256 amount, uint256 id) public nonReentrant{\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation ruler\\\");\\n        uint256 aircraftCount = fight.getAircraftCount(id);\\n        uint256 maxAircraft = fightMarket1.getMaxAircraftCount(id);\\n        require((aircraftCount + amount) <= maxAircraft, \\\"too many aircraft\\\");\\n        uint256 callerInfra = inf.getInfrastructureCount(id);\\n        require(\\n            callerInfra >= b52StratofortressRequiredInfrastructure,\\n            \\\"!enough infrastructure\\\"\\n        );\\n        uint256 callerTech = inf.getTechnologyCount(id);\\n        require(callerTech >= b52StratofortressRequiredTech, \\\"!enough tech\\\");\\n        uint256 cost = getB52StratofortressCost(id);\\n        uint256 purchasePrice = (cost * amount);\\n        uint256 balance = tsy.checkBalance(id);\\n        require(balance >= purchasePrice);\\n        require(tsy.spendBalance(id, purchasePrice), \\\"failed to purchase\\\");\\n        bomb1.increaseB52StratofortressCount(id, amount);\\n    }\\n\\n    function getB52StratofortressCost(\\n        uint256 id\\n    ) public view returns (uint256) {\\n        uint256 mod = fightMarket1.getAircraftPurchaseCostModifier(id);\\n        uint256 cost = ((b52StratofortressCost * mod) / 100);\\n        return cost;\\n    }\\n\\n    ///@dev this is a public function that will allow the caller to purchase a B2 Spirit for their nation\\n    ///@notice this function allowes the caller to purchase a B2 Spirit for their nation\\n    ///@param amount specifies the number of aircraft being purchased\\n    ///@param id is the nation ID\\n    function buyB2Spirit(uint256 amount, uint256 id) public nonReentrant{\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation ruler\\\");\\n        uint256 aircraftCount = fight.getAircraftCount(id);\\n        uint256 maxAircraft = fightMarket1.getMaxAircraftCount(id);\\n        require((aircraftCount + amount) <= maxAircraft, \\\"too many aircraft\\\");\\n        uint256 callerInfra = inf.getInfrastructureCount(id);\\n        require(\\n            callerInfra >= b2SpiritRequiredInfrastructure,\\n            \\\"!enough infrastructure\\\"\\n        );\\n        uint256 callerTech = inf.getTechnologyCount(id);\\n        require(callerTech >= b2SpiritRequiredTech, \\\"!enough tech\\\");\\n        uint256 cost = getB2SpiritCost(id);\\n        uint256 purchasePrice = (cost * amount);\\n        uint256 balance = tsy.checkBalance(id);\\n        require(balance >= purchasePrice);\\n        require(tsy.spendBalance(id, purchasePrice), \\\"failed to purchase\\\");\\n        bomb1.increaseB2SpiritCount(id, amount);\\n    }\\n\\n    function getB2SpiritCost(uint256 id) public view returns (uint256) {\\n        uint256 mod = fightMarket1.getAircraftPurchaseCostModifier(id);\\n        uint256 cost = ((b2SpiritCost * mod) / 100);\\n        return cost;\\n    }\\n\\n    ///@dev this is a public function that will allow the caller to purchase a B1B Lancer for their nation\\n    ///@notice this function allowes the caller to purchase a B1B Lancer for their nation\\n    ///@param amount specifies the number of aircraft being purchased\\n    ///@param id is the nation ID\\n    function buyB1bLancer(uint256 amount, uint256 id) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation ruler\\\");\\n        uint256 aircraftCount = fight.getAircraftCount(id);\\n        uint256 maxAircraft = fightMarket1.getMaxAircraftCount(id);\\n        require((aircraftCount + amount) <= maxAircraft, \\\"too many aircraft\\\");\\n        uint256 callerInfra = inf.getInfrastructureCount(id);\\n        require(\\n            callerInfra >= b1bLancerRequiredInfrastructure,\\n            \\\"!enough infrastructure\\\"\\n        );\\n        uint256 callerTech = inf.getTechnologyCount(id);\\n        require(callerTech >= b1bLancerRequiredTech, \\\"!enough tech\\\");\\n        uint256 cost = getB1bLancerCost(id);\\n        uint256 purchasePrice = (cost * amount);\\n        uint256 balance = tsy.checkBalance(id);\\n        require(balance >= purchasePrice);\\n        require(tsy.spendBalance(id, purchasePrice), \\\"failed to purchase\\\");\\n        bomb1.increaseB1bLancerCount(id, amount);\\n    }\\n\\n    function getB1bLancerCost(uint256 id) public view returns (uint256) {\\n        uint256 mod = fightMarket1.getAircraftPurchaseCostModifier(id);\\n        uint256 cost = ((b1bLancerCost * mod) / 100);\\n        return cost;\\n    }\\n\\n    ///@dev this is a public function that will allow the caller to purchase a Tupolev TU160 for their nation\\n    ///@notice this function allowes the caller to purchase a Tupolev TU160 for their nation\\n    ///@param amount specifies the number of aircraft being purchased\\n    ///@param id is the nation ID\\n    function buyTupolevTu160(uint256 amount, uint256 id) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation ruler\\\");\\n        uint256 aircraftCount = fight.getAircraftCount(id);\\n        uint256 maxAircraft = fightMarket1.getMaxAircraftCount(id);\\n        require((aircraftCount + amount) <= maxAircraft, \\\"too many aircraft\\\");\\n        uint256 callerInfra = inf.getInfrastructureCount(id);\\n        require(\\n            callerInfra >= tupolevTu160RequiredInfrastructure,\\n            \\\"!enough infrastructure\\\"\\n        );\\n        uint256 callerTech = inf.getTechnologyCount(id);\\n        require(callerTech >= tupolevTu160RequiredTech, \\\"!enough tech\\\");\\n        uint256 cost = getTupolevTu160Cost(id);\\n        uint256 purchasePrice = (cost * amount);\\n        uint256 balance = tsy.checkBalance(id);\\n        require(balance >= purchasePrice);\\n        require(tsy.spendBalance(id, purchasePrice), \\\"failed to purchase\\\");\\n        bomb1.increaseTupolevTu160Count(id, amount);\\n    }\\n\\n    function getTupolevTu160Cost(uint256 id) public view returns (uint256) {\\n        uint256 mod = fightMarket1.getAircraftPurchaseCostModifier(id);\\n        uint256 cost = ((tupolevTu160Cost * mod) / 100);\\n        return cost;\\n    }\\n}\\n\",\"keccak256\":\"0xc7f510e597ee781af24b24d2372535e8fecae549eec1642052faffb27d3879e2\",\"license\":\"BUSL-1.1\"},\"contracts/CountryMinter.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./WarBucks.sol\\\";\\nimport \\\"./CountryParameters.sol\\\";\\nimport \\\"./Infrastructure.sol\\\";\\nimport \\\"./Resources.sol\\\";\\nimport \\\"./Improvements.sol\\\";\\nimport \\\"./Wonders.sol\\\";\\nimport \\\"./Military.sol\\\";\\nimport \\\"./Forces.sol\\\";\\nimport \\\"./Treasury.sol\\\";\\nimport \\\"./Navy.sol\\\";\\nimport \\\"./Fighters.sol\\\";\\nimport \\\"./Bombers.sol\\\";\\nimport \\\"./Aid.sol\\\";\\nimport \\\"./Senate.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n///@title CountryMinter\\n///@author OxSnosh\\n///@notice this is the contract that will allow the user to mint a nation at St8craft.gg!\\ncontract CountryMinter is ERC721, Ownable, ReentrancyGuard {\\n    uint256 public countryId;\\n\\n    address public countryParameters;\\n    address public infrastructure;\\n    address public resources;\\n    address public improvements1;\\n    address public improvements2;\\n    address public improvements3;\\n    address public improvements4;\\n    address public wonders1;\\n    address public wonders2;\\n    address public wonders3;\\n    address public wonders4;\\n    address public wonders;\\n    address public military;\\n    address public forces;\\n    address public treasury;\\n    address public navy;\\n    address public navy2;\\n    address public navalActions;\\n    address public fighters;\\n    address public bombers;\\n    address public missiles;\\n    address public senate;\\n    address public warbucks;\\n    address public bonusResources;\\n\\n    mapping(uint256 => address) public idToOwner;\\n    mapping(address => uint256) public ownerCountryCount;\\n    mapping(address => uint256[]) public ownerCountryIds;\\n\\n    uint256 public constant MAX_NATIONS_PER_WALLET = 20;\\n\\n    event NationCreated(\\n        string nationName,\\n        string ruler,\\n        uint256 indexed countryId,\\n        address owner\\n    );\\n\\n    constructor() ERC721(\\\"St8craft\\\", \\\"ST8\\\") {}\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings(\\n        address _countryParameters,\\n        address _treasury,\\n        address _infrastructure,\\n        address _resources,\\n        address _missiles,\\n        address _senate,\\n        address _warbucks,\\n        address _bonusResources\\n    ) public onlyOwner {\\n        countryParameters = _countryParameters;\\n        treasury = _treasury;\\n        infrastructure = _infrastructure;\\n        resources = _resources;\\n        missiles = _missiles;\\n        senate = _senate;\\n        warbucks = _warbucks;\\n        bonusResources = _bonusResources;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings2(\\n        address _improvements1,\\n        address _improvements2,\\n        address _improvements3,\\n        address _improvements4,\\n        address _wonders1,\\n        address _wonders2,\\n        address _wonders3,\\n        address _wonders4\\n    ) public onlyOwner {\\n        improvements1 = _improvements1;\\n        improvements2 = _improvements2;\\n        improvements3 = _improvements3;\\n        improvements4 = _improvements4;\\n        wonders1 = _wonders1;\\n        wonders2 = _wonders2;\\n        wonders3 = _wonders3;\\n        wonders4 = _wonders4;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings3(\\n        address _military,\\n        address _forces,\\n        address _navy,\\n        address _navy2,\\n        address _navalActions,\\n        address _fighters,\\n        address _bombers\\n    ) public onlyOwner {\\n        military = _military;\\n        forces = _forces;\\n        navy = _navy;\\n        navy2 = _navy2;\\n        navalActions = _navalActions;\\n        fighters = _fighters;\\n        bombers = _bombers;\\n    }\\n\\n    ///@dev this is a public function that allows the caller to mint a nation\\n    ///@notice this function allows the caller to mint a nation\\n    ///@notice each wallet address can only contain one country\\n    ///@param ruler this is a string that is the nation ruler name\\n    ///@param nationName this is a string that is the name of the nation\\n    ///@param capitalCity this is a string that is the name of the capital city of the nation\\n    ///@param nationSlogan this is a string that represents that slogan of the nation\\n    function generateCountry(\\n        string memory ruler,\\n        string memory nationName,\\n        string memory capitalCity,\\n        string memory nationSlogan\\n    ) public nonReentrant {\\n        require(\\n            ownerCountryCount[msg.sender] < MAX_NATIONS_PER_WALLET,\\n            \\\"Cannot own more than 20 nations\\\"\\n        );\\n        require(bytes(ruler).length <= 64, \\\"Ruler Name too long\\\");\\n        require(bytes(nationName).length <= 64, \\\"Nation Name too long\\\");\\n        require(bytes(capitalCity).length <= 64, \\\"Capital Name too long\\\");\\n        require(bytes(nationSlogan).length <= 128, \\\"Slogan too long\\\");\\n        uint256 seedMoney = TreasuryContract(treasury).getSeedMoney();\\n        IWarBucks(warbucks).burnFromMint(msg.sender, seedMoney);\\n        _safeMint(msg.sender, countryId);\\n        idToOwner[countryId] = msg.sender;\\n        ownerCountryCount[msg.sender]++;\\n        ownerCountryIds[msg.sender].push(countryId);\\n        BombersContract(bombers).generateBombers(countryId);\\n        CountryParametersContract(countryParameters).generateCountryParameters(\\n            countryId,\\n            ruler,\\n            nationName,\\n            capitalCity,\\n            nationSlogan\\n        );\\n        FightersContract(fighters).generateFighters(countryId);\\n        ForcesContract(forces).generateForces(countryId);\\n        MissilesContract(missiles).generateMissiles(countryId);\\n        ImprovementsContract1(improvements1).generateImprovements(countryId);\\n        ImprovementsContract2(improvements2).generateImprovements(countryId);\\n        ImprovementsContract3(improvements3).generateImprovements(countryId);\\n        ImprovementsContract4(improvements4).generateImprovements(countryId);\\n        InfrastructureContract(infrastructure).generateInfrastructure(\\n            countryId\\n        );\\n        MilitaryContract(military).generateMilitary(countryId);\\n        NavalActionsContract(navalActions).generateNavalActions(countryId);\\n        NavyContract(navy).generateNavy(countryId);\\n        NavyContract2(navy2).generateNavy2(countryId);\\n        ResourcesContract(resources).generateResources(countryId);\\n        BonusResourcesContract(bonusResources).generateBonusResources(\\n            countryId\\n        );\\n        SenateContract(senate).generateVoter(countryId);\\n        TreasuryContract(treasury).generateTreasury(countryId);\\n        WondersContract1(wonders1).generateWonders1(countryId);\\n        WondersContract2(wonders2).generateWonders2(countryId);\\n        WondersContract3(wonders3).generateWonders3(countryId);\\n        WondersContract4(wonders4).generateWonders4(countryId);\\n        emit NationCreated(nationName, ruler, countryId, msg.sender);\\n        countryId++;\\n    }\\n\\n    ///@dev this function will return the current country Id that gets incremented every time a county is minted\\n    ///@return uint256 will be number of countries minted\\n    function getCountryCount() public view returns (uint256) {\\n        return countryId;\\n    }\\n\\n    function checkOwnership(\\n        uint256 nationId,\\n        address caller\\n    ) public view returns (bool) {\\n        address owner = ownerOf(nationId);\\n        if (owner == caller) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function tokensOfOwner(\\n        address owner\\n    ) public view returns (uint256[] memory) {\\n        return ownerCountryIds[owner];\\n    }\\n\\n    function deleteNation(uint256 nationId) public nonReentrant {\\n        require(_isApprovedOrOwner(msg.sender, nationId), \\\"Not authorized\\\");\\n\\n        address owner = ownerOf(nationId);\\n\\n        uint256[] storage ownedIds = ownerCountryIds[owner];\\n        for (uint256 i = 0; i < ownedIds.length; i++) {\\n            if (ownedIds[i] == nationId) {\\n                ownedIds[i] = ownedIds[ownedIds.length - 1];\\n                ownedIds.pop();\\n                break;\\n            }\\n        }\\n\\n        ownerCountryCount[owner]--;\\n        delete idToOwner[nationId];\\n\\n        _burn(nationId);\\n\\n        emit Transfer(owner, address(0), nationId);\\n    }\\n\\n    ///@dev this function will transfer the ownership of a nation to another address\\n    ///@param nationId this is the id of the nation that will be transferred\\n    ///@param newOwner this is the address of the new owner of the nation\\n    ///@notice this function will only transfer the ownership of the nation to another address\\n    function transferNation(uint256 nationId, address newOwner) public {\\n        require(newOwner != address(0), \\\"Cannot transfer to zero address\\\");\\n        require(newOwner != msg.sender, \\\"Cannot transfer to yourself\\\");\\n        require(_isApprovedOrOwner(msg.sender, nationId), \\\"Not authorized\\\");\\n\\n        address previousOwner = ownerOf(nationId);\\n\\n        _transfer(previousOwner, newOwner, nationId);\\n\\n        ownerCountryCount[previousOwner]--;\\n        ownerCountryCount[newOwner]++;\\n\\n        uint256[] storage ownedIds = ownerCountryIds[previousOwner];\\n        for (uint256 i = 0; i < ownedIds.length; i++) {\\n            if (ownedIds[i] == nationId) {\\n                ownedIds[i] = ownedIds[ownedIds.length - 1];\\n                ownedIds.pop();\\n                break;\\n            }\\n        }\\n\\n        ownerCountryIds[newOwner].push(nationId);\\n\\n        emit Transfer(previousOwner, newOwner, nationId);\\n    }\\n\\n    ///to my darling, i made this for you because without you this game does not exist\\n    ///thank you for making this dream real\\n    function loveLetter() public pure returns (string memory) {\\n        return\\n            \\\"To my darling wife, I made this for you. Without you this game does not exist. Thank you for being by my side for every step and making this dream real. I hope playing this will enrich your life because you enrich mine. My love for you is immutable.\\\";\\n    }\\n}\\n\",\"keccak256\":\"0xeb208ef509d6f22a016d7da1d8204525a0c46a72f8ceae1e8e057f42223b6e27\",\"license\":\"BUSL-1.1\"},\"contracts/CountryParameters.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"./CountryMinter.sol\\\";\\nimport \\\"./Senate.sol\\\";\\nimport \\\"./KeeperFile.sol\\\";\\nimport \\\"./Wonders.sol\\\";\\nimport \\\"./Treasury.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n///@title CountryParametersContract\\n///@author OxSnosh\\n///@dev this contract will inferit from Chainlink VRF and OpenZeppelin Ownable\\ncontract CountryParametersContract is\\n    VRFConsumerBaseV2,\\n    Ownable,\\n    ReentrancyGuard\\n{\\n    address public spyAddress;\\n    address public senateAddress;\\n    uint256[] private s_randomWords;\\n    address public countryMinter;\\n    address public keeper;\\n    address public nuke;\\n    address public groundBattle;\\n    address public wonders1;\\n    address public treasury;\\n\\n    //chainlink variables\\n    VRFCoordinatorV2Interface public i_vrfCoordinator;\\n    uint64 private immutable i_subscriptionId;\\n    bytes32 private immutable i_gasLane;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private constant NUM_WORDS = 2;\\n\\n    CountryMinter mint;\\n    SenateContract senate;\\n    KeeperContract keep;\\n    WondersContract1 won1;\\n    TreasuryContract tres;\\n\\n    struct CountryParameters {\\n        uint256 id;\\n        string rulerName;\\n        string nationName;\\n        string capitalCity;\\n        string nationSlogan;\\n    }\\n\\n    struct CountrySettings {\\n        uint256 dayCreated;\\n        uint256 nationTeam;\\n        uint256 governmentType;\\n        uint256 dayGovernmentChanged;\\n        uint256 nationalReligion;\\n        uint256 dayReligionChanged;\\n        uint256 dayOfAnarchy;\\n    }\\n\\n    event RulerNameChanged(\\n        uint256 indexed countryId,\\n        string indexed newRulerName\\n    );\\n\\n    event NationNameChanged(\\n        uint256 indexed countryId,\\n        string indexed newNationName\\n    );\\n\\n    event CapitalCityChanged(\\n        uint256 indexed countryId,\\n        string indexed newCapitalCity\\n    );\\n\\n    event NationSloganChanged(\\n        uint256 indexed countryId,\\n        string indexed newNationSlogan\\n    );\\n\\n    event AllianceChanged(\\n        uint256 indexed countryId,\\n        string indexed newAlliance\\n    );\\n\\n    event TeamChanged(uint256 indexed countryId, uint256 indexed newTeam);\\n\\n    event GovernmentChanged(\\n        uint256 indexed countryId,\\n        uint256 indexed newGovernment\\n    );\\n\\n    event ReligionChanged(\\n        uint256 indexed countryId,\\n        uint256 indexed newReligion\\n    );\\n\\n    event AnarchyInflicted(uint256 indexed countryId);\\n\\n    mapping(uint256 => CountryParameters) public idToCountryParameters;\\n    mapping(uint256 => CountrySettings) public idToCountrySettings;\\n    mapping(uint256 => uint256) s_requestIdToRequestIndex;\\n    mapping(uint256 => uint256[]) public s_requestIndexToRandomWords;\\n    mapping(uint256 => uint256) private idToReligionPreference;\\n    mapping(uint256 => uint256) private idToGovernmentPreference;\\n\\n    modifier onlyNukeAndGroundBattle() {\\n        require(\\n            msg.sender == nuke || msg.sender == groundBattle,\\n            \\\"function only callable from nuke or battle contract\\\"\\n        );\\n        _;\\n    }\\n\\n    ///@dev the consructor will inherit parameters required to initialize the chainlinh VRF functionality\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint64 subscriptionId,\\n        bytes32 gasLane,\\n        uint32 callbackGasLimit\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n    }\\n\\n    function updateVRFCoordinator(\\n        address vrfCoordinatorV2\\n    ) public onlyOwner {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings(\\n        address _spy,\\n        address _countryMinter,\\n        address _senate,\\n        address _keeper,\\n        address _nuke,\\n        address _groundBattle,\\n        address _wonders1,\\n        address _treasury\\n    ) public onlyOwner {\\n        spyAddress = _spy;\\n        countryMinter = _countryMinter;\\n        mint = CountryMinter(_countryMinter);\\n        senateAddress = _senate;\\n        senate = SenateContract(_senate);\\n        keeper = _keeper;\\n        keep = KeeperContract(_keeper);\\n        nuke = _nuke;\\n        groundBattle = _groundBattle;\\n        wonders1 = _wonders1;\\n        won1 = WondersContract1(_wonders1);\\n        treasury = _treasury;\\n        tres = TreasuryContract(_treasury);\\n    }\\n\\n    modifier onlySpyContract() {\\n        require(\\n            msg.sender == spyAddress,\\n            \\\"function only callable from spy contract\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyCountryMinter() {\\n        require(\\n            msg.sender == countryMinter,\\n            \\\"function only callable from the country minter contract\\\"\\n        );\\n        _;\\n    }\\n\\n    ///@dev this is a public function but only callable from the counry minter contract\\n    ///@notice this function will get called only when a nation is minted\\n    ///@param id this will be the nations ID that is passed in from the country minter contact\\n    ///@param rulerName name passed in from country minter contract when a nation is minted\\n    ///@param nationName passed in from the country minter contract when a nation is minted\\n    ///@param capitalCity passed in from the country minter contract when a nation is minted\\n    ///@param nationSlogan passed in from the country minter contract when a nation is minted\\n    function generateCountryParameters(\\n        uint256 id,\\n        string memory rulerName,\\n        string memory nationName,\\n        string memory capitalCity,\\n        string memory nationSlogan\\n    ) public onlyCountryMinter {\\n        require(idToCountryParameters[id].id == 0, \\\"Already initialized\\\");\\n        CountryParameters memory newCountryParameters = CountryParameters(\\n            id,\\n            rulerName,\\n            nationName,\\n            capitalCity,\\n            nationSlogan\\n        );\\n        uint256 day = keep.getGameDay();\\n        CountrySettings memory newCountrySettings = CountrySettings(\\n            day,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0\\n        );\\n        idToCountryParameters[id] = newCountryParameters;\\n        idToCountrySettings[id] = newCountrySettings;\\n        fulfillRequest(id);\\n    }\\n\\n    mapping(uint256 => bool) public pendingRequests;\\n    mapping(uint256 => uint256) public pendingRequestTimestamp;\\n    uint256 public constant RETRY_TIMEOUT = 10 minutes;\\n\\n    ///@dev this is an internal function that will initalize the call for randomness from the chainlink VRF contract\\n    ///@param id is the nation ID of the nation being minted\\n    function fulfillRequest(uint256 id) internal {\\n        console.log(\\\"fulfillRequest called\\\");\\n        console.log(!pendingRequests[id], \\\"pendingRequests[id] is false\\\");\\n        require(!pendingRequests[id], \\\"Randomness already requested\\\");\\n\\n        console.log(\\\"requesting random words for id: \\\", id);\\n        console.log(\\n            \\\"i_vrfCoordinator: \\\",\\n            address(i_vrfCoordinator)\\n        );\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        console.log(\\\"requestId: \\\", requestId);\\n        s_requestIdToRequestIndex[requestId] = id;\\n        pendingRequests[id] = true;\\n        pendingRequestTimestamp[id] = block.timestamp;\\n\\n        emit VRFRequestSent(id, requestId);\\n    }\\n\\n    event VRFRequestSent(uint256 indexed id, uint256 indexed requestId);\\n\\n    function retryFulfillRequest(uint256 countryId) public {\\n        require(pendingRequests[countryId], \\\"No pending request\\\");\\n        require(\\n            block.timestamp >\\n                pendingRequestTimestamp[countryId] + RETRY_TIMEOUT,\\n            \\\"Retry not allowed yet\\\"\\n        );\\n\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n\\n        s_requestIdToRequestIndex[requestId] = countryId;\\n        pendingRequestTimestamp[countryId] = block.timestamp;\\n\\n        emit VRFRequestSent(countryId, requestId);\\n    }\\n\\n    ///@dev this is the function that gets called by the chainlink VRF contract\\n    ///@param requestId is the parameter that will allow the chainlink VRF to store a nations corresponding random words\\n    ///@param randomWords this array will contain 2 random numbers that will be used to determine a nations desired religion and government upon minting\\n    function fulfillRandomWords(\\n        uint256 requestId,\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 requestNumber = s_requestIdToRequestIndex[requestId];\\n\\n        s_requestIndexToRandomWords[requestNumber] = randomWords;\\n        s_randomWords = s_requestIndexToRandomWords[requestNumber];\\n\\n        uint256 religionPreference = ((randomWords[0] % 14) + 1);\\n        uint256 governmentPreference = ((randomWords[1] % 9) + 1);\\n\\n        idToReligionPreference[requestNumber] = religionPreference;\\n        idToGovernmentPreference[requestNumber] = governmentPreference;\\n    }\\n\\n    ///@dev this is public function that will allow a nation ruler to reset a nations name\\n    ///@notice use this function to reset a nations name\\n    ///@notice this function is only callable by the nation owner\\n    ///@param newNationName is the updated name for the nation ruler\\n    ///@param id is the nation ID for the update\\n    function setNationName(\\n        string memory newNationName,\\n        uint256 id\\n    ) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        require(bytes(newNationName).length <= 64, \\\"Nation Name too long\\\");\\n        tres.spendBalance(id, 20000000 * (10 ** 18));\\n        idToCountryParameters[id].nationName = newNationName;\\n        emit NationNameChanged(id, newNationName);\\n    }\\n\\n    ///@dev this is public function that will allow a nation ruler to reset a nations capital city name\\n    ///@notice use this function to reset a nations capital city name\\n    ///@notice this function is only callable by the nation owner\\n    ///@param newCapitalCity is the updated name for the nation ruler\\n    ///@param id is the nation ID for the update\\n    function setCapitalCity(string memory newCapitalCity, uint256 id) public {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        require(bytes(newCapitalCity).length <= 64, \\\"Capital Name too long\\\");\\n        idToCountryParameters[id].capitalCity = newCapitalCity;\\n        emit CapitalCityChanged(id, newCapitalCity);\\n    }\\n\\n    ///@dev this is public function that will allow a nation ruler to reset a nations slogan\\n    ///@notice use this function to reset a nations slogan\\n    ///@notice this function is only callable by the nation owner\\n    ///@param newNationSlogan is the updated name for the nation ruler\\n    ///@param id is the nation ID for the update\\n    function setNationSlogan(string memory newNationSlogan, uint256 id) public {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        require(bytes(newNationSlogan).length <= 128, \\\"Slogan too long\\\");\\n        idToCountryParameters[id].nationSlogan = newNationSlogan;\\n        emit NationSloganChanged(id, newNationSlogan);\\n    }\\n\\n    ///@dev this is public function that will allow a nation ruler to set a team membership for the nation\\n    ///@notice use this function to set a team membership for the nation\\n    ///@notice this function is only callable by the nation owner\\n    ///@notice there are only 9 teams in the game, each team has senators that can sanction nations on that team from trading and send sending aid to eachother\\n    ///@param newTeam is the updated name for the nation ruler\\n    ///@param id is the nation ID for the update\\n    function setTeam(uint256 id, uint256 newTeam) public {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        require(newTeam <= 8, \\\"invalid team selection\\\");\\n        bool isSenator = senate.isSenator(id);\\n        require(isSenator == false, \\\"cannot chenge teams as a senator\\\");\\n        senate.updateTeam(id, newTeam);\\n        idToCountrySettings[id].nationTeam = newTeam;\\n        emit TeamChanged(id, newTeam);\\n    }\\n\\n    ///@dev this is public function that will allow a nation ruler to chenge their government type\\n    ///@notice use this function to reset a nations government type\\n    ///@notice this function is only callable by the nation owner\\n    ///@notice there are 10 government types each with different advantages\\n    ///@param newType is the updated type of government\\n    /** @notice for newType:\\n     * 0 = Anarchy\\n     * 1 = Capitalism\\n     * 2 = Communist\\n     * 3 = Democracy\\n     * 4 = Dictatorship\\n     * 5 = Federal Government\\n     * 6 = Monarchy\\n     * 7 = Republic\\n     * 8 = Revolutionary\\n     * 9 = Totalitarian\\n     * 10 = Transitional\\n     ***/\\n    ///@param id is the nation ID for the update\\n    function setGovernment(uint256 id, uint256 newType) public {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        uint256 gameDay = keep.getGameDay();\\n        uint256 anarchyDay = idToCountrySettings[id].dayOfAnarchy;\\n        bool falloutShelter = won1.getFalloutShelterSystem(id);\\n        if (falloutShelter) {\\n            require(\\n                (gameDay - anarchyDay) >= 4,\\n                \\\"nation in anarchy, must wait 4 days\\\"\\n            );\\n        } else {\\n            require(\\n                (gameDay - anarchyDay) >= 5,\\n                \\\"nation in anarchy, must wait 5 days\\\"\\n            );\\n        }\\n        uint256 dayOfChange = idToCountrySettings[id].dayGovernmentChanged;\\n        require(\\n            (gameDay - dayOfChange) >= 3,\\n            \\\"need to wait 3 days before changing\\\"\\n        );\\n        require(newType <= 10, \\\"invalid type\\\");\\n        require(newType > 0, \\\"invalid type\\\");\\n        idToCountrySettings[id].governmentType = newType;\\n        idToCountrySettings[id].dayGovernmentChanged = gameDay;\\n        emit GovernmentChanged(id, newType);\\n    }\\n\\n    ///@dev this is a public function but it is only callable from the spy contract\\n    ///@notice this is the function that the spy contract calls when a successful spy attack updates your desired government\\n    ///@param id is the nation id of the updated desired government\\n    ///@param newType is the updated government type\\n    function updateDesiredGovernment(\\n        uint256 id,\\n        uint256 newType\\n    ) public onlySpyContract {\\n        idToGovernmentPreference[id] = newType;\\n    }\\n\\n    ///@dev this is public function that will allow a nation ruler to chenge their religion type\\n    ///@notice use this function to reset a nations religion type\\n    ///@notice this function is only callable by the nation owner\\n    ///@notice there are 14 religion types\\n    ///@param newType is the updated name for the nation ruler\\n    ///@param id is the nation ID for the update\\n    function setReligion(uint256 id, uint256 newType) public {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        uint256 gameDay = keep.getGameDay();\\n        uint256 dayOfChange = idToCountrySettings[id].dayReligionChanged;\\n        require(\\n            (gameDay - dayOfChange) >= 3,\\n            \\\"need to wait 3 days before changing\\\"\\n        );\\n        require(newType > 0, \\\"invalid type\\\");\\n        require(newType <= 14, \\\"invalid type\\\");\\n        idToCountrySettings[id].nationalReligion = newType;\\n        idToCountrySettings[id].dayReligionChanged = gameDay;\\n        emit ReligionChanged(id, newType);\\n    }\\n\\n    ///@dev this is a public function but it is only callable from the spy contract\\n    ///@notice this is the function that the spy contract calls when a successful spy attack updates your desired religion\\n    ///@param id is the nation id of the updated desired religion\\n    ///@param newType is the updated religion type\\n    function updateDesiredReligion(\\n        uint256 id,\\n        uint256 newType\\n    ) public onlySpyContract {\\n        idToReligionPreference[id] = newType;\\n    }\\n\\n    function inflictAnarchy(uint256 id) public onlyNukeAndGroundBattle {\\n        uint256 gameDay = keep.getGameDay();\\n        idToCountrySettings[id].governmentType = 0;\\n        idToCountrySettings[id].dayOfAnarchy = gameDay;\\n        emit AnarchyInflicted(id);\\n        emit GovernmentChanged(id, 0);\\n    }\\n\\n    ///@dev this is a view funtion that will return the ruler name for a country\\n    ///@param countryId this is the ID for the nation being queried\\n    function getRulerName(\\n        uint256 countryId\\n    ) public view returns (string memory) {\\n        string memory ruler = idToCountryParameters[countryId].rulerName;\\n        return ruler;\\n    }\\n\\n    ///@dev this is a view funtion that will return the nation name for a country\\n    ///@param countryId this is the ID for the nation being queried\\n    function getNationName(\\n        uint256 countryId\\n    ) public view returns (string memory) {\\n        string memory nationName = idToCountryParameters[countryId].nationName;\\n        return nationName;\\n    }\\n\\n    ///@dev this is a view funtion that will return the capital city for a country\\n    ///@param countryId this is the ID for the nation being queried\\n    function getCapital(uint256 countryId) public view returns (string memory) {\\n        string memory capital = idToCountryParameters[countryId].capitalCity;\\n        return capital;\\n    }\\n\\n    ///@dev this is a view funtion that will return the slogan for a country\\n    ///@param countryId this is the ID for the nation being queried\\n    function getSlogan(uint256 countryId) public view returns (string memory) {\\n        string memory slogan = idToCountryParameters[countryId].nationSlogan;\\n        return slogan;\\n    }\\n\\n    ///@dev this is a view funtion that will return the team for a country\\n    ///@param countryId this is the ID for the nation being queried\\n    function getTeam(uint256 countryId) public view returns (uint256) {\\n        return idToCountrySettings[countryId].nationTeam;\\n    }\\n\\n    ///@dev this is a view funtion that will return the goverment type for a country\\n    ///@param countryId this is the ID for the nation being queried\\n    function getGovernmentType(\\n        uint256 countryId\\n    ) public view returns (uint256) {\\n        return idToCountrySettings[countryId].governmentType;\\n    }\\n\\n    ///@dev this is a view funtion that will return the religion type for a country\\n    ///@param countryId this is the ID for the nation being queried\\n    function getReligionType(uint256 countryId) public view returns (uint256) {\\n        return idToCountrySettings[countryId].nationalReligion;\\n    }\\n\\n    ///@dev this is a view funtion that will return the time a nation was minted\\n    ///@param countryId this is the ID for the nation being queried\\n    function getDayCreated(uint256 countryId) public view returns (uint256) {\\n        return idToCountrySettings[countryId].dayCreated;\\n    }\\n\\n    function setDesiredReligionAndGovernmentFromOwner(\\n        uint256 id,\\n        uint256 religion,\\n        uint256 government\\n    ) public onlyOwner {\\n        idToReligionPreference[id] = religion;\\n        idToGovernmentPreference[id] = government;\\n    }\\n\\n    ///@dev this is a view funtion that will return the government preference for a country\\n    ///@param id this is the ID for the nation being queried\\n    function getGovernmentPreference(\\n        uint256 id\\n    ) public view returns (uint256 preference) {\\n        return idToGovernmentPreference[id];\\n    }\\n\\n    ///@dev this is a view funtion that will return the religion preference for a country\\n    ///@param id this is the ID for the nation being queried\\n    function getReligionPreference(\\n        uint256 id\\n    ) public view returns (uint256 preference) {\\n        return idToReligionPreference[id];\\n    }\\n\\n    ///@dev this is a view funtion that will return the days since a religion and government change for a nation\\n    ///@param id this is the ID for the nation being queried\\n    ///@return uint256 will return an array with [0] as the days since governemtn change and [1] as days since religion change\\n    function getDaysSince(uint256 id) public view returns (uint256, uint256) {\\n        uint256 gameDay = keep.getGameDay();\\n        uint256 dayOfGovChange = idToCountrySettings[id].dayGovernmentChanged;\\n        uint256 daysSinceGovChange = gameDay - dayOfGovChange;\\n        uint256 dayReligionChanged = idToCountrySettings[id].dayReligionChanged;\\n        uint256 daysSinceReligionChange = gameDay - dayReligionChanged;\\n        return (daysSinceGovChange, daysSinceReligionChange);\\n    }\\n}\\n\\n/// @title AllianceManager\\n/// @author OxSnosh\\n/// @notice Manages alliances in the game with capped size and efficient member tracking.\\ncontract AllianceManager is Ownable {\\n    uint256 public constant MAX_ALLIANCE_MEMBERS = 1000;\\n    uint256 public constant MAX_JOIN_REQUESTS = 1000;\\n\\n    uint256 public allianceCounter;\\n    address public countryMinter;\\n    CountryMinter mint;\\n\\n    struct Alliance {\\n        uint256 id;\\n        string name;\\n        uint256 founderNationId;\\n        mapping(uint256 => bool) admins;\\n        mapping(uint256 => bool) isMember;\\n        mapping(uint256 => uint256) memberIndex;\\n        mapping(uint256 => string) nationToPlatoon;\\n        uint256[] members;\\n        uint256[] joinRequests;\\n        mapping(uint256 => bool) isJoinRequested;\\n    }\\n\\n    mapping(uint256 => Alliance) public alliances;\\n    mapping(uint256 => uint256) public nationToAlliance;\\n    mapping(uint256 => bool) public allianceExists;\\n\\n    event AllianceCreated(\\n        uint256 indexed allianceId,\\n        string name,\\n        uint256 founderNationId\\n    );\\n    event AllianceAdminAdded(\\n        uint256 indexed allianceId,\\n        uint256 indexed adminNationId\\n    );\\n    event AllianceAdminRemoved(\\n        uint256 indexed allianceId,\\n        uint256 indexed adminNationId\\n    );\\n    event NationRequestedToJoin(\\n        uint256 indexed allianceId,\\n        uint256 indexed nationId\\n    );\\n    event NationApprovedToJoin(\\n        uint256 indexed allianceId,\\n        uint256 indexed nationId\\n    );\\n    event NationRemovedFromAlliance(\\n        uint256 indexed allianceId,\\n        uint256 indexed nationId\\n    );\\n    event NationAssignedToPlatoon(\\n        uint256 indexed allianceId,\\n        uint256 indexed nationId,\\n        string platoonId\\n    );\\n    event NationJoinRequestRejected(\\n        uint256 indexed allianceId,\\n        uint256 indexed nationId\\n    );\\n\\n    function settings(address _countryMinter) public onlyOwner {\\n        countryMinter = _countryMinter;\\n        mint = CountryMinter(_countryMinter);\\n    }\\n\\n    modifier onlyAllianceFounderOrAdmin(uint256 allianceId, uint256 nationId) {\\n        Alliance storage alliance = alliances[allianceId];\\n        require(\\n            nationId == alliance.founderNationId || alliance.admins[nationId],\\n            \\\"Not authorized\\\"\\n        );\\n        _;\\n    }\\n\\n    function createAlliance(\\n        string memory name,\\n        uint256 founderNationId\\n    ) external {\\n        require(\\n            mint.checkOwnership(founderNationId, msg.sender),\\n            \\\"Not the owner of the nation\\\"\\n        );\\n        require(bytes(name).length <= 64, \\\"Alliance name too long\\\");\\n        require(\\n            nationToAlliance[founderNationId] == 0,\\n            \\\"Nation already in an alliance\\\"\\n        );\\n\\n        allianceCounter++;\\n        uint256 id = allianceCounter;\\n\\n        Alliance storage newAlliance = alliances[id];\\n        newAlliance.id = id;\\n        newAlliance.name = name;\\n        newAlliance.founderNationId = founderNationId;\\n        newAlliance.admins[founderNationId] = true;\\n        newAlliance.isMember[founderNationId] = true;\\n        newAlliance.memberIndex[founderNationId] = 0;\\n        newAlliance.members.push(founderNationId);\\n\\n        nationToAlliance[founderNationId] = id;\\n        allianceExists[id] = true;\\n\\n        emit AllianceCreated(id, name, founderNationId);\\n    }\\n\\n    function addAdmin(\\n        uint256 allianceId,\\n        uint256 adminNationId,\\n        uint256 callerNationId\\n    ) external onlyAllianceFounderOrAdmin(allianceId, callerNationId) {\\n        require(\\n            mint.checkOwnership(callerNationId, msg.sender),\\n            \\\"Not the owner of the nation\\\"\\n        );\\n        require(\\n            alliances[allianceId].isMember[adminNationId],\\n            \\\"Nominee must be a member of the alliance\\\"\\n        );\\n        alliances[allianceId].admins[adminNationId] = true;\\n        emit AllianceAdminAdded(allianceId, adminNationId);\\n    }\\n\\n    function removeAdmin(\\n        uint256 allianceId,\\n        uint256 adminNationId,\\n        uint256 callerNationId\\n    ) external onlyAllianceFounderOrAdmin(allianceId, callerNationId) {\\n        require(\\n            mint.checkOwnership(callerNationId, msg.sender),\\n            \\\"Not the owner of the nation\\\"\\n        );\\n        require(\\n            adminNationId != alliances[allianceId].founderNationId,\\n            \\\"Cannot remove founder\\\"\\n        );\\n        alliances[allianceId].admins[adminNationId] = false;\\n        emit AllianceAdminRemoved(allianceId, adminNationId);\\n    }\\n\\n    function requestToJoinAlliance(\\n        uint256 allianceId,\\n        uint256 nationId\\n    ) external {\\n        require(\\n            mint.checkOwnership(nationId, msg.sender),\\n            \\\"Not the owner of the nation\\\"\\n        );\\n        Alliance storage alliance = alliances[allianceId];\\n        require(nationToAlliance[nationId] == 0, \\\"Already in an alliance\\\");\\n        require(\\n            alliance.joinRequests.length < MAX_JOIN_REQUESTS,\\n            \\\"Join request limit reached\\\"\\n        );\\n        require(!alliance.isJoinRequested[nationId], \\\"Already requested\\\");\\n\\n        alliance.joinRequests.push(nationId);\\n        alliance.isJoinRequested[nationId] = true;\\n\\n        emit NationRequestedToJoin(allianceId, nationId);\\n    }\\n\\n    function approveNationJoin(\\n        uint256 allianceId,\\n        uint256 nationId,\\n        uint256 callerNationId\\n    ) external onlyAllianceFounderOrAdmin(allianceId, callerNationId) {\\n        require(\\n            mint.checkOwnership(callerNationId, msg.sender),\\n            \\\"Not the owner of the nation\\\"\\n        );\\n\\n        Alliance storage alliance = alliances[allianceId];\\n        require(\\n            nationToAlliance[nationId] == 0,\\n            \\\"Nation already in an alliance\\\"\\n        );\\n        require(alliance.isJoinRequested[nationId], \\\"No join request\\\");\\n        require(\\n            alliance.members.length < MAX_ALLIANCE_MEMBERS,\\n            \\\"Alliance full\\\"\\n        );\\n\\n        uint256[] storage requests = alliance.joinRequests;\\n        for (uint256 i = 0; i < requests.length; i++) {\\n            if (requests[i] == nationId) {\\n                requests[i] = requests[requests.length - 1];\\n                requests.pop();\\n                break;\\n            }\\n        }\\n        delete alliance.isJoinRequested[nationId];\\n\\n        alliance.memberIndex[nationId] = alliance.members.length;\\n        alliance.members.push(nationId);\\n        alliance.isMember[nationId] = true;\\n        nationToAlliance[nationId] = allianceId;\\n\\n        emit NationApprovedToJoin(allianceId, nationId);\\n    }\\n\\n    function rejectJoinRequest(\\n        uint256 allianceId,\\n        uint256 nationId,\\n        uint256 callerNationId\\n    ) external onlyAllianceFounderOrAdmin(allianceId, callerNationId) {\\n        require(\\n            mint.checkOwnership(callerNationId, msg.sender),\\n            \\\"Not the owner of the nation\\\"\\n        );\\n\\n        Alliance storage alliance = alliances[allianceId];\\n        require(\\n            alliance.isJoinRequested[nationId],\\n            \\\"Nation did not request to join\\\"\\n        );\\n\\n        uint256[] storage requests = alliance.joinRequests;\\n        for (uint256 i = 0; i < requests.length; i++) {\\n            if (requests[i] == nationId) {\\n                requests[i] = requests[requests.length - 1];\\n                requests.pop();\\n                break;\\n            }\\n        }\\n        delete alliance.isJoinRequested[nationId];\\n\\n        emit NationJoinRequestRejected(allianceId, nationId);\\n    }\\n\\n    function removeNationFromAlliance(\\n        uint256 allianceId,\\n        uint256 nationId,\\n        uint256 callerNationId\\n    ) external onlyAllianceFounderOrAdmin(allianceId, callerNationId) {\\n        require(\\n            mint.checkOwnership(callerNationId, msg.sender),\\n            \\\"Not the owner of the nation\\\"\\n        );\\n        Alliance storage alliance = alliances[allianceId];\\n        require(\\n            nationToAlliance[nationId] == allianceId,\\n            \\\"Nation not in this alliance\\\"\\n        );\\n\\n        uint256 index = alliance.memberIndex[nationId];\\n        uint256 lastMemberId = alliance.members[alliance.members.length - 1];\\n        alliance.members[index] = lastMemberId;\\n        alliance.memberIndex[lastMemberId] = index;\\n        alliance.members.pop();\\n\\n        delete nationToAlliance[nationId];\\n        delete alliance.isMember[nationId];\\n        delete alliance.admins[nationId];\\n        delete alliance.nationToPlatoon[nationId];\\n        delete alliance.memberIndex[nationId];\\n\\n        emit NationRemovedFromAlliance(allianceId, nationId);\\n    }\\n\\n    function leaveAlliance(uint256 nationId) external {\\n        require(\\n            mint.checkOwnership(nationId, msg.sender),\\n            \\\"Not the owner of the nation\\\"\\n        );\\n        uint256 allianceId = nationToAlliance[nationId];\\n        require(allianceId != 0, \\\"Nation not in any alliance\\\");\\n        Alliance storage alliance = alliances[allianceId];\\n        require(alliance.isMember[nationId], \\\"Not a member\\\");\\n\\n        if (alliance.admins[nationId]) {\\n            bool hasOtherAdmin = false;\\n            for (uint256 i = 0; i < alliance.members.length; i++) {\\n                uint256 memberId = alliance.members[i];\\n                if (memberId != nationId && alliance.admins[memberId]) {\\n                    hasOtherAdmin = true;\\n                    break;\\n                }\\n            }\\n            require(hasOtherAdmin, \\\"No other admin in alliance\\\");\\n        }\\n\\n        require(\\n            alliance.founderNationId != nationId,\\n            \\\"Transfer founder role before leaving\\\"\\n        );\\n\\n        uint256 index = alliance.memberIndex[nationId];\\n        uint256 lastMemberId = alliance.members[alliance.members.length - 1];\\n        alliance.members[index] = lastMemberId;\\n        alliance.memberIndex[lastMemberId] = index;\\n        alliance.members.pop();\\n\\n        delete alliance.admins[nationId];\\n        delete alliance.isMember[nationId];\\n        delete alliance.memberIndex[nationId];\\n        delete alliance.nationToPlatoon[nationId];\\n        delete nationToAlliance[nationId];\\n\\n        emit NationRemovedFromAlliance(allianceId, nationId);\\n    }\\n\\n    function assignNationToPlatoon(\\n        uint256 allianceId,\\n        uint256 nationId,\\n        string memory platoonId,\\n        uint256 callerNationId\\n    ) external onlyAllianceFounderOrAdmin(allianceId, callerNationId) {\\n        require(\\n            mint.checkOwnership(callerNationId, msg.sender),\\n            \\\"Not the owner of the nation\\\"\\n        );\\n        require(\\n            nationToAlliance[nationId] == allianceId,\\n            \\\"Nation not in this alliance\\\"\\n        );\\n\\n        alliances[allianceId].nationToPlatoon[nationId] = platoonId;\\n        emit NationAssignedToPlatoon(allianceId, nationId, platoonId);\\n    }\\n\\n    function transferFounder(\\n        uint256 allianceId,\\n        uint256 newFounderNationId,\\n        uint256 callerNationId\\n    ) external {\\n        require(\\n            mint.checkOwnership(callerNationId, msg.sender),\\n            \\\"Not the owner of the nation\\\"\\n        );\\n        Alliance storage alliance = alliances[allianceId];\\n        require(\\n            alliance.founderNationId == callerNationId,\\n            \\\"Only founder can transfer ownership\\\"\\n        );\\n        require(\\n            alliance.isMember[newFounderNationId],\\n            \\\"New founder must be a member\\\"\\n        );\\n\\n        alliance.founderNationId = newFounderNationId;\\n    }\\n\\n    function deleteAlliance(\\n        uint256 allianceId,\\n        uint256 callerNationId\\n    ) external {\\n        require(\\n            mint.checkOwnership(callerNationId, msg.sender),\\n            \\\"Not the owner of the nation\\\"\\n        );\\n        Alliance storage alliance = alliances[allianceId];\\n        require(\\n            alliance.founderNationId == callerNationId,\\n            \\\"Only founder can delete alliance\\\"\\n        );\\n        require(\\n            alliance.members.length == 1 &&\\n                alliance.members[0] == callerNationId,\\n            \\\"Must be sole member\\\"\\n        );\\n\\n        delete nationToAlliance[callerNationId];\\n        delete alliance.admins[callerNationId];\\n        delete alliance.isMember[callerNationId];\\n        delete alliance.nationToPlatoon[callerNationId];\\n\\n        delete alliances[allianceId];\\n        delete allianceExists[allianceId];\\n    }\\n\\n    function getAllianceMembers(\\n        uint256 allianceId\\n    ) external view returns (uint256[] memory) {\\n        return alliances[allianceId].members;\\n    }\\n\\n    function getJoinRequests(\\n        uint256 allianceId\\n    ) external view returns (uint256[] memory) {\\n        return alliances[allianceId].joinRequests;\\n    }\\n\\n    function getNationAlliance(\\n        uint256 nationId\\n    ) external view returns (uint256) {\\n        return nationToAlliance[nationId];\\n    }\\n\\n    function getNationAllianceAndPlatoon(\\n        uint256 nationId\\n    ) external view returns (uint256, string memory, string memory) {\\n        uint256 alliance = nationToAlliance[nationId];\\n        string memory platoon = alliance > 0\\n            ? alliances[alliance].nationToPlatoon[nationId]\\n            : \\\"\\\";\\n        string memory allianceName = alliance > 0\\n            ? alliances[alliance].name\\n            : \\\"\\\";\\n        return (alliance, platoon, allianceName);\\n    }\\n\\n    function isNationAllianceAdmin(\\n        uint256 allianceId,\\n        uint256 nationId\\n    ) external view returns (bool) {\\n        return alliances[allianceId].admins[nationId];\\n    }\\n\\n    function isMemberOfAlliance(\\n        uint256 allianceId,\\n        uint256 nationId\\n    ) public view returns (bool) {\\n        return alliances[allianceId].isMember[nationId];\\n    }\\n}\\n\",\"keccak256\":\"0xbc8ab192ee9d0de0409499caf030dee7e6d1e393145583ef94f698f68a615de7\",\"license\":\"BUSL-1.1\"},\"contracts/Crime.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"./Infrastructure.sol\\\";\\nimport \\\"./Improvements.sol\\\";\\nimport \\\"./CountryParameters.sol\\\";\\nimport \\\"./Wonders.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n///@title CrimeContract\\n///@author OxSnosh\\n///@notice this contract will calculate the number of criminals in a nations population\\ncontract CrimeContract is Ownable {\\n    address public infrastructure;\\n    address public improvements1;\\n    address public improvements2;\\n    address public improvements3;\\n    address public improvements4;\\n    address public parameters;\\n    address public wonders2;\\n\\n    InfrastructureContract inf;\\n    ImprovementsContract1 imp1;\\n    ImprovementsContract2 imp2;\\n    ImprovementsContract3 imp3;\\n    ImprovementsContract4 imp4;\\n    CountryParametersContract cp;\\n    WondersContract2 won2;\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings(\\n        address _infrastructure,\\n        address _improvements1,\\n        address _improvements2,\\n        address _improvements3,\\n        address _improvements4,\\n        address _parameters,\\n        address _wonders2\\n    ) public onlyOwner {\\n        infrastructure = _infrastructure;\\n        inf = InfrastructureContract(_infrastructure);\\n        improvements1 = _improvements1;\\n        imp1 = ImprovementsContract1(_improvements1);\\n        improvements2 = _improvements2;\\n        imp2 = ImprovementsContract2(_improvements2);\\n        improvements3 = _improvements3;\\n        imp3 = ImprovementsContract3(_improvements3);\\n        parameters = _parameters;\\n        improvements4 = _improvements4;\\n        imp4 = ImprovementsContract4(_improvements4);\\n        cp = CountryParametersContract(_parameters);\\n        wonders2 = _wonders2;\\n        won2 = WondersContract2(_wonders2);\\n    }\\n\\n    ///@dev this is a public view function that will calculate the number of criminals in a nations population\\n    ///@notice this will calulate the number of criminals in a nations population\\n    ///@notice criminals will reduce the amount of your tax paying citizens\\n    ///@notice you will also lose population happiness as your criminal population increases\\n    ///@notice jails, labor camps, border walls and prisons will reduce the number of criminals in your nation\\n    ///@param id this is the nation ID for the nation being queried\\n    ///@return uint256 this function will return the number of criminals in your population\\n    function getCriminalCount(\\n        uint256 id\\n    ) public view returns (uint256, uint256, uint256) {\\n        uint256 totalPopulation = inf.getTotalPopulationCount(id);\\n        uint256 crimeIndex = getCrimeIndex(id);\\n        uint256 criminalPercentage = (crimeIndex + 1);\\n        uint256 baseCriminalCount = ((totalPopulation * criminalPercentage) /\\n            100);\\n        uint256 rehabs = imp3.getRehabilitationFacilityCount(id);\\n        uint256 rehabilitatedCitizens = (rehabs * 1000);\\n        if (baseCriminalCount <= rehabilitatedCitizens) {\\n            rehabilitatedCitizens = baseCriminalCount;\\n            baseCriminalCount = 0;\\n        } else {\\n            baseCriminalCount = baseCriminalCount - rehabilitatedCitizens;\\n        }\\n        (uint256 criminalCount, uint256 incarcerated) = incarcerateCriminals(baseCriminalCount, id);\\n        return (criminalCount, rehabilitatedCitizens, incarcerated);\\n    }\\n\\n    function incarcerateCriminals(\\n        uint256 baseCriminalCount,\\n        uint256 countryId\\n    ) public view returns (uint256, uint256) {\\n        uint256 jailCount = imp2.getJailCount(countryId);\\n        uint256 laborCamps = imp2.getLaborCampCount(countryId);\\n        uint256 prisons = imp3.getPrisonCount(countryId);\\n        uint256 incarceratedCriminals = 0;\\n        uint256 roomForIncarceration = ((jailCount * 500) +\\n            (laborCamps * 200) +\\n            (prisons * 5000));\\n        if (baseCriminalCount <= roomForIncarceration) {\\n            incarceratedCriminals = baseCriminalCount;\\n            baseCriminalCount = 0;\\n        } else {\\n            baseCriminalCount = baseCriminalCount - roomForIncarceration;\\n            incarceratedCriminals = roomForIncarceration;\\n        }\\n        uint256 criminalCountPercentageModifier = 100;\\n        uint256 borderWalls = imp1.getBorderWallCount(countryId);\\n        if (borderWalls > 0) {\\n            criminalCountPercentageModifier -= borderWalls;\\n        }\\n        uint256 criminalCount = ((baseCriminalCount *\\n            criminalCountPercentageModifier) / 100);\\n        return (criminalCount, incarceratedCriminals);\\n    }\\n\\n    ///@dev this function will take your nation's crime prevention score and return a crime index\\n    ///@notice the higher your crime prevention score the lower your crime index\\n    ///@notice the higher your crime index the more criminals you will have in your population\\n    ///@param id this is the nation ID of the country being queried\\n    ///@return uint256 this is crime index of the nation\\n    ///@notice the percentage of your population that is criminals = crime index +1\\n    function getCrimeIndex(uint256 id) public view returns (uint256) {\\n        uint256 cps = getCrimePreventionScore(id);\\n        uint256 crimeIndex;\\n        if (cps < 200) {\\n            crimeIndex = 6;\\n        } else if (cps < 250) {\\n            crimeIndex = 5;\\n        } else if (cps < 300) {\\n            crimeIndex = 4;\\n        } else if (cps < 350) {\\n            crimeIndex = 3;\\n        } else if (cps < 400) {\\n            crimeIndex = 2;\\n        } else if (cps < 500) {\\n            crimeIndex = 1;\\n        } else {\\n            crimeIndex = 0;\\n        }\\n        return crimeIndex;\\n    }\\n\\n    ///@dev this is a public view function that calculates a nations crime prevention score\\n    ///@notice this function calculates crime prevention score\\n    ///@notice the higher the CPS the lower the number of criminals in your population\\n    ///@param id is the nation ID of the nation being queried\\n    ///@return uint256 is the crime prevention score being returned by the function\\n    function getCrimePreventionScore(uint256 id) public view returns (uint256) {\\n        uint256 litPoints = getLiteracyPoints(id);\\n        uint256 improvementPoints = getImprovementPoints(id);\\n        uint256 taxRatePoints = getTaxRateCrimeMultiplier(id);\\n        uint256 governmentPoints = getPointsFromGovernmentType(id);\\n        uint256 getPointsFromInfrastructure = getPointsFromInfrastruture(id);\\n        uint256 populationPoints = getPointsFromPopulation(id);\\n        uint256 cps = (litPoints +\\n            improvementPoints +\\n            taxRatePoints +\\n            governmentPoints +\\n            getPointsFromInfrastructure +\\n            populationPoints);\\n        return cps;\\n    }\\n\\n    ///@dev this is a public view function that returns the literace rate of the nation\\n    ///@notice this function will return a nations literacy rate\\n    ///@param id is the nation ID of the country being queried\\n    ///@return uint256 is the literacy rate of the nation\\n    ///@notice literacy is increased by the amount of technology of a nation as well as the amount of schools and universities\\n    ///@notice increased literacy will increase crime prevention score\\n    function getLiteracy(uint256 id) public view returns (uint256) {\\n        uint256 tech = inf.getTechnologyCount(id);\\n        uint256 litBeforeModifiers;\\n        if (tech <= 50) {\\n            litBeforeModifiers = 20;\\n        } else {\\n            uint256 addedLiteracy = ((tech - 50) / 3);\\n            litBeforeModifiers = (20 + addedLiteracy);\\n        }\\n        uint256 schoolPoints = imp3.getSchoolCount(id);\\n        uint256 universities = imp3.getUniversityCount(id);\\n        uint256 universityPoints = (universities * 3);\\n        bool greatUniversity = won2.getGreatUniversity(id);\\n        if (greatUniversity == true) {\\n            universityPoints += 10;\\n        }\\n        uint256 literacy = (litBeforeModifiers +\\n            schoolPoints +\\n            universityPoints);\\n        if (literacy > 100) {\\n            literacy = 100;\\n        }\\n        return literacy;\\n    }\\n\\n    ///@dev this function is a public view function that will calculate the amount of points that a nations literace rate will add to the crime prevention score\\n    ///@notice literacy will increse the crime prevention score of a nation\\n    ///@notice crime prevention score points added will be 80% of literacy (max of 80 points added)\\n    ///@param id is the nation ID of the nation being queried\\n    ///@return uint256 is the amount of points being added to the crime prevention score\\n    function getLiteracyPoints(uint256 id) public view returns (uint256) {\\n        uint256 literacyPercentage = getLiteracy(id);\\n        uint256 litPoints = ((literacyPercentage * 80) / 100);\\n        return litPoints;\\n    }\\n\\n    ///@dev this is a publci view function that will calculate the amount of crime prevention score points from a nations improvements and tax rate\\n    ///@notice schools, universities, polive headquarters, casinos and red light districts all affect a nations crime prevention score\\n    ///@notice a nations tax rate will change the magnitude of these improvements affect on crime prevention score\\n    ///@notice the higher a tax rate the lower the crime prevention score will be and the more criminals a population will have\\n    ///@param id this is the nation ID of the nation being queried\\n    ///@return uint256 is the number of points added to crime prevention score from imrpovements and tax rate\\n    function getImprovementPoints(uint256 id) public view returns (uint256) {\\n        uint256 schools = imp3.getSchoolCount(id);\\n        uint256 universities = imp3.getUniversityCount(id);\\n        uint256 policeHqs = imp4.getPoliceHeadquartersCount(id);\\n        uint256 casinoCount = imp1.getCasinoCount(id);\\n        uint256 redLightDistricts = imp3.getRedLightDistrictCount(id);\\n        uint256 schoolPoints = (schools * 3);\\n        uint256 universityPoints = (universities * 10);\\n        uint256 policeHqPoints = (policeHqs * 2);\\n        uint256 casinoPoints = (casinoCount * 2);\\n        uint256 redLightDistrictPoints = (redLightDistricts * 2);\\n        uint256 improvementPoints = (8 +\\n            schoolPoints +\\n            universityPoints +\\n            policeHqPoints -\\n            casinoPoints -\\n            redLightDistrictPoints);\\n        return improvementPoints;\\n    }\\n\\n    ///@dev this a public view function that will return the multiplier used to adjust the affect that a nations tax rate will have on crime prevention score\\n    ///@notice the higher a nations tax rate the lower the multiplier will be and the lower the crime prevention score will be\\n    ///@param id is the nation ID of the nation being queried\\n    ///@return uint256 is the munliplier used to adjust the points added to crime prevention score from taxes and improvements\\n    function getTaxRateCrimeMultiplier(\\n        uint256 id\\n    ) public view returns (uint256) {\\n        uint256 taxRate = inf.getTaxRate(id);\\n        uint256 taxRateCrimeMultiplier;\\n        if (taxRate <= 15) {\\n            taxRateCrimeMultiplier = 35;\\n        } else if (taxRate == 16) {\\n            taxRateCrimeMultiplier = 34;\\n        } else if (taxRate == 17) {\\n            taxRateCrimeMultiplier = 33;\\n        } else if (taxRate == 18) {\\n            taxRateCrimeMultiplier = 32;\\n        } else if (taxRate == 19) {\\n            taxRateCrimeMultiplier = 31;\\n        } else if (taxRate == 20) {\\n            taxRateCrimeMultiplier = 30;\\n        } else if (taxRate == 21) {\\n            taxRateCrimeMultiplier = 29;\\n        } else if (taxRate == 22) {\\n            taxRateCrimeMultiplier = 28;\\n        } else if (taxRate == 23) {\\n            taxRateCrimeMultiplier = 27;\\n        } else if (taxRate == 24) {\\n            taxRateCrimeMultiplier = 26;\\n        } else if (taxRate == 25) {\\n            taxRateCrimeMultiplier = 25;\\n        } else if (taxRate == 26) {\\n            taxRateCrimeMultiplier = 24;\\n        } else if (taxRate == 27) {\\n            taxRateCrimeMultiplier = 23;\\n        } else if (taxRate == 28) {\\n            taxRateCrimeMultiplier = 22;\\n        } else if (taxRate == 29) {\\n            taxRateCrimeMultiplier = 21;\\n        } else if (taxRate == 30) {\\n            taxRateCrimeMultiplier = 20;\\n        }\\n        uint256 taxMultiplier = (taxRateCrimeMultiplier);\\n        return taxMultiplier;\\n    }\\n\\n    ///@dev this is a public view function that will add points to crime prevention score based on government type\\n    ///@notice different governmet types will affect a nations crime prevenetion score differently\\n    ///@param id is the nation ID of the nation being queried\\n    ///@return uint256 is the points added to crime prevention score from governemtn type\\n    function getPointsFromGovernmentType(\\n        uint256 id\\n    ) public view returns (uint256) {\\n        uint256 governmentPoints;\\n        uint256 gov = cp.getGovernmentType(id);\\n        if (gov == 0) {\\n            /** Anarchy */\\n            governmentPoints = 50;\\n        } else if (gov == 1) {\\n            /** Capitalist */\\n            governmentPoints = 110;\\n        } else if (gov == 2) {\\n            /** Communist */\\n            governmentPoints = 150;\\n        } else if (gov == 3) {\\n            /** Democracy */\\n            governmentPoints = 120;\\n        } else if (gov == 4) {\\n            /** Dictatorship */\\n            governmentPoints = 175;\\n        } else if (gov == 5) {\\n            /** Federal Goverment */\\n            governmentPoints = 160;\\n        } else if (gov == 6) {\\n            /** Monarchy */\\n            governmentPoints = 140;\\n        } else if (gov == 7) {\\n            /** Republic */\\n            governmentPoints = 165;\\n        } else if (gov == 8) {\\n            /** Revolutuionary */\\n            governmentPoints = 150;\\n        } else if (gov == 9) {\\n            /** Totalitarian State */\\n            governmentPoints = 190;\\n        } else {\\n            /** Transitional */\\n            governmentPoints = 100;\\n        }\\n        return governmentPoints;\\n    }\\n\\n    ///@dev this is a public view function that will return the crime prevention score points from infrastructure\\n    ///@notice more infrastructure will increase crime prevention score reducing criminals\\n    ///@param id is the nation ID for the countrtry being queried\\n    ///@return uint256 is the points added to crime prevention score from infrastructure\\n    function getPointsFromInfrastruture(\\n        uint256 id\\n    ) public view returns (uint256) {\\n        uint256 infra = inf.getInfrastructureCount(id);\\n        uint256 infraPoints = (infra / 400);\\n        return infraPoints;\\n    }\\n\\n    ///@dev this is a public view function that will add points to crime prevention score based on population\\n    ///@notice increased population will reduce crime prevention score\\n    ///@param id is the nation id of the nation being queries\\n    ///@return uint256 is the amount of points being added to crime prevention score\\n    function getPointsFromPopulation(uint256 id) public view returns (uint256) {\\n        uint256 population = inf.getTotalPopulationCount(id);\\n        uint256 populationPointsDeduction = (population / 250);\\n        if (populationPointsDeduction >= 350) {\\n            populationPointsDeduction = 350;\\n        }\\n        uint256 populationPoints = (350 - populationPointsDeduction);\\n        return populationPoints;\\n    }\\n}\\n\",\"keccak256\":\"0x058b9a90d0c4029bdb753446d9e80da4ee63833dd0111d8b59933d812c7e684b\",\"license\":\"BUSL-1.1\"},\"contracts/Environment.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"./CountryMinter.sol\\\";\\nimport \\\"./Resources.sol\\\";\\nimport \\\"./Infrastructure.sol\\\";\\nimport \\\"./Improvements.sol\\\";\\nimport \\\"./Wonders.sol\\\";\\nimport \\\"./Forces.sol\\\";\\nimport \\\"./Taxes.sol\\\";\\nimport \\\"./Nuke.sol\\\";\\nimport \\\"./CountryParameters.sol\\\";\\nimport \\\"./Missiles.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n///@title EnvironmentContract\\n///@author OxSnosh\\n///@notice this contract will calculate the environment score for a nation\\n///@dev this contact inherits from OpenZeppelin ownable \\ncontract EnvironmentContract is Ownable {\\n    address public countryMinter;\\n    address public resources;\\n    address public infrastructure;\\n    address public improvements1;\\n    address public improvements3;\\n    address public improvements4;\\n    address public wonders3;\\n    address public wonders4;\\n    address public forces;\\n    address public parameters;\\n    address public additionalTaxes;\\n    address public missiles;\\n    address public nukes;\\n    address public bonusResources;\\n\\n    CountryMinter mint;\\n    ResourcesContract res;\\n    InfrastructureContract inf;\\n    ImprovementsContract1 imp1;\\n    ImprovementsContract3 imp3;\\n    ImprovementsContract4 imp4;\\n    WondersContract3 won3;\\n    WondersContract4 won4;\\n    ForcesContract force;\\n    CountryParametersContract param;\\n    AdditionalTaxesContract addTax;\\n    MissilesContract mis;\\n    NukeContract nuke;\\n    BonusResourcesContract bonus;\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers \\n    function settings (\\n        address _countryMinter,\\n        address _resources,\\n        address _infrastructure,\\n        address _wonders3,\\n        address _wonders4,\\n        address _forces,\\n        address _parameters,\\n        address _additionalTaxes,\\n        address _missiles,\\n        address _nukes\\n    ) public onlyOwner {\\n        countryMinter = _countryMinter;\\n        mint = CountryMinter(_countryMinter);\\n        resources = _resources;\\n        res = ResourcesContract(_resources);\\n        infrastructure = _infrastructure;\\n        inf = InfrastructureContract(_infrastructure);\\n        wonders3 = _wonders3;\\n        won3 = WondersContract3(_wonders3);\\n        wonders4 = _wonders4;\\n        won4 = WondersContract4(_wonders4);\\n        forces = _forces;\\n        force = ForcesContract(_forces);\\n        parameters = _parameters;\\n        param = CountryParametersContract(_parameters);\\n        additionalTaxes = _additionalTaxes;\\n        addTax = AdditionalTaxesContract(_additionalTaxes);\\n        missiles = _missiles;\\n        mis = MissilesContract(_missiles);\\n        nukes = _nukes;\\n        nuke = NukeContract(_nukes);\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings2 (\\n        address _improvements1,\\n        address _improvements3,\\n        address _improvements4,\\n        address _bonusResources\\n    ) public onlyOwner {\\n        improvements1 = _improvements1;\\n        imp1 = ImprovementsContract1(_improvements1);\\n        improvements3 = _improvements3;\\n        imp3 = ImprovementsContract3(_improvements3);\\n        improvements4 = _improvements4;\\n        imp4 = ImprovementsContract4(_improvements4);\\n        bonusResources = _bonusResources;\\n        bonus = BonusResourcesContract(_bonusResources);\\n    }\\n\\n    ///@dev this is a public view function that will return the environment score for a nation\\n    ///@notice a higher environment score will decrease a nations happiness and population\\n    ///@param id is the nation ID of the nation being queried\\n    ///@return uint256 is the environement score for the nation (environment scores are 0 - 10)\\n    function getEnvironmentScore(uint256 id) public view returns (uint256) {\\n        uint256 environmentScore;\\n        int256 grossScore = getGrossEnvironmentScore(id);\\n        uint256 globalRadiation = nuke.getGlobalRadiation();\\n        if (globalRadiation > 5) {\\n            globalRadiation = 5;\\n        }\\n        uint256 radiationContainmentChambers = imp3\\n            .getRadiationContainmentChamberCount(id);\\n        if (radiationContainmentChambers >= globalRadiation) {\\n            globalRadiation = 0;\\n        } else {\\n            globalRadiation -= radiationContainmentChambers;\\n        }\\n        bool radiationCleanup = bonus.viewRadiationCleanup(id);\\n        if (radiationCleanup) {\\n            globalRadiation = (globalRadiation / 2);\\n        }\\n        if (grossScore <= 0) {\\n            environmentScore = 0;\\n        } else if (grossScore <= 10) {\\n            environmentScore = 1;\\n        } else if (grossScore <= 20) {\\n            environmentScore = 2;\\n        } else if (grossScore <= 30) {\\n            environmentScore = 3;\\n        } else if (grossScore <= 40) {\\n            environmentScore = 4;\\n        } else if (grossScore <= 50) {\\n            environmentScore = 5;\\n        } else if (grossScore <= 60) {\\n            environmentScore = 6;\\n        } else if (grossScore <= 70) {\\n            environmentScore = 7;\\n        } else if (grossScore <= 80) {\\n            environmentScore = 8;\\n        } else if (grossScore <= 90) {\\n            environmentScore = 9;\\n        } else if (grossScore > 90) {\\n            environmentScore = 10;\\n        }\\n        if ((globalRadiation + environmentScore) > 10) {\\n            environmentScore = 10;\\n        } else {\\n            environmentScore += globalRadiation;\\n        }\\n        return environmentScore;\\n    }\\n\\n    ///@dev this is a public view function that will generate the gross environment score\\n    ///@notice the gross environment score generated here will be converted into the environment score\\n    ///@notice every 10 points of gross score is equal to one point of environement\\n    ///@param id this is the nation ID being queried\\n    ///@return int256 this is the gross environment score\\n    function getGrossEnvironmentScore(uint256 id) public view returns (int256) {\\n        int256 scoreFromResources = getEnvironmentScoreFromResources(id);\\n        int256 scoreFromImprovementsAndWonders = getEnvironmentScoreFromImprovementsAndWonders(\\n                id\\n            );\\n        int256 scoreFromTech = getEnvironmentScoreFromTech(id);\\n        int256 scoreFromMilitaryRatio = getEnvironmentScoreFromMilitaryDensity(\\n            id\\n        );\\n        int256 scoreFromInfrastructure = getEnvironmentScoreFromInfrastructure(\\n            id\\n        );\\n        int256 scoreFromNukes = getScoreFromNukes(id);\\n        int256 scoreFromGovernment = getScoreFromGovernment(id);\\n        int256 grossEnvironmentScore = scoreFromResources +\\n            scoreFromImprovementsAndWonders +\\n            scoreFromTech +\\n            scoreFromMilitaryRatio +\\n            scoreFromInfrastructure +\\n            scoreFromNukes +\\n            scoreFromGovernment;\\n        return grossEnvironmentScore;\\n    }\\n\\n    ///@dev this is a public view function that will generate environment points from resources\\n    ///@notice coal, oil, iron, uranium, water and radiation cleanup resources will all affect environemnt\\n    ///@param id is the nation ID of the nation being queried\\n    ///@return int256 is gross environment points from resources\\n    function getEnvironmentScoreFromResources(uint256 id)\\n        public\\n        view\\n        returns (int256)\\n    {\\n        int256 pointsFromResources;\\n        bool isCoal = res.viewCoal(id);\\n        bool isOil = res.viewOil(id);\\n        bool isUranium = res.viewUranium(id);\\n        bool isWater = res.viewWater(id);\\n        bool isRadiationCleanup = bonus.viewRadiationCleanup(id);\\n        bool nationalEnvironmentalOffice = won3.getNationalEnvironmentOffice(id);\\n        if (isCoal && !nationalEnvironmentalOffice) {\\n            pointsFromResources += 10;\\n        }\\n        if (isOil && !nationalEnvironmentalOffice) {\\n            pointsFromResources += 10;\\n        }\\n        if (isUranium && !nationalEnvironmentalOffice) {\\n            pointsFromResources += 10;\\n        }\\n        if (isWater) {\\n            pointsFromResources -= 10;\\n        }\\n        if (isRadiationCleanup) {\\n            pointsFromResources -= 10;\\n        }\\n        return pointsFromResources;\\n    }\\n\\n    ///@dev this is a public view function that will generate gross environment score from improvements and wonders\\n    ///@notice this function will return gross environment points from improvements and wonders\\n    ///@notice border walls, munitions factories and red light districts affect a nations environment score\\n    ///@param id this is the nation ID of the nation being queried\\n    ///@return int256 is the gross environment points from improvements and wonders\\n    function getEnvironmentScoreFromImprovementsAndWonders(uint256 id)\\n        public\\n        view\\n        returns (int256)\\n    {\\n        uint256 borderWallCount = imp1.getBorderWallCount(id);\\n        uint256 munitionsFactories = imp4.getMunitionsFactoryCount(id);\\n        uint256 redLightDistricts = imp3.getRedLightDistrictCount(id);\\n        bool isNationalEnvironmentOffice = won3.getNationalEnvironmentOffice(\\n            id\\n        );\\n        bool isWeaponsResearchCenter = won4.getWeaponsResearchCenter(id);\\n        int256 pointsFromWondersAndImprovements;\\n        if (borderWallCount == 0) {\\n            pointsFromWondersAndImprovements += 0;\\n        } else if (borderWallCount == 1) {\\n            pointsFromWondersAndImprovements -= 10;\\n        } else if (borderWallCount == 2) {\\n            pointsFromWondersAndImprovements -= 20;\\n        } else if (borderWallCount == 3) {\\n            pointsFromWondersAndImprovements -= 30;\\n        } else if (borderWallCount == 4) {\\n            pointsFromWondersAndImprovements -= 40;\\n        } else if (borderWallCount == 5) {\\n            pointsFromWondersAndImprovements -= 50;\\n        }\\n        if (munitionsFactories == 0) {\\n            pointsFromWondersAndImprovements += 0;\\n        } else if (munitionsFactories == 1) {\\n            pointsFromWondersAndImprovements += 3;\\n        } else if (munitionsFactories == 2) {\\n            pointsFromWondersAndImprovements += 6;\\n        } else if (munitionsFactories == 3) {\\n            pointsFromWondersAndImprovements += 9;\\n        } else if (munitionsFactories == 4) {\\n            pointsFromWondersAndImprovements += 12;\\n        } else if (munitionsFactories == 5) {\\n            pointsFromWondersAndImprovements += 15;\\n        }\\n        if (redLightDistricts == 0) {\\n            pointsFromWondersAndImprovements += 0;\\n        } else if (redLightDistricts == 1) {\\n            pointsFromWondersAndImprovements += 5;\\n        } else if (redLightDistricts == 2) {\\n            pointsFromWondersAndImprovements += 10;\\n        }\\n        if (isNationalEnvironmentOffice) {\\n            pointsFromWondersAndImprovements -= 10;\\n        }\\n        if (isWeaponsResearchCenter) {\\n            pointsFromWondersAndImprovements += 10;\\n        }\\n        return pointsFromWondersAndImprovements;\\n    }\\n\\n    ///@dev this is a public view function that will generate gross environment score from a nations technology level\\n    ///@notice this function will return gross environment points from a nations technology level\\n    ///@notice a nations environment score will be penalized if the tech level is less than 6\\n    ///@param id this is the nation ID of the nation being queried\\n    ///@return int256 is the gross environment points from a nations technology level\\n    function getEnvironmentScoreFromTech(uint256 id)\\n        public\\n        view\\n        returns (int256)\\n    {\\n        uint256 techCount = inf.getTechnologyCount(id);\\n        int256 pointsFromTech;\\n        if (techCount >= 6) {\\n            pointsFromTech = -10;\\n        }\\n        return pointsFromTech;\\n    }\\n\\n    ///@dev this is a public view function that will generate gross environment score from a nations soldier to population ratio\\n    ///@notice this function will return gross environment points from a nations soldier to population ratio\\n    ///@notice a soldier to population ratio greater than 60% will result in an environmental penalty\\n    ///@param id this is the nation ID of the nation being queried\\n    ///@return int256 is the gross environment points from a nations soldier to population ratio   \\n    function getEnvironmentScoreFromMilitaryDensity(uint256 id)\\n        public\\n        view\\n        returns (int256)\\n    {\\n        int256 pointsFromMilitaryRatio;\\n        ( , bool environmentPenalty, ) = addTax.soldierToPopulationRatio(id);\\n        if (environmentPenalty) {\\n            pointsFromMilitaryRatio += 10;\\n        }\\n        return pointsFromMilitaryRatio;\\n    }\\n\\n    ///@dev this is a public view function that will generate gross environment score from a nations infrastructure to land ratio\\n    ///@notice this function will return gross environment points from a nations infrastructure to land ratio\\n    ///@notice a infrastructure to land ratio greater than 2:1 will result in an environmental penalty\\n    ///@param id this is the nation ID of the nation being queried\\n    ///@return int256 is the gross environment points from a nations infrastructure to land ratio  \\n    function getEnvironmentScoreFromInfrastructure(uint256 id)\\n        public\\n        view\\n        returns (int256)\\n    {\\n        int256 pointsFromInfrastructure;\\n        uint256 area = inf.getAreaOfInfluence(id);\\n        uint256 infra = inf.getInfrastructureCount(id);\\n        if ((infra / 2) >= area) {\\n            pointsFromInfrastructure += 10;\\n        }\\n        return pointsFromInfrastructure;\\n    }\\n\\n    ///@dev this is a public view function that will generate gross environment score from a nations nuke count\\n    ///@notice this function will return gross environment points from a nations nuke count\\n    ///@notice a nations environment score will go up 1 point every ten nukes owned\\n    ///@param id this is the nation ID of the nation being queried\\n    ///@return int256 is the gross environment points from a nations nuke count\\n    function getScoreFromNukes(uint256 id) public view returns (int256) {\\n        int256 pointsFromNukes;\\n        uint256 nukeCount = mis.getNukeCount(id);\\n        if (nukeCount > 0) {\\n            pointsFromNukes = (int256(nukeCount));\\n        }\\n        bool isLead = res.viewLead(id);\\n        if (isLead) {\\n            pointsFromNukes = (pointsFromNukes / 2);\\n        }\\n        return pointsFromNukes;\\n    }\\n\\n    ///@dev this is a public view function that will generate gross environment score from a nations government type\\n    ///@notice this function will return gross environment points from a nations government type\\n    ///@notice a nations environment score will go up 10 points for anarchy, communist, dictatorship, and transitional gov types\\n    ///@notice a nations environment score will go down 10 points for capitalist, democracy, and republic gov types\\n    ///@param id this is the nation ID of the nation being queried\\n    ///@return int256 is the gross environment points from a nations government\\n    function getScoreFromGovernment(uint256 id) public view returns (int256) {\\n        int256 pointsFromGovernmentType = 0;\\n        uint256 governmentType = param.getGovernmentType(id);\\n        if (\\n            //anarchy\\n            governmentType == 0 ||\\n            //communist            \\n            governmentType == 2 ||\\n            //dictatorship\\n            governmentType == 4 ||\\n            //transitional\\n            governmentType == 10\\n        ) {\\n            pointsFromGovernmentType += 10;\\n        } else if (\\n            //capitalist\\n            governmentType == 1 ||\\n            //democracy            \\n            governmentType == 3 ||\\n            //republic\\n            governmentType == 7\\n        ) {\\n            pointsFromGovernmentType -= 10;\\n        }\\n        return pointsFromGovernmentType;\\n    }\\n}\\n\",\"keccak256\":\"0x5ba88be63999ea47ea07f509e0a40c3597cd8ac7a67efd13d638dc5d67457d2d\",\"license\":\"BUSL-1.1\"},\"contracts/Fighters.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"./Treasury.sol\\\";\\nimport \\\"./Infrastructure.sol\\\";\\nimport \\\"./CountryMinter.sol\\\";\\nimport \\\"./Bombers.sol\\\";\\nimport \\\"./Resources.sol\\\";\\nimport \\\"./Improvements.sol\\\";\\nimport \\\"./Wonders.sol\\\";\\nimport \\\"./Navy.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n///@title FightersContract\\n///@author OxSnosh\\n///@notice this contract will store data for the figher aircraft owned by a nation\\ncontract FightersContract is Ownable {\\n    address public countryMinter;\\n    address public fightersMarket1;\\n    address public fightersMarket2;\\n    address public bombers;\\n    address public treasuryAddress;\\n    address public infrastructure;\\n    address public war;\\n    address public resources;\\n    address public improvements1;\\n    address public airBattle;\\n    address public wonders1;\\n    address public losses;\\n    address public navy;\\n\\n    CountryMinter mint;\\n    ResourcesContract res;\\n    ImprovementsContract1 imp1;\\n    WondersContract1 won1;\\n    NavyContract nav;\\n    BombersContract bomb;\\n\\n    struct Fighters {\\n        bool initialized;\\n        uint256 yak9Count;\\n        uint256 p51MustangCount;\\n        uint256 f86SabreCount;\\n        uint256 mig15Count;\\n        uint256 f100SuperSabreCount;\\n        uint256 f35LightningCount;\\n        uint256 f15EagleCount;\\n        uint256 su30MkiCount;\\n        uint256 f22RaptorCount;\\n    }\\n\\n    event Yak9Purchased(uint256 indexed id, uint256 indexed amount);\\n    event P51MustangPurchased(uint256 indexed id, uint256 indexed amount);\\n    event F86SabrePurchased(uint256 indexed id, uint256 indexed amount);\\n    event Mig15Purchased(uint256 indexed id, uint256 indexed amount);\\n    event F100SuperSabrePurchased(uint256 indexed id, uint256 indexed amount);\\n    event F35LightningPurchased(uint256 indexed id, uint256 indexed amount);\\n    event F15EaglePurchased(uint256 indexed id, uint256 indexed amount);\\n    event Su30MkiPurchased(uint256 indexed id, uint256 indexed amount);\\n    event F22RaptorPurchased(uint256 indexed id, uint256 indexed amount);\\n\\n    event Yak9Scrapped(uint256 indexed id, uint256 indexed amount);\\n    event P51MustangScrapped(uint256 indexed id, uint256 indexed amount);\\n    event F86SabreScrapped(uint256 indexed id, uint256 indexed amount);\\n    event Mig15Scrapped(uint256 indexed id, uint256 indexed amount);\\n    event F100SuperSabreScrapped(uint256 indexed id, uint256 indexed amount);\\n    event F35LightningScrapped(uint256 indexed id, uint256 indexed amount);\\n    event F15EagleScrapped(uint256 indexed id, uint256 indexed amount);\\n    event Su30MkiScrapped(uint256 indexed id, uint256 indexed amount);\\n    event F22RaptorScrapped(uint256 indexed id, uint256 indexed amount);\\n\\n    mapping(uint256 => Fighters) public idToFighters;\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings(\\n        address _countryMinter,\\n        address _fightersMarket1,\\n        address _fightersMarket2,\\n        address _treasuryAddress,\\n        address _war,\\n        address _infrastructure,\\n        address _resources,\\n        address _improvements1,\\n        address _airBattle,\\n        address _wonders1,\\n        address _losses\\n    ) public onlyOwner {\\n        countryMinter = _countryMinter;\\n        mint = CountryMinter(_countryMinter);\\n        resources = _resources;\\n        res = ResourcesContract(_resources);\\n        improvements1 = _improvements1;\\n        imp1 = ImprovementsContract1(_improvements1);\\n        fightersMarket1 = _fightersMarket1;\\n        fightersMarket2 = _fightersMarket2;\\n        treasuryAddress = _treasuryAddress;\\n        war = _war;\\n        infrastructure = _infrastructure;\\n        airBattle = _airBattle;\\n        wonders1 = _wonders1;\\n        won1 = WondersContract1(_wonders1);\\n        losses = _losses;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings2(address _navy, address _bombers) public onlyOwner {\\n        navy = _navy;\\n        nav = NavyContract(_navy);\\n        bombers = _bombers;\\n        bomb = BombersContract(_bombers);\\n    }\\n\\n    modifier onlyCountryMinter() {\\n        require(msg.sender == countryMinter, \\\"only countryMinter can call\\\");\\n        _;\\n    }\\n\\n    modifier onlyMarket() {\\n        require(\\n            msg.sender == fightersMarket1 || msg.sender == fightersMarket2,\\n            \\\"this function can only be called by market\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyLossesContract() {\\n        require(msg.sender == losses, \\\"only callable from losses contract\\\");\\n        _;\\n    }\\n\\n    ///@dev this function is a public function but only callable from the country minter contact when a country is minted\\n    ///@notice this function allows a nation to purchase fighter aircraft once a country is minted\\n    ///@param id this is the nation ID of the nation being minted\\n    function generateFighters(uint256 id) public onlyCountryMinter {\\n        require(\\n            idToFighters[id].initialized == false,\\n            \\\"fighters already initialized for this nation\\\"\\n        );\\n        Fighters memory newFighters = Fighters(true, 0, 0, 0, 0, 0, 0, 0, 0, 0);\\n        idToFighters[id] = newFighters;\\n    }\\n\\n    ///@notice this function will return the amount of defending Yak9's of a nation\\n    ///@param id is the nation ID of the nation\\n    ///@return uint256 is the number of defending Yak9 aircraft for the nation\\n    function getYak9Count(uint256 id) public view returns (uint256) {\\n        uint256 count = idToFighters[id].yak9Count;\\n        return count;\\n    }\\n\\n    ///@dev this function is only callable from the Fighter Market contracts\\n    ///@notice this function will increase the number of aircraft when they are purchased in the marketplace\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being purchased\\n    function increaseYak9Count(uint256 id, uint256 amount) public onlyMarket {\\n        idToFighters[id].yak9Count += amount;\\n        emit Yak9Purchased(id, amount);\\n    }\\n\\n    ///@dev this function is only callable from the losses contract\\n    ///@notice this function will decrease the amount of defending aircraft lost in a battle\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being destroyed\\n    function decreaseYak9Count(\\n        uint256 amount,\\n        uint256 id\\n    ) public onlyLossesContract {\\n        uint256 currentAmount = idToFighters[id].yak9Count;\\n        if (currentAmount >= amount) {\\n            idToFighters[id].yak9Count -= amount;\\n        } else {\\n            idToFighters[id].yak9Count = 0;\\n        }\\n    }\\n\\n    ///@notice this function will allow a nation owner to decommission Yak9's\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being destroyed\\n    function scrapYak9(uint256 amount, uint256 id) public {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation ruler\\\");\\n        uint256 currentAmount = idToFighters[id].yak9Count;\\n        require(currentAmount >= amount, \\\"cannot delete that many\\\");\\n        idToFighters[id].yak9Count -= amount;\\n        emit Yak9Scrapped(id, amount);\\n    }\\n\\n    ///@notice this function will return the amount of defending P51 Mustangs's of a nation\\n    ///@param id is the nation ID of the nation\\n    ///@return uint256 is the number of defending P51 Mustang aircraft for the nation\\n    function getP51MustangCount(uint256 id) public view returns (uint256) {\\n        uint256 count = idToFighters[id].p51MustangCount;\\n        return count;\\n    }\\n\\n    ///@dev this function is only callable from the Fighter Market contracts\\n    ///@notice this function will increase the number of aircraft when they are purchased in the marketplace\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being purchased\\n    function increaseP51MustangCount(\\n        uint256 id,\\n        uint256 amount\\n    ) public onlyMarket {\\n        idToFighters[id].p51MustangCount += amount;\\n        emit P51MustangPurchased(id, amount);\\n    }\\n\\n    ///@dev this function is only callable from the losses contract\\n    ///@notice this function will decrease the amount of defending aircraft lost in a battle\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being destroyed\\n    function decreaseP51MustangCount(\\n        uint256 amount,\\n        uint256 id\\n    ) public onlyLossesContract {\\n        uint256 currentAmount = idToFighters[id].p51MustangCount;\\n        if (currentAmount >= amount) {\\n            idToFighters[id].p51MustangCount -= amount;\\n        } else {\\n            idToFighters[id].p51MustangCount = 0;\\n        }\\n    }\\n\\n    ///@notice this function will allow a nation owner to decommission P51 Mustangs's\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being destroyed\\n    function scrapP51Mustang(uint256 amount, uint256 id) public {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation ruler\\\");\\n        uint256 currentAmount = idToFighters[id].p51MustangCount;\\n        require(currentAmount >= amount, \\\"cannot delete that many\\\");\\n        idToFighters[id].p51MustangCount -= amount;\\n        emit P51MustangScrapped(id, amount);\\n    }\\n\\n    ///@notice this function will return the amount of defending F86 Sabre's of a nation\\n    ///@param id is the nation ID of the nation\\n    ///@return uint256 is the number of defending F86 Sabre aircraft for the nation\\n    function getF86SabreCount(uint256 id) public view returns (uint256) {\\n        uint256 count = idToFighters[id].f86SabreCount;\\n        return count;\\n    }\\n\\n    ///@dev this function is only callable from the Fighter Market contracts\\n    ///@notice this function will increase the number of aircraft when they are purchased in the marketplace\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being purchased\\n    function increaseF86SabreCount(\\n        uint256 id,\\n        uint256 amount\\n    ) public onlyMarket {\\n        idToFighters[id].f86SabreCount += amount;\\n        emit F86SabrePurchased(id, amount);\\n    }\\n\\n    ///@dev this function is only callable from the losses contract\\n    ///@notice this function will decrease the amount of defending aircraft lost in a battle\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being destroyed\\n    function decreaseF86SabreCount(\\n        uint256 amount,\\n        uint256 id\\n    ) public onlyLossesContract {\\n        uint256 currentAmount = idToFighters[id].f86SabreCount;\\n        if (currentAmount >= amount) {\\n            idToFighters[id].f86SabreCount -= amount;\\n        } else {\\n            idToFighters[id].f86SabreCount = 0;\\n        }\\n    }\\n\\n    ///@notice this function will allow a nation owner to decommission F86 Sabre's\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being destroyed\\n    function scrapF86Sabre(uint256 amount, uint256 id) public {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation ruler\\\");\\n        uint256 currentAmount = idToFighters[id].f86SabreCount;\\n        require(currentAmount >= amount, \\\"cannot delete that many\\\");\\n        idToFighters[id].f86SabreCount -= amount;\\n        emit F86SabreScrapped(id, amount);\\n    }\\n\\n    ///@notice this function will return the amount of defending Mig15's of a nation\\n    ///@param id is the nation ID of the nation\\n    ///@return uint256 is the number of defending Mig15's aircraft for the nation\\n    function getMig15Count(uint256 id) public view returns (uint256) {\\n        uint256 count = idToFighters[id].mig15Count;\\n        return count;\\n    }\\n\\n    ///@dev this function is only callable from the Fighter Market contracts\\n    ///@notice this function will increase the number of aircraft when they are purchased in the marketplace\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being purchased\\n    function increaseMig15Count(uint256 id, uint256 amount) public onlyMarket {\\n        idToFighters[id].mig15Count += amount;\\n        emit Mig15Purchased(id, amount);\\n    }\\n\\n    ///@dev this function is only callable from the losses contract\\n    ///@notice this function will decrease the amount of defending aircraft lost in a battle\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being destroyed\\n    function decreaseMig15Count(\\n        uint256 amount,\\n        uint256 id\\n    ) public onlyLossesContract {\\n        uint256 currentAmount = idToFighters[id].mig15Count;\\n        if (currentAmount >= amount) {\\n            idToFighters[id].mig15Count -= amount;\\n        } else {\\n            idToFighters[id].mig15Count = 0;\\n        }\\n    }\\n\\n    ///@notice this function will allow a nation owner to decommission Mig15's\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being destroyed\\n    function scrapMig15(uint256 amount, uint256 id) public {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation ruler\\\");\\n        uint256 currentAmount = idToFighters[id].mig15Count;\\n        require(currentAmount >= amount, \\\"cannot delete that many\\\");\\n        idToFighters[id].mig15Count -= amount;\\n        emit Mig15Scrapped(id, amount);\\n    }\\n\\n    ///@notice this function will return the amount of defending F100 Super Sabre's of a nation\\n    ///@param id is the nation ID of the nation\\n    ///@return uint256 is the number of defending F100 Super Sabre aircraft for the nation\\n    function getF100SuperSabreCount(uint256 id) public view returns (uint256) {\\n        uint256 count = idToFighters[id].f100SuperSabreCount;\\n        return count;\\n    }\\n\\n    ///@dev this function is only callable from the Fighter Market contracts\\n    ///@notice this function will increase the number of aircraft when they are purchased in the marketplace\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being purchased\\n    function increaseF100SuperSabreCount(\\n        uint256 id,\\n        uint256 amount\\n    ) public onlyMarket {\\n        idToFighters[id].f100SuperSabreCount += amount;\\n        emit F100SuperSabrePurchased(id, amount);\\n    }\\n\\n    ///@dev this function is only callable from the losses contract\\n    ///@notice this function will decrease the amount of defending aircraft lost in a battle\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being destroyed\\n    function decreaseF100SuperSabreCount(\\n        uint256 amount,\\n        uint256 id\\n    ) public onlyLossesContract {\\n        uint256 currentAmount = idToFighters[id].f100SuperSabreCount;\\n        if (currentAmount >= amount) {\\n            idToFighters[id].f100SuperSabreCount -= amount;\\n        } else {\\n            idToFighters[id].f100SuperSabreCount = 0;\\n        }\\n    }\\n\\n    ///@notice this function will allow a nation owner to decommission F100 Super Sabre's\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being destroyed\\n    function scrapF100SuperSabre(uint256 amount, uint256 id) public {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation ruler\\\");\\n        uint256 currentAmount = idToFighters[id].f100SuperSabreCount;\\n        require(currentAmount >= amount, \\\"cannot delete that many\\\");\\n        idToFighters[id].f100SuperSabreCount -= amount;\\n        emit F100SuperSabreScrapped(id, amount);\\n    }\\n\\n    ///@notice this function will return the amount of defending F35 Lightning's of a nation\\n    ///@param id is the nation ID of the nation\\n    ///@return uint256 is the number of defending F35 Lightning aircraft for the nation\\n    function getF35LightningCount(uint256 id) public view returns (uint256) {\\n        uint256 count = idToFighters[id].f35LightningCount;\\n        return count;\\n    }\\n\\n    ///@dev this function is only callable from the Fighter Market contracts\\n    ///@notice this function will increase the number of aircraft when they are purchased in the marketplace\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being purchased\\n    function increaseF35LightningCount(\\n        uint256 id,\\n        uint256 amount\\n    ) public onlyMarket {\\n        idToFighters[id].f35LightningCount += amount;\\n        emit F35LightningPurchased(id, amount);\\n    }\\n\\n    ///@dev this function is only callable from the losses contract\\n    ///@notice this function will decrease the amount of defending aircraft lost in a battle\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being destroyed\\n    function decreaseF35LightningCount(\\n        uint256 amount,\\n        uint256 id\\n    ) public onlyLossesContract {\\n        uint256 currentAmount = idToFighters[id].f35LightningCount;\\n        if (currentAmount >= amount) {\\n            idToFighters[id].f35LightningCount -= amount;\\n        } else {\\n            idToFighters[id].f35LightningCount = 0;\\n        }\\n    }\\n\\n    ///@notice this function will allow a nation owner to decommission F35's\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being destroyed\\n    function scrapF35Lightning(uint256 amount, uint256 id) public {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation ruler\\\");\\n        uint256 currentAmount = idToFighters[id].f35LightningCount;\\n        require(currentAmount >= amount, \\\"cannot delete that many\\\");\\n        idToFighters[id].f35LightningCount -= amount;\\n        emit F35LightningScrapped(id, amount);\\n    }\\n\\n    ///@notice this function will return the amount of defending F15 Eagle's of a nation\\n    ///@param id is the nation ID of the nation\\n    ///@return uint256 is the number of defending F15 Eagle aircraft for the nation\\n    function getF15EagleCount(uint256 id) public view returns (uint256) {\\n        uint256 count = idToFighters[id].f15EagleCount;\\n        return count;\\n    }\\n\\n    ///@dev this function is only callable from the Fighter Market contracts\\n    ///@notice this function will increase the number of aircraft when they are purchased in the marketplace\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being purchased\\n    function increaseF15EagleCount(\\n        uint256 id,\\n        uint256 amount\\n    ) public onlyMarket {\\n        idToFighters[id].f15EagleCount += amount;\\n        emit F15EaglePurchased(id, amount);\\n    }\\n\\n    ///@dev this function is only callable from the losses contract\\n    ///@notice this function will decrease the amount of defending aircraft lost in a battle\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being destroyed\\n    function decreaseF15EagleCount(\\n        uint256 amount,\\n        uint256 id\\n    ) public onlyLossesContract {\\n        uint256 currentAmount = idToFighters[id].f15EagleCount;\\n        if (currentAmount >= amount) {\\n            idToFighters[id].f15EagleCount -= amount;\\n        } else {\\n            idToFighters[id].f15EagleCount = 0;\\n        }\\n    }\\n\\n    ///@notice this function will allow a nation owner to decommission F15's\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being destroyed\\n    function scrapF15Eagle(uint256 amount, uint256 id) public {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation ruler\\\");\\n        uint256 currentAmount = idToFighters[id].f15EagleCount;\\n        require(currentAmount >= amount, \\\"cannot delete that many\\\");\\n        idToFighters[id].f15EagleCount -= amount;\\n        emit F15EagleScrapped(id, amount);\\n    }\\n\\n    ///@notice this function will return the amount of defending Su30 Mki's of a nation\\n    ///@param id is the nation ID of the nation\\n    ///@return uint256 is the number of defending Su30 Mki aircraft for the nation\\n    function getSu30MkiCount(uint256 id) public view returns (uint256) {\\n        uint256 count = idToFighters[id].su30MkiCount;\\n        return count;\\n    }\\n\\n    ///@dev this function is only callable from the Fighter Market contracts\\n    ///@notice this function will increase the number of aircraft when they are purchased in the marketplace\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being purchased\\n    function increaseSu30MkiCount(\\n        uint256 id,\\n        uint256 amount\\n    ) public onlyMarket {\\n        idToFighters[id].su30MkiCount += amount;\\n        emit Su30MkiPurchased(id, amount);\\n    }\\n\\n    ///@dev this function is only callable from the losses contract\\n    ///@notice this function will decrease the amount of defending aircraft lost in a battle\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being destroyed\\n    function decreaseSu30MkiCount(\\n        uint256 amount,\\n        uint256 id\\n    ) public onlyLossesContract {\\n        uint256 currentAmount = idToFighters[id].su30MkiCount;\\n        if (currentAmount >= amount) {\\n            idToFighters[id].su30MkiCount -= amount;\\n        } else {\\n            idToFighters[id].su30MkiCount = 0;\\n        }\\n    }\\n\\n    ///@notice this function will allow a nation owner to decommission Su30's\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being destroyed\\n    function scrapSu30Mki(uint256 amount, uint256 id) public {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation ruler\\\");\\n        uint256 currentAmount = idToFighters[id].su30MkiCount;\\n        require(currentAmount >= amount, \\\"cannot delete that many\\\");\\n        idToFighters[id].su30MkiCount -= amount;\\n        emit Su30MkiScrapped(id, amount);\\n    }\\n\\n    ///@notice this function will return the amount of defending F22 Raptor's of a nation\\n    ///@param id is the nation ID of the nation\\n    ///@return uint256 is the number of defending F22 Raptor aircraft for the nation\\n    function getF22RaptorCount(uint256 id) public view returns (uint256) {\\n        uint256 count = idToFighters[id].f22RaptorCount;\\n        return count;\\n    }\\n\\n    ///@dev this function is only callable from the Fighter Market contracts\\n    ///@notice this function will increase the number of aircraft when they are purchased in the marketplace\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being purchased\\n    function increaseF22RaptorCount(\\n        uint256 id,\\n        uint256 amount\\n    ) public onlyMarket {\\n        idToFighters[id].f22RaptorCount += amount;\\n        emit F22RaptorPurchased(id, amount);\\n    }\\n\\n    ///@dev this function is only callable from the losses contract\\n    ///@notice this function will decrease the amount of defending aircraft lost in a battle\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being destroyed\\n    function decreaseF22RaptorCount(\\n        uint256 amount,\\n        uint256 id\\n    ) public onlyLossesContract {\\n        uint256 currentAmount = idToFighters[id].f22RaptorCount;\\n        if (currentAmount >= amount) {\\n            idToFighters[id].f22RaptorCount -= amount;\\n        } else {\\n            idToFighters[id].f22RaptorCount = 0;\\n        }\\n    }\\n\\n    ///@notice this function will allow a nation owner to decommission F22's\\n    ///@param id is the nation ID of the nation\\n    ///@param amount is the amount of aircraft being destroyed\\n    function scrapF22Raptor(uint256 amount, uint256 id) public {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation ruler\\\");\\n        uint256 currentAmount = idToFighters[id].f22RaptorCount;\\n        require(currentAmount >= amount, \\\"cannot delete that many\\\");\\n        idToFighters[id].f22RaptorCount -= amount;\\n        emit F22RaptorScrapped(id, amount);\\n    }\\n\\n    function getFighterCount(uint256 id) public view returns (uint256) {\\n        uint256 count = idToFighters[id].yak9Count +\\n            idToFighters[id].p51MustangCount +\\n            idToFighters[id].f86SabreCount +\\n            idToFighters[id].mig15Count +\\n            idToFighters[id].f100SuperSabreCount +\\n            idToFighters[id].f35LightningCount +\\n            idToFighters[id].f15EagleCount +\\n            idToFighters[id].su30MkiCount +\\n            idToFighters[id].f22RaptorCount;\\n        return count;\\n    }\\n\\n    function getAircraftCount(uint256 id) public view returns (uint256) {\\n        uint256 bomberCount = bomb.getBomberCount(id);\\n        uint256 fighterCount = getFighterCount(id);\\n        uint256 total = bomberCount + fighterCount;\\n        return total;\\n    }\\n}\\n\\n///@title FighterLosses\\n///@author OxSnosh\\n///@notice this contract will decrease the amount of fighters lost in battle\\ncontract FighterLosses is Ownable {\\n    address public fighters;\\n    address public airBattle;\\n\\n    FightersContract fight;\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings(address _fighters, address _airBattle) public onlyOwner {\\n        fighters = _fighters;\\n        fight = FightersContract(_fighters);\\n        airBattle = _airBattle;\\n    }\\n\\n    modifier onlyAirBattle() {\\n        require(\\n            msg.sender == airBattle,\\n            \\\"this function can only be called by air battle\\\"\\n        );\\n        _;\\n    }\\n\\n    ///@dev this is a public function that is only callable from the Air Battle contract\\n    ///@notice this function will decrease the amount of fighers lost in battle from the FighersContract\\n    ///@param losses is an array of uints that represent the fighters that the defender lost in battle\\n    ///@param id is the nation ID of the defender\\n    function decrementLosses(\\n        uint256[] memory losses,\\n        uint256 id\\n    ) public onlyAirBattle returns (bool) {\\n        for (uint256 i = 0; i < losses.length; i++) {\\n            if (losses[i] == 1) {\\n                fight.decreaseYak9Count(1, id);\\n            } else if (losses[i] == 2) {\\n                fight.decreaseP51MustangCount(1, id);\\n            } else if (losses[i] == 3) {\\n                fight.decreaseF86SabreCount(1, id);\\n            } else if (losses[i] == 4) {\\n                fight.decreaseMig15Count(1, id);\\n            } else if (losses[i] == 5) {\\n                fight.decreaseF100SuperSabreCount(1, id);\\n            } else if (losses[i] == 6) {\\n                fight.decreaseF35LightningCount(1, id);\\n            } else if (losses[i] == 7) {\\n                fight.decreaseF15EagleCount(1, id);\\n            } else if (losses[i] == 8) {\\n                fight.decreaseSu30MkiCount(1, id);\\n            } else if (losses[i] == 9) {\\n                fight.decreaseF22RaptorCount(1, id);\\n            }\\n        }\\n        return true;\\n    }\\n}\\n\\n///@title FightersMarketplace1\\n///@author OxSnosh\\n///@dev this contact inherits from openzeppelin's ownable contract\\n///@notice this contract will allow the nation owner to buy Yak9s, P51 Mustangs, F86 Sabres, Mig15s, and F100's\\ncontract FightersMarketplace1 is Ownable, ReentrancyGuard {\\n    address public countryMinter;\\n    address public fighters;\\n    address public bombers;\\n    address public treasury;\\n    address public infrastructure;\\n    address public resources;\\n    address public improvements1;\\n    address public wonders1;\\n    address public wonders4;\\n    address public navy;\\n    address public bonusResources;\\n    address public navy2;\\n    uint256 public yak9Cost = 10000 * (10 ** 18);\\n    uint256 public yak9RequiredInfrastructure = 100;\\n    uint256 public yak9RequiredTech = 30;\\n    uint256 public p51MustangCost = 15000 * (10 ** 18);\\n    uint256 public p51MustangRequiredInfrastructure = 200;\\n    uint256 public p51MustangRequiredTech = 65;\\n    uint256 public f86SabreCost = 20000 * (10 ** 18);\\n    uint256 public f86SabreRequiredInfrastructure = 300;\\n    uint256 public f86SabreRequiredTech = 105;\\n    uint256 public mig15Cost = 25000 * (10 ** 18);\\n    uint256 public mig15RequiredInfrastructure = 400;\\n    uint256 public mig15RequiredTech = 150;\\n    uint256 public f100SuperSabreCost = 30000 * (10 ** 18);\\n    uint256 public f100SuperSabreRequiredInfrastructure = 500;\\n    uint256 public f100SuperSabreRequiredTech = 200;\\n\\n    CountryMinter mint;\\n    BombersContract bomb;\\n    ResourcesContract res;\\n    ImprovementsContract1 imp1;\\n    WondersContract1 won1;\\n    WondersContract4 won4;\\n    FightersContract fight;\\n    NavyContract nav;\\n    BonusResourcesContract bonus;\\n    NavyContract2 nav2;\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings(\\n        address _countryMinter,\\n        address _bombers,\\n        address _fighters,\\n        address _treasury,\\n        address _infrastructure,\\n        address _resources,\\n        address _improvements1,\\n        address _wonders1,\\n        address _wonders4,\\n        address _navy\\n    ) public onlyOwner {\\n        countryMinter = _countryMinter;\\n        mint = CountryMinter(_countryMinter);\\n        bombers = _bombers;\\n        bomb = BombersContract(_bombers);\\n        resources = _resources;\\n        res = ResourcesContract(_resources);\\n        improvements1 = _improvements1;\\n        imp1 = ImprovementsContract1(_improvements1);\\n        wonders1 = _wonders1;\\n        won1 = WondersContract1(_wonders1);\\n        wonders4 = _wonders4;\\n        won4 = WondersContract4(_wonders4);\\n        treasury = _treasury;\\n        fighters = _fighters;\\n        fight = FightersContract(_fighters);\\n        infrastructure = _infrastructure;\\n        navy = _navy;\\n        nav = NavyContract(_navy);\\n    }\\n\\n    function settings2(\\n        address _bonusResources,\\n        address _navy2\\n    ) public onlyOwner {\\n        bonusResources = _bonusResources;\\n        bonus = BonusResourcesContract(_bonusResources);\\n        navy2 = _navy2;\\n        nav2 = NavyContract2(_navy2);\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be user to update the price, infrastructure requirement and tech requirement in order to purchase a Yak9\\n    function updateYak9Specs(\\n        uint256 newPrice,\\n        uint256 newInfra,\\n        uint256 newTech\\n    ) public onlyOwner {\\n        yak9Cost = newPrice;\\n        yak9RequiredInfrastructure = newInfra;\\n        yak9RequiredTech = newTech;\\n    }\\n\\n    function getYak9Specs() public view returns (uint256, uint256, uint256) {\\n        return (yak9Cost, yak9RequiredInfrastructure, yak9RequiredTech);\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be user to update the price, infrastructure requirement and tech requirement in order to purchase a P51 Mustang\\n    function updateP51MustangSpecs(\\n        uint256 newPrice,\\n        uint256 newInfra,\\n        uint256 newTech\\n    ) public onlyOwner {\\n        p51MustangCost = newPrice;\\n        p51MustangRequiredInfrastructure = newInfra;\\n        p51MustangRequiredTech = newTech;\\n    }\\n\\n    function getP51MustangSpecs()\\n        public\\n        view\\n        returns (uint256, uint256, uint256)\\n    {\\n        return (\\n            p51MustangCost,\\n            p51MustangRequiredInfrastructure,\\n            p51MustangRequiredTech\\n        );\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be user to update the price, infrastructure requirement and tech requirement in order to purchase a F86 Sabre\\n    function updateF86SabreSpecs(\\n        uint256 newPrice,\\n        uint256 newInfra,\\n        uint256 newTech\\n    ) public onlyOwner {\\n        f86SabreCost = newPrice;\\n        f86SabreRequiredInfrastructure = newInfra;\\n        f86SabreRequiredTech = newTech;\\n    }\\n\\n    function getF86SabreSpecs()\\n        public\\n        view\\n        returns (uint256, uint256, uint256)\\n    {\\n        return (\\n            f86SabreCost,\\n            f86SabreRequiredInfrastructure,\\n            f86SabreRequiredTech\\n        );\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be user to update the price, infrastructure requirement and tech requirement in order to purchase a Mig15\\n    function updateMig15Specs(\\n        uint256 newPrice,\\n        uint256 newInfra,\\n        uint256 newTech\\n    ) public onlyOwner {\\n        mig15Cost = newPrice;\\n        mig15RequiredInfrastructure = newInfra;\\n        mig15RequiredTech = newTech;\\n    }\\n\\n    function getMig15Specs() public view returns (uint256, uint256, uint256) {\\n        return (mig15Cost, mig15RequiredInfrastructure, mig15RequiredTech);\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be user to update the price, infrastructure requirement and tech requirement in order to purchase a F100 Super Sabre\\n    function updateF100SuperSabreSpecs(\\n        uint256 newPrice,\\n        uint256 newInfra,\\n        uint256 newTech\\n    ) public onlyOwner {\\n        f100SuperSabreCost = newPrice;\\n        f100SuperSabreRequiredInfrastructure = newInfra;\\n        f100SuperSabreRequiredTech = newTech;\\n    }\\n\\n    function getF100SuperSabreSpecs()\\n        public\\n        view\\n        returns (uint256, uint256, uint256)\\n    {\\n        return (\\n            f100SuperSabreCost,\\n            f100SuperSabreRequiredInfrastructure,\\n            f100SuperSabreRequiredTech\\n        );\\n    }\\n\\n    ///@dev this is a public view function that will allow the caller to purchase a Yak9 for their nation\\n    ///@notice this function allowes the caller to purchase a Yak9 for their nation\\n    ///@param amount specifies the number of aircraft being purchased\\n    ///@param id is the nation ID\\n    function buyYak9(uint256 amount, uint256 id) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation ruler\\\");\\n        uint256 aircraftCount = fight.getAircraftCount(id);\\n        uint256 maxAircraft = getMaxAircraftCount(id);\\n        require((aircraftCount + amount) <= maxAircraft, \\\"too many aircraft\\\");\\n        uint256 callerInfra = InfrastructureContract(infrastructure)\\n            .getInfrastructureCount(id);\\n        require(\\n            callerInfra >= yak9RequiredInfrastructure,\\n            \\\"!enough infrastructure\\\"\\n        );\\n        uint256 callerTech = InfrastructureContract(infrastructure)\\n            .getTechnologyCount(id);\\n        require(callerTech >= yak9RequiredTech, \\\"!enough tech\\\");\\n        uint256 cost = getYak9Cost(id);\\n        uint256 purchasePrice = (cost * amount);\\n        uint256 balance = TreasuryContract(treasury).checkBalance(id);\\n        require(balance >= purchasePrice, \\\"insufficient money to buy aircraft\\\");\\n        require(\\n            TreasuryContract(treasury).spendBalance(id, purchasePrice),\\n            \\\"could not spend balance\\\"\\n        );\\n        FightersContract(fighters).increaseYak9Count(id, amount);\\n    }\\n\\n    function getYak9Cost(uint256 id) public view returns (uint256) {\\n        uint256 mod = getAircraftPurchaseCostModifier(id);\\n        uint256 cost = ((yak9Cost * mod) / 100);\\n        return cost;\\n    }\\n\\n    ///@dev this is a public view function that will allow the caller to purchase a P51 for their nation\\n    ///@notice this function allowes the caller to purchase a P51 for their nation\\n    ///@param amount specifies the number of aircraft being purchased\\n    ///@param id is the nation ID\\n    function buyP51Mustang(uint256 amount, uint256 id) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation ruler\\\");\\n        uint256 aircraftCount = fight.getAircraftCount(id);\\n        uint256 maxAircraft = getMaxAircraftCount(id);\\n        require((aircraftCount + amount) <= maxAircraft, \\\"too many aircraft\\\");\\n        uint256 callerInfra = InfrastructureContract(infrastructure)\\n            .getInfrastructureCount(id);\\n        require(\\n            callerInfra >= p51MustangRequiredInfrastructure,\\n            \\\"!enough infrastructure\\\"\\n        );\\n        uint256 callerTech = InfrastructureContract(infrastructure)\\n            .getTechnologyCount(id);\\n        require(callerTech >= p51MustangRequiredTech, \\\"!enough tech\\\");\\n        uint256 cost = getP51MustangCost(id);\\n        uint256 purchasePrice = (cost * amount);\\n        uint256 balance = TreasuryContract(treasury).checkBalance(id);\\n        require(balance >= purchasePrice);\\n        require(\\n            TreasuryContract(treasury).spendBalance(id, purchasePrice),\\n            \\\"could not spend balance\\\"\\n        );\\n        FightersContract(fighters).increaseP51MustangCount(id, amount);\\n    }\\n\\n    function getP51MustangCost(uint256 id) public view returns (uint256) {\\n        uint256 mod = getAircraftPurchaseCostModifier(id);\\n        uint256 cost = ((p51MustangCost * mod) / 100);\\n        return cost;\\n    }\\n\\n    ///@dev this is a public view function that will allow the caller to purchase a F86 for their nation\\n    ///@notice this function allowes the caller to purchase a F86 for their nation\\n    ///@param amount specifies the number of aircraft being purchased\\n    ///@param id is the nation ID\\n    function buyF86Sabre(uint256 amount, uint256 id) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation ruler\\\");\\n        uint256 aircraftCount = fight.getAircraftCount(id);\\n        uint256 maxAircraft = getMaxAircraftCount(id);\\n        require((aircraftCount + amount) <= maxAircraft, \\\"too many aircraft\\\");\\n        uint256 callerInfra = InfrastructureContract(infrastructure)\\n            .getInfrastructureCount(id);\\n        require(\\n            callerInfra >= f86SabreRequiredInfrastructure,\\n            \\\"!enough infrastructure\\\"\\n        );\\n        uint256 callerTech = InfrastructureContract(infrastructure)\\n            .getTechnologyCount(id);\\n        require(callerTech >= f86SabreRequiredTech, \\\"!enough tech\\\");\\n        uint256 cost = getF86SabreCost(id);\\n        uint256 purchasePrice = (cost * amount);\\n        uint256 balance = TreasuryContract(treasury).checkBalance(id);\\n        require(balance >= purchasePrice);\\n        require(\\n            TreasuryContract(treasury).spendBalance(id, purchasePrice),\\n            \\\"could not spend balance\\\"\\n        );\\n        FightersContract(fighters).increaseF86SabreCount(id, amount);\\n    }\\n\\n    function getF86SabreCost(uint256 id) public view returns (uint256) {\\n        uint256 mod = getAircraftPurchaseCostModifier(id);\\n        uint256 cost = ((f86SabreCost * mod) / 100);\\n        return cost;\\n    }\\n\\n    ///@dev this is a public view function that will allow the caller to purchase a Mig15 for their nation\\n    ///@notice this function allowes the caller to purchase a Mig15 for their nation\\n    ///@param amount specifies the number of aircraft being purchased\\n    ///@param id is the nation ID\\n    function buyMig15(uint256 amount, uint256 id) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation ruler\\\");\\n        uint256 aircraftCount = fight.getAircraftCount(id);\\n        uint256 maxAircraft = getMaxAircraftCount(id);\\n        require((aircraftCount + amount) <= maxAircraft, \\\"too many aircraft\\\");\\n        uint256 callerInfra = InfrastructureContract(infrastructure)\\n            .getInfrastructureCount(id);\\n        require(\\n            callerInfra >= mig15RequiredInfrastructure,\\n            \\\"!enough infrastructure\\\"\\n        );\\n        uint256 callerTech = InfrastructureContract(infrastructure)\\n            .getTechnologyCount(id);\\n        require(callerTech >= mig15RequiredTech, \\\"!enough tech\\\");\\n        uint256 cost = getMig15Cost(id);\\n        uint256 purchasePrice = (cost * amount);\\n        uint256 balance = TreasuryContract(treasury).checkBalance(id);\\n        require(balance >= purchasePrice);\\n        require(\\n            TreasuryContract(treasury).spendBalance(id, purchasePrice),\\n            \\\"could not spend balance\\\"\\n        );\\n        FightersContract(fighters).increaseMig15Count(id, amount);\\n    }\\n\\n    function getMig15Cost(uint256 id) public view returns (uint256) {\\n        uint256 mod = getAircraftPurchaseCostModifier(id);\\n        uint256 cost = ((mig15Cost * mod) / 100);\\n        return cost;\\n    }\\n\\n    ///@dev this is a public view function that will allow the caller to purchase a F100 Super Sabre for their nation\\n    ///@notice this function allowes the caller to purchase a F100 Super Sabre for their nation\\n    ///@param amount specifies the number of aircraft being purchased\\n    ///@param id is the nation ID\\n    function buyF100SuperSabre(uint256 amount, uint256 id) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation ruler\\\");\\n        uint256 aircraftCount = fight.getAircraftCount(id);\\n        uint256 maxAircraft = getMaxAircraftCount(id);\\n        require((aircraftCount + amount) <= maxAircraft, \\\"too many aircraft\\\");\\n        uint256 callerInfra = InfrastructureContract(infrastructure)\\n            .getInfrastructureCount(id);\\n        require(\\n            callerInfra >= f100SuperSabreRequiredInfrastructure,\\n            \\\"!enough infrastructure\\\"\\n        );\\n        uint256 callerTech = InfrastructureContract(infrastructure)\\n            .getTechnologyCount(id);\\n        require(callerTech >= f100SuperSabreRequiredTech, \\\"!enough tech\\\");\\n        uint256 cost = getF100SuperSabreCost(id);\\n        uint256 purchasePrice = (cost * amount);\\n        uint256 balance = TreasuryContract(treasury).checkBalance(id);\\n        require(balance >= purchasePrice);\\n        require(\\n            TreasuryContract(treasury).spendBalance(id, purchasePrice),\\n            \\\"could not spend balance\\\"\\n        );\\n        FightersContract(fighters).increaseF100SuperSabreCount(id, amount);\\n    }\\n\\n    function getF100SuperSabreCost(uint256 id) public view returns (uint256) {\\n        uint256 mod = getAircraftPurchaseCostModifier(id);\\n        uint256 cost = ((f100SuperSabreCost * mod) / 100);\\n        return cost;\\n    }\\n\\n    ///@dev this is public view function that will adjust the cost of the aircraft being purchased based on resources, improvements and wonders of that nation\\n    ///@notice this function will adjust the cost of aircraft based on resources, improvements and wonders\\n    ///@notice aluminium, oil, rubber, airports and space programs decrease the cost of aircraft\\n    ///@param id is the nation ID of the nation being queried\\n    ///@return uint256 is the percentage modifier used to adjust the aircraft purchase price\\n    function getAircraftPurchaseCostModifier(\\n        uint256 id\\n    ) public view returns (uint256) {\\n        uint256 aircraftPurchaseModifier = 100;\\n        bool aluminium = res.viewAluminium(id);\\n        if (aluminium) {\\n            aircraftPurchaseModifier -= 8;\\n        }\\n        bool oil = res.viewOil(id);\\n        if (oil) {\\n            aircraftPurchaseModifier -= 4;\\n        }\\n        bool rubber = res.viewRubber(id);\\n        if (rubber) {\\n            aircraftPurchaseModifier -= 4;\\n        }\\n        uint256 airports = imp1.getAirportCount(id);\\n        if (airports > 0) {\\n            aircraftPurchaseModifier -= (2 * airports);\\n        }\\n        bool spaceProgram = won4.getSpaceProgram(id);\\n        if (spaceProgram) {\\n            aircraftPurchaseModifier -= 5;\\n        }\\n        return aircraftPurchaseModifier;\\n    }\\n\\n    ///@dev this a public view function that will return the maximum amonut of aircraft a nation can own\\n    ///@notice this is a function that will return the maximum amount of aircraft a nation can own\\n    ///@notice the base amount of aircraft a nation can own is 50\\n    ///@notice access to the construction resource will increase the amount of aircraft a nation can own by 10\\n    ///@notice a foreign air force base will increase the maximum amount of aircraft for a nation by 20\\n    ///@notice the maxmimum aircraft a nation can own will increase by 5 for each aircraft carrier owned\\n    ///@param id is the nation ID of the nation being queried\\n    ///@return uint256 is the maximum amount of aircraft a nation can own\\n    function getMaxAircraftCount(uint256 id) public view returns (uint256) {\\n        uint256 maxAircraftCount = 50;\\n        bool construction = bonus.viewConstruction(id);\\n        if (construction) {\\n            maxAircraftCount += 10;\\n        }\\n        bool foreignAirForceBase = won1.getForeignAirforceBase(id);\\n        if (foreignAirForceBase) {\\n            maxAircraftCount += 20;\\n        }\\n        uint256 aircraftCarrierCount = nav2.getAircraftCarrierCount(id);\\n        if (aircraftCarrierCount > 5) {\\n            aircraftCarrierCount = 5;\\n        }\\n        if (aircraftCarrierCount > 0) {\\n            maxAircraftCount += (aircraftCarrierCount * 5);\\n        }\\n        return maxAircraftCount;\\n    }\\n}\\n\\n///@title FightersMarketplace2\\n///@author OxSnosh\\n///@notice this contract allows a nation owner to purchase F35's, F15's, SU30's and F22's\\n///@dev this contact inherits from owpenzeppelin's ownable contact\\ncontract FightersMarketplace2 is Ownable, ReentrancyGuard {\\n    address public countryMinter;\\n    address public fighters;\\n    address public fightersMarket1;\\n    address public bombers;\\n    address public treasury;\\n    address public infrastructure;\\n    address public resources;\\n    address public improvements1;\\n    uint256 public f35LightningCost = 35000 * (10 ** 18);\\n    uint256 public f35LightningRequiredInfrastructure = 600;\\n    uint256 public f35LightningRequiredTech = 255;\\n    uint256 public f15EagleCost = 40000 * (10 ** 18);\\n    uint256 public f15EagleRequiredInfrastructure = 700;\\n    uint256 public f15EagleRequiredTech = 315;\\n    uint256 public su30MkiCost = 45000 * (10 ** 18);\\n    uint256 public su30MkiRequiredInfrastructure = 850;\\n    uint256 public su30MkiRequiredTech = 405;\\n    uint256 public f22RaptorCost = 50000 * (10 ** 18);\\n    uint256 public f22RaptorRequiredInfrastructure = 1000;\\n    uint256 public f22RaptorRequiredTech = 500;\\n\\n    CountryMinter mint;\\n    BombersContract bomb;\\n    ResourcesContract res;\\n    ImprovementsContract1 imp1;\\n    FightersContract fight;\\n    FightersMarketplace1 fightMarket1;\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings(\\n        address _countryMinter,\\n        address _bombers,\\n        address _fighters,\\n        address _fightersMarket1,\\n        address _treasury,\\n        address _infrastructure,\\n        address _resources,\\n        address _improvements1\\n    ) public onlyOwner {\\n        countryMinter = _countryMinter;\\n        mint = CountryMinter(_countryMinter);\\n        bombers = _bombers;\\n        bomb = BombersContract(_bombers);\\n        resources = _resources;\\n        res = ResourcesContract(_resources);\\n        improvements1 = _improvements1;\\n        imp1 = ImprovementsContract1(_improvements1);\\n        treasury = _treasury;\\n        fighters = _fighters;\\n        fight = FightersContract(_fighters);\\n        fightersMarket1 = _fightersMarket1;\\n        fightMarket1 = FightersMarketplace1(_fightersMarket1);\\n        infrastructure = _infrastructure;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be user to update the price, infrastructure requirement and tech requirement in order to purchase a F35 Lightning\\n    function updateF35LightningSpecs(\\n        uint256 newPrice,\\n        uint256 newInfra,\\n        uint256 newTech\\n    ) public onlyOwner {\\n        f35LightningCost = newPrice;\\n        f35LightningRequiredInfrastructure = newInfra;\\n        f35LightningRequiredTech = newTech;\\n    }\\n\\n    function getF35LightningSpecs()\\n        public\\n        view\\n        returns (uint256, uint256, uint256)\\n    {\\n        return (\\n            f35LightningCost,\\n            f35LightningRequiredInfrastructure,\\n            f35LightningRequiredTech\\n        );\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be user to update the price, infrastructure requirement and tech requirement in order to purchase a F15 Eagle\\n    function updateF15EagleSpecs(\\n        uint256 newPrice,\\n        uint256 newInfra,\\n        uint256 newTech\\n    ) public onlyOwner {\\n        f15EagleCost = newPrice;\\n        f15EagleRequiredInfrastructure = newInfra;\\n        f15EagleRequiredTech = newTech;\\n    }\\n\\n    function getF15EagleSpecs()\\n        public\\n        view\\n        returns (uint256, uint256, uint256)\\n    {\\n        return (\\n            f15EagleCost,\\n            f15EagleRequiredInfrastructure,\\n            f15EagleRequiredTech\\n        );\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be user to update the price, infrastructure requirement and tech requirement in order to purchase a SU30 Mki\\n    function updateSU30MkiSpecs(\\n        uint256 newPrice,\\n        uint256 newInfra,\\n        uint256 newTech\\n    ) public onlyOwner {\\n        su30MkiCost = newPrice;\\n        su30MkiRequiredInfrastructure = newInfra;\\n        su30MkiRequiredTech = newTech;\\n    }\\n\\n    function getSU30MkiSpecs() public view returns (uint256, uint256, uint256) {\\n        return (\\n            su30MkiCost,\\n            su30MkiRequiredInfrastructure,\\n            su30MkiRequiredTech\\n        );\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be user to update the price, infrastructure requirement and tech requirement in order to purchase a F22\\n    function updateF22RaptorSpecs(\\n        uint256 newPrice,\\n        uint256 newInfra,\\n        uint256 newTech\\n    ) public onlyOwner {\\n        f22RaptorCost = newPrice;\\n        f22RaptorRequiredInfrastructure = newInfra;\\n        f22RaptorRequiredTech = newTech;\\n    }\\n\\n    function getF22RaptorSpecs()\\n        public\\n        view\\n        returns (uint256, uint256, uint256)\\n    {\\n        return (\\n            f22RaptorCost,\\n            f22RaptorRequiredInfrastructure,\\n            f22RaptorRequiredTech\\n        );\\n    }\\n\\n    ///@dev this is a public view function that will allow the caller to purchase a F35 Lightning for their nation\\n    ///@notice this function allowes the caller to purchase a F35 Lightning for their nation\\n    ///@param amount specifies the number of aircraft being purchased\\n    ///@param id is the nation ID\\n    function buyF35Lightning(uint256 amount, uint256 id) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation ruler\\\");\\n        uint256 aircraftCount = fight.getAircraftCount(id);\\n        uint256 maxAircraft = fightMarket1.getMaxAircraftCount(id);\\n        require((aircraftCount + amount) <= maxAircraft, \\\"too many aircraft\\\");\\n        uint256 callerInfra = InfrastructureContract(infrastructure)\\n            .getInfrastructureCount(id);\\n        require(\\n            callerInfra >= f35LightningRequiredInfrastructure,\\n            \\\"!enough infrastructure\\\"\\n        );\\n        uint256 callerTech = InfrastructureContract(infrastructure)\\n            .getTechnologyCount(id);\\n        require(callerTech >= f35LightningRequiredTech, \\\"!enough tech\\\");\\n        uint256 cost = getF35LightningCost(id);\\n        uint256 purchasePrice = (cost * amount);\\n        uint256 balance = TreasuryContract(treasury).checkBalance(id);\\n        require(balance >= purchasePrice);\\n        require(\\n            TreasuryContract(treasury).spendBalance(id, purchasePrice),\\n            \\\"could not spend balance\\\"\\n        );\\n        FightersContract(fighters).increaseF35LightningCount(id, amount);\\n    }\\n\\n    function getF35LightningCost(uint256 id) public view returns (uint256) {\\n        uint256 mod = fightMarket1.getAircraftPurchaseCostModifier(id);\\n        uint256 cost = ((f35LightningCost * mod) / 100);\\n        return cost;\\n    }\\n\\n    ///@dev this is a public view function that will allow the caller to purchase a F15 Eagle for their nation\\n    ///@notice this function allowes the caller to purchase a F15 Eagle for their nation\\n    ///@param amount specifies the number of aircraft being purchased\\n    ///@param id is the nation ID\\n    function buyF15Eagle(uint256 amount, uint256 id) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation ruler\\\");\\n        uint256 aircraftCount = fight.getAircraftCount(id);\\n        uint256 maxAircraft = fightMarket1.getMaxAircraftCount(id);\\n        require((aircraftCount + amount) <= maxAircraft, \\\"too many aircraft\\\");\\n        uint256 callerInfra = InfrastructureContract(infrastructure)\\n            .getInfrastructureCount(id);\\n        require(\\n            callerInfra >= f15EagleRequiredInfrastructure,\\n            \\\"!enough infrastructure\\\"\\n        );\\n        uint256 callerTech = InfrastructureContract(infrastructure)\\n            .getTechnologyCount(id);\\n        require(callerTech >= f15EagleRequiredTech, \\\"!enough tech\\\");\\n        uint256 cost = getF15EagleCost(id);\\n        uint256 purchasePrice = (cost * amount);\\n        uint256 balance = TreasuryContract(treasury).checkBalance(id);\\n        require(balance >= purchasePrice);\\n        require(\\n            TreasuryContract(treasury).spendBalance(id, purchasePrice),\\n            \\\"could not spend balance\\\"\\n        );\\n        FightersContract(fighters).increaseF15EagleCount(id, amount);\\n    }\\n\\n    function getF15EagleCost(uint256 id) public view returns (uint256) {\\n        uint256 mod = fightMarket1.getAircraftPurchaseCostModifier(id);\\n        uint256 cost = ((f15EagleCost * mod) / 100);\\n        return cost;\\n    }\\n\\n    ///@dev this is a public view function that will allow the caller to purchase a Su30 Mki for their nation\\n    ///@notice this function allowes the caller to purchase a Su30 Mki for their nation\\n    ///@param amount specifies the number of aircraft being purchased\\n    ///@param id is the nation ID\\n    function buySu30Mki(uint256 amount, uint256 id) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation ruler\\\");\\n        uint256 aircraftCount = fight.getAircraftCount(id);\\n        uint256 maxAircraft = fightMarket1.getMaxAircraftCount(id);\\n        require((aircraftCount + amount) <= maxAircraft, \\\"too many aircraft\\\");\\n        uint256 callerInfra = InfrastructureContract(infrastructure)\\n            .getInfrastructureCount(id);\\n        require(\\n            callerInfra >= su30MkiRequiredInfrastructure,\\n            \\\"!enough infrastructure\\\"\\n        );\\n        uint256 callerTech = InfrastructureContract(infrastructure)\\n            .getTechnologyCount(id);\\n        require(callerTech >= su30MkiRequiredTech, \\\"!enough tech\\\");\\n        uint256 cost = getSu30MkiCost(id);\\n        uint256 purchasePrice = (cost * amount);\\n        uint256 balance = TreasuryContract(treasury).checkBalance(id);\\n        require(balance >= purchasePrice);\\n        require(\\n            TreasuryContract(treasury).spendBalance(id, purchasePrice),\\n            \\\"could not spend balance\\\"\\n        );\\n        FightersContract(fighters).increaseSu30MkiCount(id, amount);\\n    }\\n\\n    function getSu30MkiCost(uint256 id) public view returns (uint256) {\\n        uint256 mod = fightMarket1.getAircraftPurchaseCostModifier(id);\\n        uint256 cost = ((su30MkiCost * mod) / 100);\\n        return cost;\\n    }\\n\\n    ///@dev this is a public view function that will allow the caller to purchase a F22 Raptor for their nation\\n    ///@notice this function allowes the caller to purchase a F22 Raptor for their nation\\n    ///@param amount specifies the number of aircraft being purchased\\n    ///@param id is the nation ID\\n    function buyF22Raptor(uint256 amount, uint256 id) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation ruler\\\");\\n        uint256 aircraftCount = fight.getAircraftCount(id);\\n        uint256 maxAircraft = fightMarket1.getMaxAircraftCount(id);\\n        require((aircraftCount + amount) <= maxAircraft, \\\"too many aircraft\\\");\\n        uint256 callerInfra = InfrastructureContract(infrastructure)\\n            .getInfrastructureCount(id);\\n        require(\\n            callerInfra >= f22RaptorRequiredInfrastructure,\\n            \\\"!enough infrastructure\\\"\\n        );\\n        uint256 callerTech = InfrastructureContract(infrastructure)\\n            .getTechnologyCount(id);\\n        require(callerTech >= f22RaptorRequiredTech, \\\"!enough tech\\\");\\n        uint256 cost = getF22RaptorCost(id);\\n        uint256 purchasePrice = (cost * amount);\\n        uint256 balance = TreasuryContract(treasury).checkBalance(id);\\n        require(balance >= purchasePrice);\\n        require(\\n            TreasuryContract(treasury).spendBalance(id, purchasePrice),\\n            \\\"could not spend balance\\\"\\n        );\\n        FightersContract(fighters).increaseF22RaptorCount(id, amount);\\n    }\\n\\n    function getF22RaptorCost(uint256 id) public view returns (uint256) {\\n        uint256 mod = fightMarket1.getAircraftPurchaseCostModifier(id);\\n        uint256 cost = ((f22RaptorCost * mod) / 100);\\n        return cost;\\n    }\\n}\\n\",\"keccak256\":\"0xace4f62186f8809dddd37162ecae7084a3da8461750758b212f93c54c64dd77a\",\"license\":\"BUSL-1.1\"},\"contracts/Forces.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"./CountryMinter.sol\\\";\\nimport \\\"./Infrastructure.sol\\\";\\nimport \\\"./Resources.sol\\\";\\nimport \\\"./Wonders.sol\\\";\\nimport \\\"./Improvements.sol\\\";\\nimport \\\"./War.sol\\\";\\nimport \\\"./GroundBattle.sol\\\";\\nimport \\\"./CountryParameters.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n///@title ForcesContract\\n///@author OxSnosh\\n///@dev this contract inherits from the openzeppelin Ownable contract\\n///@notice this contract allows a nation owner to purchase soldiers, tanks and spies\\ncontract ForcesContract is Ownable, ReentrancyGuard {\\n    // uint256 public spyCost = 100000;\\n    address public countryMinter;\\n    address public treasuryAddress;\\n    address public aid;\\n    address public spyAddress;\\n    address public cruiseMissile;\\n    address public infrastructure;\\n    address public resources;\\n    address public improvements1;\\n    address public improvements2;\\n    address public wonders1;\\n    address public nukeAddress;\\n    address public airBattle;\\n    address public groundBattle;\\n    address public warAddress;\\n    address public keeper;\\n    address public parameters;\\n\\n    CountryMinter mint;\\n    InfrastructureContract inf;\\n    ResourcesContract res;\\n    WondersContract1 won1;\\n    ImprovementsContract1 imp1;\\n    ImprovementsContract2 imp2;\\n    WarContract war;\\n    GroundBattleContract ground;\\n    CountryParametersContract params;\\n\\n    struct Forces {\\n        bool initialized;\\n        uint256 numberOfSoldiers;\\n        uint256 defendingSoldiers;\\n        uint256 deployedSoldiers;\\n        uint256 numberOfTanks;\\n        uint256 defendingTanks;\\n        uint256 deployedTanks;\\n        bool nationExists;\\n    }\\n\\n    struct GroundBattleCasualties {\\n        uint256 soldierCasualties;\\n        uint256 tankCasualties;\\n    }\\n\\n    event SoldiersPurchased(uint256 indexed id, uint256 indexed amount);\\n\\n    event SoldiersDecommissioned(uint256 indexed id, uint256 indexed amount);\\n\\n    event TanksPurchased(uint256 indexed id, uint256 indexed amount);\\n\\n    event TanksDecommissioned(uint256 indexed id, uint256 indexed amount);\\n\\n    event ForcesDeployed(\\n        uint256 indexed id,\\n        uint256 indexed soldiers,\\n        uint256 indexed tanks,\\n        uint256 warId\\n    );\\n\\n    event SoldierDamageFromNukeAttack(\\n        uint256 indexed id,\\n        uint256 indexed amount\\n    );\\n\\n    event TankDamageFromAirAssault(uint256 indexed id, uint256 indexed amount);\\n\\n    event TankDamageFromCruiseMissile(\\n        uint256 indexed id,\\n        uint256 indexed amount\\n    );\\n\\n    event TankDamageFromNukeAttack(uint256 indexed id, uint256 indexed amount);\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings(\\n        address _treasuryAddress,\\n        address _aid,\\n        address _spyAddress,\\n        address _cruiseMissile,\\n        address _nukeAddress,\\n        address _airBattle,\\n        address _groundBattle,\\n        address _warAddress\\n    ) public onlyOwner {\\n        treasuryAddress = _treasuryAddress;\\n        spyAddress = _spyAddress;\\n        cruiseMissile = _cruiseMissile;\\n        aid = _aid;\\n        nukeAddress = _nukeAddress;\\n        airBattle = _airBattle;\\n        warAddress = _warAddress;\\n        war = WarContract(_warAddress);\\n        groundBattle = _groundBattle;\\n        ground = GroundBattleContract(_groundBattle);\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings2(\\n        address _infrastructure,\\n        address _resources,\\n        address _improvements1,\\n        address _improvements2,\\n        address _wonders1,\\n        address _countryMinter,\\n        address _keeper,\\n        address _parameters\\n    ) public onlyOwner {\\n        infrastructure = _infrastructure;\\n        inf = InfrastructureContract(_infrastructure);\\n        resources = _resources;\\n        res = ResourcesContract(_resources);\\n        wonders1 = _wonders1;\\n        won1 = WondersContract1(_wonders1);\\n        improvements1 = _improvements1;\\n        imp1 = ImprovementsContract1(_improvements1);\\n        improvements2 = _improvements2;\\n        imp2 = ImprovementsContract2(_improvements2);\\n        countryMinter = _countryMinter;\\n        mint = CountryMinter(_countryMinter);\\n        keeper = _keeper;\\n        parameters = _parameters;\\n        params = CountryParametersContract(_parameters);\\n    }\\n\\n    mapping(uint256 => Forces) public idToForces;\\n    mapping(uint256 => GroundBattleCasualties) public idToCasualties;\\n\\n    modifier onlyCountryMinter() {\\n        require(\\n            msg.sender == countryMinter,\\n            \\\"only callable from country minter contract\\\"\\n        );\\n        _;\\n    }\\n\\n    ///@dev this function is a public function but only callable from the country minter contact when a country is minted\\n    ///@notice this function allows a nation to purchase forces once a country is minted\\n    ///@param id this is the nation ID of the nation being minted\\n    function generateForces(uint256 id) public onlyCountryMinter {\\n        require(\\n            idToForces[id].initialized == false,\\n            \\\"Forces already initialized\\\"\\n        );\\n        Forces memory newForces = Forces(true, 20, 20, 0, 0, 0, 0, true);\\n        idToForces[id] = newForces;\\n    }\\n\\n    modifier onlyAidContract() {\\n        require(msg.sender == aid);\\n        _;\\n    }\\n\\n    modifier onlySpyContract() {\\n        require(msg.sender == spyAddress, \\\"only callable from spy contract\\\");\\n        _;\\n    }\\n\\n    modifier onlyCruiseMissileContract() {\\n        require(\\n            msg.sender == cruiseMissile,\\n            \\\"only callable from cruise missile contract\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyNukeContract() {\\n        require(msg.sender == nukeAddress, \\\"only callable from nuke contract\\\");\\n        _;\\n    }\\n\\n    modifier onlyAirBattle() {\\n        require(\\n            msg.sender == airBattle,\\n            \\\"only callable from air battle contract\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyGroundBattle() {\\n        require(\\n            msg.sender == groundBattle,\\n            \\\"only callable from ground battle contract\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyWar() {\\n        require(msg.sender == warAddress, \\\"only callable from war contract\\\");\\n        _;\\n    }\\n\\n    ///@dev this is a public function that allows a nation owner to purchase soldiers\\n    ///@notice this function will allow a nation owner to purchase soldiers\\n    ///@param amount is the amount of soldiers being purchased\\n    ///@param id is the nation id of the nation being queried\\n    function buySoldiers(uint256 amount, uint256 id) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        uint256 populationCount = inf.getTotalPopulationCount(id);\\n        uint256 maxSoldierCount = ((populationCount * 80) / 100);\\n        uint256 currentSoldierCount = idToForces[id].numberOfSoldiers;\\n        require(\\n            (currentSoldierCount + amount) <= maxSoldierCount,\\n            \\\"population cannot support that many soldiers\\\"\\n        );\\n        uint256 soldierCost = getSoldierCost(id);\\n        uint256 purchasePrice = soldierCost * amount;\\n        uint256 balance = TreasuryContract(treasuryAddress).checkBalance(id);\\n        require(\\n            balance >= purchasePrice,\\n            \\\"insufficient funds for soldier purchase\\\"\\n        );\\n        require(TreasuryContract(treasuryAddress).spendBalance(id, purchasePrice), \\n            \\\"failed to spend balance\\\"\\n        );\\n        idToForces[id].numberOfSoldiers += amount;\\n        idToForces[id].defendingSoldiers += amount;\\n        emit SoldiersPurchased(id, amount);\\n    }\\n\\n    ///@dev this is a public view function that will retrun the cost of soldiers for a nation\\n    ///@notice this will return the cost of a soldier for a nation\\n    ///@notice access to iron and oil resources decrease the cost of soldiers\\n    ///@param id is the nation ID of the nation being queried\\n    ///@return uint256 is the soldier cost for that nation\\n    function getSoldierCost(uint256 id) public view returns (uint256) {\\n        uint256 soldierCost = 12;\\n        bool iron = res.viewIron(id);\\n        if (iron) {\\n            soldierCost -= 3;\\n        }\\n        bool oil = res.viewOil(id);\\n        if (oil) {\\n            soldierCost -= 3;\\n        }\\n        return soldierCost;\\n    }\\n\\n    ///@dev this function is only callable from the aid contract\\n    ///@notice this function will allow the aid contact to send soldiers in an aid package\\n    ///@param idSender is the nation id of the aid sender\\n    ///@param idReciever is the nation id of the aid reciever\\n    ///@param amount is the amount of soldiers being sent\\n    function sendSoldiers(\\n        uint256 idSender,\\n        uint256 idReciever,\\n        uint256 amount\\n    ) public onlyAidContract returns (bool) {\\n        require(\\n            idToForces[idReciever].nationExists == true,\\n            \\\"Destination nation does not exist\\\"\\n        );\\n        idToForces[idSender].defendingSoldiers -= amount;\\n        idToForces[idSender].numberOfSoldiers -= amount;\\n        idToForces[idReciever].defendingSoldiers += amount;\\n        idToForces[idReciever].numberOfSoldiers += amount;\\n        return true;\\n    }\\n\\n    ///@dev this is a public view function that will return the amount of defending soldiers of a nation\\n    ///@notice this function will return the number of defending soldiers for a nation\\n    ///@param id is the nation ID of the nation being queried\\n    ///@return uint256 is the number of defending soldiers for the queried nation\\n    function getDefendingSoldierCount(\\n        uint256 id\\n    ) public view returns (uint256) {\\n        uint256 count = idToForces[id].defendingSoldiers;\\n        return count;\\n    }\\n\\n    ///@dev this is a public view function that will return the number of soldiers for a nation\\n    ///@notice this function will return the number of soldiers a nation has\\n    ///@param id this is the nation ID of the nation being queried\\n    ///@return soldiers is the nations soldier count\\n    function getSoldierCount(\\n        uint256 id\\n    ) public view returns (uint256 soldiers) {\\n        uint256 soldierAmount = idToForces[id].numberOfSoldiers;\\n        return soldierAmount;\\n    }\\n\\n    ///@dev this is a public view function that will return a nations deployed soldier count\\n    ///@notice this function returns the amount of deployed solders a nation has\\n    ///@param id is the nation ID for the nation being queried\\n    ///@return soldiers is the number of deployed soldiers for that nation\\n    function getDeployedSoldierCount(\\n        uint256 id\\n    ) public view returns (uint256 soldiers) {\\n        uint256 soldierAmount = idToForces[id].deployedSoldiers;\\n        return soldierAmount;\\n    }\\n\\n    ///@dev this is a public function that will allow a nation woner to deploy soldiers to a war\\n    ///@notice this function allows a nation owner to deploy soldiers to an active war\\n    ///@param soldiersToDeploy is the number of soldiers being deployed\\n    ///@param tanksToDeploy is the number of tanks being deployed\\n    ///@param id is the nation id of the nation deploying soldiers\\n    ///@param warId is the id of the active war\\n    function deployForces(\\n        uint256 soldiersToDeploy,\\n        uint256 tanksToDeploy,\\n        uint256 id,\\n        uint256 warId\\n    ) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        uint256 totalSoldiers = getSoldierCount(id);\\n        uint256 deployedSoldiers = getDeployedSoldierCount(id);\\n        uint256 maxDeployablePercentage = getMaxDeployablePercentage(id);\\n        uint256 defendingSoldierCount = idToForces[id].defendingSoldiers;\\n        require(\\n            defendingSoldierCount >= soldiersToDeploy,\\n            \\\"cannot deploy that many soldiers\\\"\\n        );\\n        if (soldiersToDeploy > 0 && totalSoldiers > 0) {\\n            require(\\n                (((deployedSoldiers + soldiersToDeploy) * 100) /\\n                    totalSoldiers) <= maxDeployablePercentage,\\n                \\\"deployment exceeds max deployable percentage\\\"\\n            );\\n        }\\n        uint256 defendingTankCount = idToForces[id].defendingTanks;\\n        require(\\n            defendingTankCount >= tanksToDeploy,\\n            \\\"deploying too many tanks\\\"\\n        );\\n        idToForces[id].defendingSoldiers -= soldiersToDeploy;\\n        idToForces[id].deployedSoldiers += soldiersToDeploy;\\n        idToForces[id].defendingTanks -= tanksToDeploy;\\n        idToForces[id].deployedTanks += tanksToDeploy;\\n        war.deployForcesToWar(id, warId, soldiersToDeploy, tanksToDeploy);\\n        emit ForcesDeployed(id, soldiersToDeploy, tanksToDeploy, warId);\\n    }\\n\\n    ///@dev this is a public view function that will return the maximum percentage of a population that is deployable\\n    ///@notice this function returns the maximum percentage of a population that is deployable to war\\n    ///@param id is the nation id of the nation deploying soldiers\\n    ///@return uint256 is the maximum percentage of a nations population that is deployable\\n    function getMaxDeployablePercentage(\\n        uint256 id\\n    ) public view returns (uint256) {\\n        uint256 maxDeployablePercentage = 80;\\n        uint256 borderFortificationCount = imp1.getBorderFortificationCount(id);\\n        if (borderFortificationCount > 0) {\\n            maxDeployablePercentage -= (2 * borderFortificationCount);\\n        }\\n        return maxDeployablePercentage;\\n    }\\n\\n    ///@dev this is a public function that allows a nation owner to withdraw deployed troops\\n    ///@notice this function lets a nation owner deploy troops from war\\n    ///@param amountToWithdraw is the amount of soldiers the nation owner is looking to withdraw\\n    ///@param id is the nation id of the nation withdrawing soldeirs\\n    function withdrawSoldiers(\\n        uint256 amountToWithdraw,\\n        uint256 id\\n    ) public onlyWar {\\n        uint256 deployedSoldierCount = idToForces[id].deployedSoldiers;\\n        require(\\n            deployedSoldierCount >= amountToWithdraw,\\n            \\\"not enough deployed soldiers to withdraw that many\\\"\\n        );\\n        idToForces[id].defendingSoldiers += amountToWithdraw;\\n        idToForces[id].deployedSoldiers -= amountToWithdraw;\\n    }\\n\\n    ///@dev this is a public function only callable from the Nuke Contract that will decrease the number of soldiers during a nuke attack\\n    ///@notice this function is only callable from the nuke contract\\n    ///@notice this function will decrease the amount of soldiers from a nuke strike\\n    ///@notice a fallout shelter system will decrease the number of soldiers lost by 50%\\n    ///@param id is the nation ID of the nation being attacked\\n    function decreaseDefendingSoldierCountFromNukeAttack(\\n        uint256 id\\n    ) public onlyNukeContract {\\n        bool falloutShelter = won1.getFalloutShelterSystem(id);\\n        if (!falloutShelter) {\\n            uint256 numberOfDefendingSoldiers = idToForces[id]\\n                .defendingSoldiers;\\n            idToForces[id].defendingSoldiers = 0;\\n            idToForces[id].numberOfSoldiers -= numberOfDefendingSoldiers;\\n            idToCasualties[id].soldierCasualties += numberOfDefendingSoldiers;\\n            emit SoldierDamageFromNukeAttack(id, numberOfDefendingSoldiers);\\n        } else {\\n            uint256 numberOfDefendingSoldierCasualties = ((\\n                idToForces[id].defendingSoldiers\\n            ) / 2);\\n            idToForces[id]\\n                .defendingSoldiers = numberOfDefendingSoldierCasualties;\\n            idToForces[id]\\n                .numberOfSoldiers -= numberOfDefendingSoldierCasualties;\\n            idToCasualties[id]\\n                .soldierCasualties += numberOfDefendingSoldierCasualties;\\n            emit SoldierDamageFromNukeAttack(\\n                id,\\n                numberOfDefendingSoldierCasualties\\n            );\\n        }\\n    }\\n\\n    ///@dev this is a public view function that will adjust the efficiency of a nations deployed soldiers\\n    ///@notice this function will adjust the efficiency of a nations deployed soldiers\\n    ///@notice aluminium, coal, oil, pigs, barracks, guerilla camps all increase the efficiency od deployed soldiers\\n    ///@param id this is the nation ID for the nation being queried\\n    ///@return uint256 this is the percentage modifier for a nations deployed forces\\n    function getDeployedSoldierEfficiencyModifier(\\n        uint256 id\\n    ) public view returns (uint256) {\\n        uint256 efficiencyModifier = 100;\\n        bool aluminum = res.viewAluminium(id);\\n        if (aluminum) {\\n            efficiencyModifier += 20;\\n        }\\n        bool coal = res.viewCoal(id);\\n        if (coal) {\\n            efficiencyModifier += 8;\\n        }\\n        bool oil = res.viewOil(id);\\n        if (oil) {\\n            efficiencyModifier += 10;\\n        }\\n        bool pigs = res.viewPigs(id);\\n        if (pigs) {\\n            efficiencyModifier += 15;\\n        }\\n        uint256 barracks = imp1.getBarracksCount(id);\\n        if (barracks > 0) {\\n            efficiencyModifier += (10 * barracks);\\n        }\\n        uint256 guerillaCamps = imp2.getGuerillaCampCount(id);\\n        if (guerillaCamps > 0) {\\n            efficiencyModifier += (35 * guerillaCamps);\\n        }\\n        uint256 governmentType = params.getGovernmentType(id);\\n        if (\\n            governmentType == 2 ||\\n            governmentType == 3 ||\\n            governmentType == 4 ||\\n            governmentType == 5 ||\\n            governmentType == 10\\n        ) {\\n            efficiencyModifier += 8;\\n        }\\n        return efficiencyModifier;\\n    }\\n\\n    ///@dev this is a public view function that will adjust the efficiency of a nations defending soldiers\\n    ///@notice this function will adjust the efficiency of a nations defending soldiers\\n    ///@notice aluminium, coal, oil, pigs, barracks, border fortifications and forward operating bases all increase the efficiency od defending soldiers\\n    ///@param id this is the nation ID for the nation being queried\\n    ///@return uint256 this is the percentage modifier for a nations defending forces\\n    function getDefendingSoldierEfficiencyModifier(\\n        uint256 id\\n    ) public view returns (uint256) {\\n        uint256 efficiencyModifier = 100;\\n        bool aluminum = res.viewAluminium(id);\\n        if (aluminum) {\\n            efficiencyModifier += 20;\\n        }\\n        bool coal = res.viewCoal(id);\\n        if (coal) {\\n            efficiencyModifier += 8;\\n        }\\n        bool oil = res.viewOil(id);\\n        if (oil) {\\n            efficiencyModifier += 10;\\n        }\\n        bool pigs = res.viewPigs(id);\\n        if (pigs) {\\n            efficiencyModifier += 15;\\n        }\\n        uint256 barracks = imp1.getBarracksCount(id);\\n        if (barracks > 0) {\\n            efficiencyModifier += (10 * barracks);\\n        }\\n        uint256 borderFortification = imp1.getBorderFortificationCount(id);\\n        if (borderFortification > 0) {\\n            efficiencyModifier += (borderFortification * 2);\\n        }\\n        uint256 fobCount = imp2.getForwardOperatingBaseCount(id);\\n        if (fobCount > 0) {\\n            efficiencyModifier -= (fobCount * 3);\\n        }\\n        uint256 guerillaCamps = imp2.getGuerillaCampCount(id);\\n        if (guerillaCamps > 0) {\\n            efficiencyModifier += (35 * guerillaCamps);\\n        }\\n        uint256 governmentType = params.getGovernmentType(id);\\n        if (\\n            governmentType == 2 ||\\n            governmentType == 3 ||\\n            governmentType == 4 ||\\n            governmentType == 5 ||\\n            governmentType == 10\\n        ) {\\n            efficiencyModifier += 8;\\n        }\\n        return efficiencyModifier;\\n    }\\n\\n    ///@dev this is a public function that allows a nation owner to decommission soldiers\\n    ///@notice this function allows a nation owner to decomission soldiers\\n    ///@param amount is the amount of soldiers being decomissioned\\n    ///@param id is the nation ID of the nation\\n    function decommissionSoldiers(uint256 amount, uint256 id) public {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        uint256 defendingSoldierCount = getDefendingSoldierCount(id);\\n        require(\\n            (defendingSoldierCount - amount) >= 0,\\n            \\\"not enough defending soldiers\\\"\\n        );\\n        idToForces[id].defendingSoldiers -= amount;\\n        idToForces[id].numberOfSoldiers -= amount;\\n        emit SoldiersDecommissioned(id, amount);\\n    }\\n\\n    ///@dev this is a public function that allows a nation owner to buy tanks\\n    ///@notice this function allows a nation owner to buy tanks\\n    ///@notice tanks cost 40X what soldeirs cost a nation\\n    ///@notice factories reduce the cost of tanks 5% per factory\\n    ///@param amount is the number of tanks being purchased\\n    ///@param id is the nation ID of the nation purchasing tanks\\n    function buyTanks(uint256 amount, uint256 id) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        uint256 maxTanks = getMaxTankCount(id);\\n        uint256 currentTanks = idToForces[id].numberOfTanks;\\n        require(\\n            (currentTanks + amount) <= maxTanks,\\n            \\\"cannot buy that many tanks\\\"\\n        );\\n        uint256 costPerTank = getTankCost(id);\\n        uint256 cost = (costPerTank * amount);\\n        uint256 balance = TreasuryContract(treasuryAddress).checkBalance(id);\\n        require(balance >= cost, \\\"insufficient funds for tank purchase\\\");\\n        require(TreasuryContract(treasuryAddress).spendBalance(id, cost), \\n            \\\"failed to spend balance\\\"\\n        );\\n        idToForces[id].numberOfTanks += amount;\\n        idToForces[id].defendingTanks += amount;\\n        emit TanksPurchased(id, amount);\\n    }\\n\\n    ///@dev this is a public function that allows a nation owner to decommission soldiers\\n    ///@notice this function allows a nation owner to decomission soldiers\\n    ///@param amount is the amount of soldiers being decomissioned\\n    ///@param id is the nation ID of the nation\\n    function decommissionTanks(uint256 amount, uint256 id) public {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        uint256 defendingTankCount = getDefendingTankCount(id);\\n        require(\\n            (defendingTankCount - amount) >= 0,\\n            \\\"not enough defending tanks\\\"\\n        );\\n        idToForces[id].defendingTanks -= amount;\\n        idToForces[id].numberOfTanks -= amount;\\n        emit TanksDecommissioned(id, amount);\\n    }\\n\\n    ///@dev this is a public view function that will return the maximum amount of tanks a nation can own\\n    ///@notice this function returns the maximum amount of tanks a nation can own\\n    ///@notice a nation's max tanks is the lesser of 10% of soldier efficiency or 8% of citizens\\n    ///@param id is the nation ID of the nation being queried\\n    ///@return uint256 is the maximum amount of tanks that nation can own\\n    function getMaxTankCount(uint256 id) public view returns (uint256) {\\n        uint256 soldiers = getSoldierCount(id);\\n        uint256 efficiency = getDefendingSoldierEfficiencyModifier(id);\\n        uint256 modifiedSoldierCount = ((soldiers * efficiency) / 100);\\n        uint256 tankMax = (modifiedSoldierCount / 10);\\n        uint256 citizenCount = inf.getTotalPopulationCount(id);\\n        uint256 tankMaxByCitizen = ((citizenCount * 8) / 100);\\n        if (tankMaxByCitizen < tankMax) {\\n            tankMax = tankMaxByCitizen;\\n        }\\n        return tankMax;\\n    }\\n\\n    ///@dev this is a public view function that will return the cost a nation has to pay for tanks\\n    ///@notice the default cost of a tank is soldier cost * 40\\n    ///@notice tank cost will be reduced by 5% for every factory owned\\n    ///@param id is the nation id of the nation buying tanks\\n    ///@return cost is the cost per tank for a given nation\\n    function getTankCost(uint256 id) public view returns (uint256) {\\n        uint256 soldierCost = getSoldierCost(id);\\n        uint256 purchasePrice = soldierCost * 40;\\n        uint256 factoryCount = imp1.getFactoryCount(id);\\n        uint256 costModifier = 100;\\n        if (factoryCount > 0) {\\n            costModifier -= (factoryCount * 5);\\n        }\\n        bool lead = res.viewLead(id);\\n        if (lead) {\\n            costModifier -= 8;\\n        }\\n        uint256 cost = ((purchasePrice * costModifier) / 100);\\n        return cost;\\n    }\\n\\n    function withdrawTanks(\\n        uint256 amountToWithdraw,\\n        uint256 id\\n    ) public onlyWar {\\n        uint256 deployedTankCount = idToForces[id].deployedTanks;\\n        require(\\n            deployedTankCount >= amountToWithdraw,\\n            \\\"not enough tanks to withdraw that many\\\"\\n        );\\n        idToForces[id].defendingTanks += amountToWithdraw;\\n        idToForces[id].deployedTanks -= amountToWithdraw;\\n    }\\n\\n    ///@dev this is a public view function that can only be called by the Spy Contract\\n    ///@notice this funtion will allow the spy contract to decrease the number of defending tanks in a spy attack\\n    ///@param amount is the amount of tanks being decreased\\n    ///@param id is the nation id of the nation being attacked\\n    function decreaseDefendingTankCount(\\n        uint256 amount,\\n        uint256 id\\n    ) public onlySpyContract {\\n        require(\\n            idToForces[id].defendingTanks >= amount,\\n            \\\"not enough tanks to remove\\\"\\n        );\\n        idToForces[id].defendingTanks -= amount;\\n        idToForces[id].numberOfTanks -= amount;\\n    }\\n\\n    ///@dev this is a public function that can only be called from the cruise missile contract\\n    ///@notice this funtion will allow the cruise missile contact to decrease the number of tanks in a cruise missile attack\\n    ///@param amount is the number of tanks being decreased\\n    ///@param id is the nation id of the nation being attacked\\n    function decreaseDefendingTankCountFromCruiseMissileContract(\\n        uint256 amount,\\n        uint256 id\\n    ) public onlyCruiseMissileContract {\\n        require(\\n            idToForces[id].defendingTanks >= amount,\\n            \\\"not enough tanks to remove\\\"\\n        );\\n        idToForces[id].defendingTanks -= amount;\\n        idToForces[id].numberOfTanks -= amount;\\n        emit TankDamageFromCruiseMissile(id, amount);\\n    }\\n\\n    ///@dev this is a public function that can only be called from the nuke contract\\n    ///@notice this funtion will allow the cruise missile contact to decrease the number of tanks in a nuke attack\\n    ///@param id is the nation id of the nation being attacked\\n    function decreaseDefendingTankCountFromNukeContract(\\n        uint256 id\\n    ) public onlyNukeContract {\\n        uint256 defendingTanks = idToForces[id].defendingTanks;\\n        uint256 percentage = 35;\\n        bool falloutShelter = won1.getFalloutShelterSystem(id);\\n        if (falloutShelter) {\\n            percentage = 25;\\n        }\\n        uint256 defendingTanksToDecrease = ((defendingTanks * percentage) /\\n            100);\\n        idToForces[id].numberOfTanks -= defendingTanksToDecrease;\\n        idToForces[id].defendingTanks -= defendingTanksToDecrease;\\n        emit TankDamageFromNukeAttack(id, defendingTanksToDecrease);\\n    }\\n\\n    ///@dev this is a public function that can only be called from the air battle contract\\n    ///@notice this funtion will allow the cruise missile contact to decrease the number of tanks in a bombing attack\\n    ///@param amountToDecrease is the number of tanks being decreased\\n    ///@param id is the nation id of the nation being attacked\\n    function decreaseDefendingTankCountFromAirBattleContract(\\n        uint256 id,\\n        uint256 amountToDecrease\\n    ) public onlyAirBattle returns (bool) {\\n        uint256 defendingTanks = idToForces[id].defendingTanks;\\n        if (amountToDecrease > 30) {\\n            amountToDecrease = 30;\\n        }\\n        if (amountToDecrease >= defendingTanks) {\\n            idToForces[id].numberOfTanks -= defendingTanks;\\n            idToForces[id].defendingTanks = 0;\\n            amountToDecrease = defendingTanks;\\n        } else {\\n            idToForces[id].numberOfTanks -= amountToDecrease;\\n            idToForces[id].defendingTanks -= amountToDecrease;\\n        }\\n        emit TankDamageFromAirAssault(id, amountToDecrease);\\n        return true;\\n    }\\n\\n    ///@dev this is a public view function that will return the number of tanks a nation has\\n    ///@notice this function will return the number of tanks for a nation\\n    ///@param id is the nation id for the nation being queried\\n    ///@return tanks is the number of tanks for the nation being queried\\n    function getTankCount(uint256 id) public view returns (uint256 tanks) {\\n        uint256 tankAmount = idToForces[id].numberOfTanks;\\n        return tankAmount;\\n    }\\n\\n    ///@dev this is a public view function that will return the number of deployed tanks a nation has\\n    ///@notice this function will return the number of deployed tanks for a nation\\n    ///@param id is the nation id for the nation being queried\\n    ///@return tanks is the number of deployed tanks for the nation being queried\\n    function getDeployedTankCount(\\n        uint256 id\\n    ) public view returns (uint256 tanks) {\\n        uint256 tankAmount = idToForces[id].deployedTanks;\\n        return tankAmount;\\n    }\\n\\n    ///@dev this is a public view function that will return the number of defending tanks a nation has\\n    ///@notice this function will return the number of defending tanks for a nation\\n    ///@param id is the nation id for the nation being queried\\n    ///@return tanks is the number of defending tanks for the nation being queried\\n    function getDefendingTankCount(\\n        uint256 id\\n    ) public view returns (uint256 tanks) {\\n        uint256 tankAmount = idToForces[id].defendingTanks;\\n        return tankAmount;\\n    }\\n\\n    ///@dev this is a public function only callable from the ground battle contract\\n    ///@dev this function will decrease the losses of an attacker during a ground battle\\n    ///@notice this function will decrease the number of losses of an attacker during a ground battle\\n    ///@param attackerSoldierLosses is the soldier losses for an attacker from a battle\\n    ///@param attackerTankLosses is the tank losses for an attacker from a battle\\n    ///@param attackerId is the nation ID of the nation suffering losses\\n    function decreaseUnits(\\n        uint256 attackerSoldierLosses,\\n        uint256 attackerTankLosses,\\n        uint256 attackerId,\\n        uint256 defenderSoldierLosses,\\n        uint256 defenderTankLosses,\\n        uint256 defenderId\\n    ) public onlyGroundBattle {\\n        require(\\n            idToForces[attackerId].numberOfSoldiers >= attackerSoldierLosses,\\n            \\\"not enough soldiers to remove\\\"\\n        );\\n        require(\\n            idToForces[attackerId].numberOfTanks >= attackerTankLosses,\\n            \\\"not enough tanks to remove\\\"\\n        );\\n        require(\\n            idToForces[defenderId].numberOfSoldiers >= defenderSoldierLosses,\\n            \\\"not enough soldiers to remove\\\"\\n        );\\n        require(\\n            idToForces[defenderId].numberOfTanks >= defenderTankLosses,\\n            \\\"not enough tanks to remove\\\"\\n        );\\n        idToForces[attackerId].numberOfSoldiers -= attackerSoldierLosses;\\n        idToForces[attackerId].deployedSoldiers -= attackerSoldierLosses;\\n        idToForces[attackerId].numberOfTanks -= attackerTankLosses;\\n        idToForces[attackerId].deployedTanks -= attackerTankLosses;\\n        idToForces[defenderId].numberOfSoldiers -= defenderSoldierLosses;\\n        idToForces[defenderId].defendingSoldiers -= defenderSoldierLosses;\\n        idToForces[defenderId].numberOfTanks -= defenderTankLosses;\\n        idToForces[defenderId].defendingTanks -= defenderTankLosses;\\n        idToCasualties[attackerId].soldierCasualties += attackerSoldierLosses;\\n        idToCasualties[attackerId].tankCasualties += attackerTankLosses;\\n        idToCasualties[defenderId].soldierCasualties += defenderSoldierLosses;\\n        idToCasualties[defenderId].tankCasualties += defenderTankLosses;\\n    }\\n\\n    ///@dev this is a function for the development environment that will assist in testing wonders and improvements that are available after a certain number of casualties\\n    function increaseSoldierCasualties(\\n        uint256 id,\\n        uint256 amount\\n    ) public onlyOwner {\\n        idToCasualties[id].soldierCasualties += amount;\\n    }\\n\\n    ///@dev this is a public view function that will return a nations casualty count\\n    ///@notice this function will return a nations casualty count\\n    ///@param id is a nation id for the nation being queried\\n    ///@return uint256 is the soldier casualty count for a given nation\\n    ///@return uint256 is the tank casualty count for a given nation\\n    function getCasualties(uint256 id) public view returns (uint256, uint256) {\\n        uint256 soldierCasualties = idToCasualties[id].soldierCasualties;\\n        uint256 tankCasualties = idToCasualties[id].tankCasualties;\\n        return (soldierCasualties, tankCasualties);\\n    }\\n}\\n\",\"keccak256\":\"0xebc9ed25500b8c889b6ec4a28badd019779160408dd2df4bb2a666ca9ceaf86d\",\"license\":\"BUSL-1.1\"},\"contracts/GroundBattle.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"./War.sol\\\";\\nimport \\\"./Infrastructure.sol\\\";\\nimport \\\"./Forces.sol\\\";\\nimport \\\"./Treasury.sol\\\";\\nimport \\\"./Improvements.sol\\\";\\nimport \\\"./Wonders.sol\\\";\\nimport \\\"./CountryMinter.sol\\\";\\nimport \\\"./Taxes.sol\\\";\\nimport \\\"./CountryParameters.sol\\\";\\nimport \\\"./Military.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n///@title GroundBattleContract\\n///@author OxSnosh\\n///@dev this contract inherits from the openzeppelin ownable contract\\n///@dev this contract inherits from the chainlink vrf contract\\n///@notice the GroundBattleContract will allow nations at war to launch ground attacks against each other\\ncontract GroundBattleContract is Ownable, VRFConsumerBaseV2, ReentrancyGuard {\\n\\n    uint256 groundBattleId;\\n    address warAddress;\\n    address infrastructure;\\n    address forces;\\n    address treasury;\\n    address improvements2;\\n    address improvements4;\\n    address wonders3;\\n    address wonders4;\\n    address countryMinter;\\n    address additionalTaxes;\\n    address parameters;\\n    address military;\\n\\n    uint256[] public todaysGroundBattles;\\n\\n    WarContract war;\\n    InfrastructureContract inf;\\n    ForcesContract force;\\n    TreasuryContract tsy;\\n    ImprovementsContract2 imp2;\\n    ImprovementsContract4 imp4;\\n    WondersContract3 won3;\\n    WondersContract4 won4;\\n    CountryMinter mint;\\n    AdditionalTaxesContract addTax;\\n    CountryParametersContract param;\\n    MilitaryContract mil;\\n\\n    struct GroundForcesToBattle {\\n        uint256 attackType;\\n        uint256 soldierCount;\\n        uint256 tankCount;\\n        uint256 strength;\\n        uint256 countryId;\\n        uint256 warId;\\n    }\\n\\n    struct BattleResults {\\n        uint256 nationId;\\n        uint256 soldierLosses;\\n        uint256 tankLosses;\\n        uint256 defenderId;\\n        uint256 defenderSoldierLosses;\\n        uint256 defenderTankLosses;\\n    }\\n\\n    //Chainlik Variables\\n    uint256[] private s_randomWords;\\n    VRFCoordinatorV2Interface public i_vrfCoordinator;\\n    uint64 private immutable i_subscriptionId;\\n    bytes32 private immutable i_gasLane;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private constant NUM_WORDS = 10;\\n\\n    mapping(uint256 => GroundForcesToBattle) groundBattleIdToAttackerForces;\\n    mapping(uint256 => GroundForcesToBattle) groundBattleIdToDefenderForces;\\n    \\n    mapping(uint256 => uint256) s_requestIdToRequestIndex;\\n    mapping(uint256 => uint256[]) public s_requestIndexToRandomWords;\\n\\n    event BattleResultsEvent (\\n        uint256 battleId,\\n        uint256 attackSolderLosses,\\n        uint256 attackTankLosses,\\n        uint256 defenderSoldierLosses,\\n        uint256 defenderTankLosses\\n    );\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint64 subscriptionId,\\n        bytes32 gasLane, // keyHash\\n        uint32 callbackGasLimit\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n    }\\n\\n    function updateVRFCoordinator(\\n        address vrfCoordinatorV2\\n    ) public onlyOwner {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n    }\\n\\n    function settings(\\n        address _warAddress,\\n        address _infrastructure,\\n        address _forces,\\n        address _treasury,\\n        address _countryMinter,\\n        address _military\\n    ) public onlyOwner {\\n        warAddress = _warAddress;\\n        war = WarContract(_warAddress);\\n        infrastructure = _infrastructure;\\n        inf = InfrastructureContract(_infrastructure);\\n        forces = _forces;\\n        force = ForcesContract(_forces);\\n        treasury = _treasury;\\n        tsy = TreasuryContract(_treasury);\\n        countryMinter = _countryMinter;\\n        mint = CountryMinter(_countryMinter);\\n        military = _military;\\n        mil = MilitaryContract(_military);\\n    }\\n\\n    function settings2(\\n        address _improvements2,\\n        address _improvements4,\\n        address _wonders3,\\n        address _wonders4,\\n        address _additionalTaxes,\\n        address _parameters\\n    ) public onlyOwner {\\n        improvements2 = _improvements2;\\n        imp2 = ImprovementsContract2(_improvements2);\\n        improvements4 = _improvements4;\\n        imp4 = ImprovementsContract4(_improvements4);\\n        wonders3 = _wonders3;\\n        won3 = WondersContract3(_wonders3);\\n        wonders4 = _wonders4;\\n        won4 = WondersContract4(_wonders4);\\n        additionalTaxes = _additionalTaxes;\\n        addTax = AdditionalTaxesContract(_additionalTaxes);\\n        parameters = _parameters;\\n        param = CountryParametersContract(_parameters);\\n    }\\n\\n    function updateWarContract(address newAddress) public onlyOwner {\\n        warAddress = newAddress;\\n        war = WarContract(newAddress);\\n    }\\n\\n    function updateInfrastructureContract(address newAddress) public onlyOwner {\\n        infrastructure = newAddress;\\n        inf = InfrastructureContract(newAddress);\\n    }\\n\\n    function updateForcesContract(address newAddress) public onlyOwner {\\n        forces = newAddress;\\n        force = ForcesContract(newAddress);\\n    }\\n\\n    function updateTreasuryContract(address newAddress) public onlyOwner {\\n        treasury = newAddress;\\n        tsy = TreasuryContract(newAddress);\\n    }\\n\\n    function updateImprovemetsContract2(address newAddress) public onlyOwner {\\n        improvements2 = newAddress;\\n        imp2 = ImprovementsContract2(newAddress);\\n    }\\n\\n    function updateWondersContract3(address newAddress) public onlyOwner {\\n        wonders3 = newAddress;\\n        won3 = WondersContract3(newAddress);\\n    }\\n\\n    function updateWondersContract4(address newAddress) public onlyOwner {\\n        wonders4 = newAddress;\\n        won4 = WondersContract4(newAddress);\\n    }\\n\\n    function battleOdds(\\n        uint256 _warId,\\n        uint256 attackerId\\n    ) public view returns (uint256 attackerOdds, uint256 defenderOdds) {\\n        (uint256 warOffense, uint256 warDefense) = war.getInvolvedParties(\\n            _warId\\n        );\\n        uint256 attackerStrength;\\n        uint256 defenderStrength;\\n        uint256 attackerOddsOfVictory;\\n        uint256 defenderOddsOfVictory;\\n        if (attackerId == warOffense) {\\n            attackerStrength = getAttackerForcesStrength(warOffense, _warId);\\n            defenderStrength = getDefenderForcesStrength(warDefense, _warId);\\n            attackerOddsOfVictory = ((attackerStrength * 100) /\\n                (attackerStrength + defenderStrength));\\n            defenderOddsOfVictory = ((defenderStrength * 100) /\\n                (attackerStrength + defenderStrength));\\n        } else if (attackerId == warDefense) {\\n            attackerStrength = getAttackerForcesStrength(warDefense, _warId);\\n            defenderStrength = getDefenderForcesStrength(warOffense, _warId);\\n            attackerOddsOfVictory = ((attackerStrength * 100) /\\n                (attackerStrength + defenderStrength));\\n            defenderOddsOfVictory = ((defenderStrength * 100) /\\n                (attackerStrength + defenderStrength));\\n        }\\n        return (attackerOddsOfVictory, defenderOddsOfVictory);\\n    }\\n\\n    ///@dev this is a public function callable only from a nation owner\\n    ///@dev this contract allows nations at war to launch a ground attack against each other\\n    ///@notice this contract allows nations at war to launch a ground attack against each other\\n    ///@param warId is the war id of the war between the 2 nations in the battle\\n    ///@param attackerId is the nation id of the attacking nation\\n    ///@param defenderId is the nation id of the defending nation\\n    ///@param attackType 1. planned 2. standard 3. aggressive 4. beserk\\n    function groundAttack(\\n        uint256 warId,\\n        uint256 attackerId,\\n        uint256 defenderId,\\n        uint256 attackType\\n    ) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(attackerId, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        bool isActiveWar = war.isWarActive(warId);\\n        require(isActiveWar, \\\"!not active war\\\");\\n        (uint256 warOffense, uint256 warDefense) = war.getInvolvedParties(\\n            warId\\n        );\\n        require(\\n            warOffense == attackerId || warOffense == defenderId,\\n            \\\"invalid parameters\\\"\\n        );\\n        require(\\n            warDefense == attackerId || warDefense == defenderId,\\n            \\\"invalid parameters\\\"\\n        );\\n        require(\\n            attackType == 1 ||\\n                attackType == 2 ||\\n                attackType == 3 ||\\n                attackType == 4,\\n            \\\"invalid attack type\\\"\\n        );\\n        generateAttackerForcesStruct(\\n            warId,\\n            groundBattleId,\\n            attackerId,\\n            attackType\\n        );\\n        generateDefenderForcesStruct(warId, groundBattleId, defenderId);\\n        war.cancelPeaceOffersUponAttack(warId);\\n        fulfillRequest(groundBattleId);\\n        groundBattleId++;\\n    }\\n\\n    function generateAttackerForcesStruct(\\n        uint256 warId,\\n        uint256 battleId,\\n        uint256 attackerId,\\n        uint256 attackType\\n    ) internal {\\n        (uint256 soldiersDeployed, uint256 tanksDeployed) = war\\n            .getDeployedGroundForces(warId, attackerId);\\n        uint256 attackerForcesStrength = getAttackerForcesStrength(\\n            attackerId,\\n            warId\\n        );\\n        GroundForcesToBattle memory newGroundForces = GroundForcesToBattle(\\n            attackType,\\n            soldiersDeployed,\\n            tanksDeployed,\\n            attackerForcesStrength,\\n            attackerId,\\n            warId\\n        );\\n        groundBattleIdToAttackerForces[battleId] = newGroundForces;\\n    }\\n\\n    function returnAttackerForcesStruct(\\n        uint256 battleId\\n    )\\n        public\\n        view\\n        returns (uint256, uint256, uint256, uint256, uint256, uint256)\\n    {\\n        uint256 attackType = groundBattleIdToAttackerForces[battleId]\\n            .attackType;\\n        uint256 soldiersDeployed = groundBattleIdToAttackerForces[battleId]\\n            .soldierCount;\\n        uint256 tanksDeployed = groundBattleIdToAttackerForces[battleId]\\n            .tankCount;\\n        uint256 attackerForcesStrength = groundBattleIdToAttackerForces[\\n            battleId\\n        ].strength;\\n        uint256 attackerId = groundBattleIdToAttackerForces[battleId].countryId;\\n        uint256 warId = groundBattleIdToAttackerForces[battleId].warId;\\n        return (\\n            attackType,\\n            soldiersDeployed,\\n            tanksDeployed,\\n            attackerForcesStrength,\\n            attackerId,\\n            warId\\n        );\\n    }\\n\\n    function generateDefenderForcesStruct(\\n        uint256 warId,\\n        uint256 battleId,\\n        uint256 defenderId\\n    ) internal {\\n        uint256 soldiers = force.getDefendingSoldierCount(defenderId);\\n        uint256 tanks = force.getDefendingTankCount(defenderId);\\n        uint256 defenderForcesStrength = getDefenderForcesStrength(\\n            defenderId,\\n            battleId\\n        );\\n        GroundForcesToBattle memory newGroundForces = GroundForcesToBattle(\\n            0,\\n            soldiers,\\n            tanks,\\n            defenderForcesStrength,\\n            defenderId,\\n            warId\\n        );\\n        groundBattleIdToDefenderForces[battleId] = newGroundForces;\\n    }\\n\\n    function returnDefenderForcesStruct(\\n        uint256 battleId\\n    ) public view returns (uint256, uint256, uint256, uint256, uint256) {\\n        uint256 soldiersDefending = groundBattleIdToDefenderForces[battleId]\\n            .soldierCount;\\n        uint256 tanksDefending = groundBattleIdToDefenderForces[battleId]\\n            .tankCount;\\n        uint256 defendingForcesStrength = groundBattleIdToDefenderForces[\\n            battleId\\n        ].strength;\\n        uint256 defenderId = groundBattleIdToDefenderForces[battleId].countryId;\\n        uint256 warId = groundBattleIdToDefenderForces[battleId].warId;\\n        return (\\n            soldiersDefending,\\n            tanksDefending,\\n            defendingForcesStrength,\\n            defenderId,\\n            warId\\n        );\\n    }\\n\\n    function getAttackerForcesStrength(\\n        uint256 attackerId,\\n        uint256 warId\\n    ) public view returns (uint256) {\\n        (, uint256 tanksDeployed) = war.getDeployedGroundForces(\\n            warId,\\n            attackerId\\n        );\\n        uint256 soldierEfficiency = getAttackingSoldierEfficiency(\\n            attackerId,\\n            warId\\n        );\\n        uint256 attackerTech = inf.getTechnologyCount(attackerId);\\n        uint256 strength = (soldierEfficiency + (15 * tanksDeployed) + (attackerTech));\\n        uint256 mod = 100;\\n        bool pentagon = won3.getPentagon(attackerId);\\n        if (pentagon) {\\n            mod += 20;\\n        }\\n        bool logisticalSupport = won4.getSuperiorLogisticalSupport(attackerId);\\n        if (logisticalSupport) {\\n            mod += 10;\\n        }\\n        //tanks\\n        uint256 tankModifier = (tanksDeployed / 100);\\n        if (tankModifier > 75) {\\n            tankModifier = 75;\\n        }\\n        mod += tankModifier;\\n        //defcon\\n        uint256 defcon = mil.getDefconLevel(attackerId);\\n        mod += ((5 - defcon) * 5);\\n        strength = ((strength * mod) / 100);\\n        return strength;\\n    }\\n\\n    function getAttackingSoldierEfficiency(\\n        uint256 attackerId,\\n        uint256 _warId\\n    ) public view returns (uint256) {\\n        (uint256 attackingSoldiers, ) = war.getDeployedGroundForces(\\n            _warId,\\n            attackerId\\n        );\\n        uint256 attackingEfficiencyModifier = force\\n            .getDeployedSoldierEfficiencyModifier(attackerId);\\n        uint256 attackingSoldierEfficiency = ((attackingSoldiers *\\n            attackingEfficiencyModifier) / 100);\\n        return attackingSoldierEfficiency;\\n    }\\n\\n    function getDefenderForcesStrength(\\n        uint256 defenderId,\\n        uint256 _warId\\n    ) public view returns (uint256) {\\n        uint256 soldierEfficiency = getDefendingSoldierEfficiency(defenderId);\\n        uint256 tanks = force.getDefendingTankCount(defenderId);\\n        uint256 defenderTech = inf.getTechnologyCount(defenderId);\\n        uint256 strength = ((soldierEfficiency) + (17 * tanks) + (defenderTech));\\n        (uint256 warOffense, uint256 warDefense) = war.getInvolvedParties(\\n            _warId\\n        );\\n        uint256 attackerId;\\n        if (defenderId == warOffense) {\\n            attackerId = warDefense;\\n        } else if (defenderId == warDefense) {\\n            attackerId = warOffense;\\n        }\\n        uint256 mod = getDefenderStrengthModifier(defenderId, attackerId);\\n        strength = ((strength * mod) / 100);\\n        return strength;\\n    }\\n\\n    function getDefendingSoldierEfficiency(\\n        uint256 id\\n    ) public view returns (uint256) {\\n        uint256 defendingSoldiers = force.getDefendingSoldierCount(id);\\n        uint256 defendingEfficiencyModifier = force\\n            .getDefendingSoldierEfficiencyModifier(id);\\n        uint256 defendingSoldierEfficiency = ((defendingSoldiers *\\n            defendingEfficiencyModifier) / 100);\\n        return defendingSoldierEfficiency;\\n    }\\n\\n    function getDefenderStrengthModifier(uint256 defenderId, uint256 attackerId) public view returns (uint256) {\\n        uint256 mod = 100;\\n        uint256 officeOfPropagandaCount = imp4.getOfficeOfPropagandaCount(\\n            attackerId\\n        );\\n        bool pentagon = won3.getPentagon(defenderId);\\n        bool logisticalSupport = won4.getSuperiorLogisticalSupport(defenderId);\\n        if (officeOfPropagandaCount > 0) {\\n            mod -= (5 * officeOfPropagandaCount);\\n        }\\n        if (pentagon) {\\n            mod += 20;\\n        }\\n        if (logisticalSupport) {\\n            mod += 10;\\n        }\\n        //infrastructure\\n        uint256 infrastructureLevel = inf.getInfrastructureCount(defenderId);\\n        uint256 infrastructureModifier = (infrastructureLevel / 100);\\n        if (infrastructureModifier > 75) {\\n            infrastructureModifier = 75;\\n        }\\n        mod += infrastructureModifier;\\n        //defcon\\n        uint256 defcon = mil.getDefconLevel(defenderId);\\n        mod += ((5 - defcon) * 5);\\n        return mod;\\n    }\\n\\n    event RandomnessRequested(\\n        uint256 requestId,\\n        uint256 battleId\\n    );\\n\\n    function fulfillRequest(uint256 battleId) internal {\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        s_requestIdToRequestIndex[requestId] = battleId;\\n        emit RandomnessRequested(\\n            requestId,\\n            battleId\\n        );        \\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 requestId,\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 battleId = s_requestIdToRequestIndex[requestId];\\n        s_requestIndexToRandomWords[battleId] = randomWords;\\n        uint256 attackerStrength = groundBattleIdToAttackerForces[battleId]\\n            .strength;\\n        uint256 defenderStrength = groundBattleIdToDefenderForces[battleId]\\n            .strength;\\n        uint256 attackerId = groundBattleIdToAttackerForces[battleId]\\n            .countryId;\\n        uint256 defenderId = groundBattleIdToDefenderForces[battleId]\\n            .countryId;\\n        uint256 warId = groundBattleIdToAttackerForces[battleId].warId;\\n        uint256 totalStrength = (attackerStrength + defenderStrength);\\n        uint256 randomVictoryNumber = randomWords[0] % totalStrength;\\n        uint256 attackerSoldierLosses;\\n        uint256 attackerTankLosses;\\n        uint256 defenderSoldierLosses;\\n        uint256 defenderTankLosses;\\n        if (randomVictoryNumber < attackerStrength) {\\n            //attack victorious\\n            (\\n                attackerSoldierLosses,\\n                attackerTankLosses,\\n                defenderSoldierLosses,\\n                defenderTankLosses\\n            ) = attackVictory(battleId);\\n        } else {\\n            //defense victorious\\n            (\\n                attackerSoldierLosses,\\n                attackerTankLosses,\\n                defenderSoldierLosses,\\n                defenderTankLosses\\n            ) = defenseVictory(battleId);\\n        }\\n        completeBattleSequence(\\n            battleId,\\n            attackerId,\\n            attackerSoldierLosses,\\n            attackerTankLosses,\\n            defenderId,\\n            defenderSoldierLosses,\\n            defenderTankLosses,\\n            warId\\n        );\\n    }\\n\\n    event GroundBattleResultsEvent (\\n        uint256 battleId,\\n        uint256 warId,\\n        uint256 attackerId,\\n        uint256 attackSoldierLosses,\\n        uint256 attackTankLosses,\\n        uint256 defenderId,\\n        uint256 defenderSoldierLosses,\\n        uint256 defenderTankLosses\\n    );\\n\\n    function completeBattleSequence(\\n        uint256 battleId, \\n        uint256 attackerId,\\n        uint256 attackerSoldierLosses,\\n        uint256 attackerTankLosses,\\n        uint256 defenderId,\\n        uint256 defenderSoldierLosses,\\n        uint256 defenderTankLosses,\\n        uint256 warId\\n    ) internal {\\n        force.decreaseUnits(\\n            attackerSoldierLosses,\\n            attackerTankLosses,\\n            attackerId,\\n            defenderSoldierLosses,\\n            defenderTankLosses,\\n            defenderId\\n        );\\n        require(war.decreaseGroundBattleLosses(\\n            attackerSoldierLosses,\\n            attackerTankLosses,\\n            attackerId,\\n            warId\\n        ));\\n        emit GroundBattleResultsEvent (\\n            battleId,\\n            warId,\\n            attackerId,\\n            attackerSoldierLosses,\\n            attackerTankLosses,\\n            defenderId,\\n            defenderSoldierLosses,\\n            defenderTankLosses\\n        );\\n        (, , bool anarchyCheckDefender) = addTax.soldierToPopulationRatio(\\n            defenderId\\n        );\\n        (, , bool anarchyCheckAttacker) = addTax.soldierToPopulationRatio(\\n            attackerId\\n        );\\n        if (anarchyCheckDefender) {\\n            param.inflictAnarchy(defenderId);\\n        }\\n        if (anarchyCheckAttacker) {\\n            param.inflictAnarchy(attackerId);\\n        }\\n    }\\n\\n    function getPercentageLosses(\\n        uint256 battleId\\n    ) public view returns (uint256, uint256, uint256, uint256) {\\n        uint256[] memory randomWords = s_requestIndexToRandomWords[battleId];\\n        uint256 outcomeModifierForWinnerSoldiers = randomWords[1];\\n        uint256 outcomeModifierForWinnerTanks = randomWords[2];\\n        uint256 winnerSoldierLossesPercentage;\\n        uint256 winnerTankLossesPercentage;\\n        (\\n            uint256 loserSoldierLossesPercentage,\\n            uint256 loserTankLossesPercentage\\n        ) = getLoserPercentageLosses(battleId);\\n        uint256 attackType = groundBattleIdToAttackerForces[battleId]\\n            .attackType;\\n        if (attackType == 1) {\\n            winnerSoldierLossesPercentage = (5 +\\n                (outcomeModifierForWinnerSoldiers % 11));\\n            winnerTankLossesPercentage = (5 +\\n                (outcomeModifierForWinnerTanks % 6));\\n        } else if (attackType == 2) {\\n            winnerSoldierLossesPercentage = (10 +\\n                (outcomeModifierForWinnerSoldiers % 11));\\n            winnerTankLossesPercentage = (10 +\\n                (outcomeModifierForWinnerTanks % 6));\\n        } else if (attackType == 3) {\\n            winnerSoldierLossesPercentage = (15 +\\n                (outcomeModifierForWinnerSoldiers % 16));\\n            winnerTankLossesPercentage = (15 +\\n                (outcomeModifierForWinnerTanks % 11));\\n        } else {\\n            winnerSoldierLossesPercentage = (25 +\\n                (outcomeModifierForWinnerSoldiers % 16));\\n            winnerTankLossesPercentage = (25 +\\n                (outcomeModifierForWinnerTanks % 11));\\n        }\\n        return (\\n            winnerSoldierLossesPercentage,\\n            winnerTankLossesPercentage,\\n            loserSoldierLossesPercentage,\\n            loserTankLossesPercentage\\n        );\\n    }\\n\\n    function getLoserPercentageLosses(\\n        uint256 battleId\\n    ) public view returns (uint256, uint256) {\\n        uint256[] memory randomWords = s_requestIndexToRandomWords[battleId];\\n        uint256 outcomeModifierForLoserSoldiers = randomWords[3];\\n        uint256 outcomeModifierForLoserTanks = randomWords[4];\\n        uint256 loserSoldierLossesPercentage;\\n        uint256 loserTankLossesPercentage;\\n        uint256 attackType = groundBattleIdToAttackerForces[battleId]\\n            .attackType;\\n        if (attackType == 1) {\\n            loserSoldierLossesPercentage = (20 +\\n                (outcomeModifierForLoserSoldiers % 11));\\n            loserTankLossesPercentage = (20 +\\n                (outcomeModifierForLoserTanks % 6));\\n        } else if (attackType == 2) {\\n            loserSoldierLossesPercentage = (30 +\\n                (outcomeModifierForLoserSoldiers % 16));\\n            loserTankLossesPercentage = (30 +\\n                (outcomeModifierForLoserTanks % 6));\\n        } else if (attackType == 3) {\\n            loserSoldierLossesPercentage = (35 +\\n                (outcomeModifierForLoserSoldiers % 21));\\n            loserTankLossesPercentage = (35 +\\n                (outcomeModifierForLoserTanks % 16));\\n        } else {\\n            loserSoldierLossesPercentage = (45 +\\n                (outcomeModifierForLoserSoldiers % 21));\\n            loserTankLossesPercentage = (45 +\\n                (outcomeModifierForLoserTanks % 16));\\n        }\\n        return (loserSoldierLossesPercentage, loserTankLossesPercentage);\\n    }\\n\\n    function attackVictory(\\n        uint256 battleId\\n    ) public view returns (uint256, uint256, uint256, uint256) {\\n        (\\n            uint256 winnerSoldierLossesPercentage,\\n            uint256 winnerTankLossesPercentage,\\n            uint256 loserSoldierLossesPercentage,\\n            uint256 loserTankLossesPercentage\\n        ) = getPercentageLosses(battleId);\\n        uint256 attackerSoldiers = groundBattleIdToAttackerForces[battleId]\\n            .soldierCount;\\n        uint256 attackerTanks = groundBattleIdToAttackerForces[battleId]\\n            .tankCount;\\n        uint256 defenderSoldiers = groundBattleIdToDefenderForces[battleId]\\n            .soldierCount;\\n        uint256 defenderTanks = groundBattleIdToDefenderForces[battleId]\\n            .tankCount;\\n        uint256 defenderSoldierLosses = ((defenderSoldiers *\\n            loserSoldierLossesPercentage) / 100);\\n        uint256 defenderTankLosses = ((defenderTanks *\\n            loserTankLossesPercentage) / 100);\\n        uint256 attackerSoldierLosses = ((attackerSoldiers *\\n            winnerSoldierLossesPercentage) / 100);\\n        uint256 attackerTankLosses = ((attackerTanks *\\n            winnerTankLossesPercentage) / 100);\\n        if (attackerSoldierLosses > (defenderSoldierLosses / 2)) {\\n            attackerSoldierLosses = (defenderSoldierLosses / 2);\\n        }\\n        if (attackerTankLosses > (defenderTankLosses / 2)) {\\n            attackerTankLosses = (defenderTankLosses / 2);\\n        }\\n        return (\\n            attackerSoldierLosses,\\n            attackerTankLosses,\\n            defenderSoldierLosses,\\n            defenderTankLosses\\n        );\\n    }\\n\\n    function defenseVictory(\\n        uint256 battleId\\n    ) public view returns (uint256, uint256, uint256, uint256) {\\n        (\\n            uint256 winnerSoldierLossesPercentage,\\n            uint256 winnerTankLossesPercentage,\\n            uint256 loserSoldierLossesPercentage,\\n            uint256 loserTankLossesPercentage\\n        ) = getPercentageLosses(battleId);\\n        uint256 attackerSoldiers = groundBattleIdToAttackerForces[battleId]\\n            .soldierCount;\\n        uint256 attackerTanks = groundBattleIdToAttackerForces[battleId]\\n            .tankCount;\\n        uint256 defenderSoldiers = groundBattleIdToDefenderForces[battleId]\\n            .soldierCount;\\n        uint256 defenderTanks = groundBattleIdToDefenderForces[battleId]\\n            .tankCount;\\n        uint256 attackerSoldierLosses = ((attackerSoldiers *\\n            loserSoldierLossesPercentage) / 100);\\n        uint256 attackerTankLosses = ((attackerTanks *\\n            loserTankLossesPercentage) / 100);\\n        uint256 defenderSoldierLosses = ((defenderSoldiers *\\n            winnerSoldierLossesPercentage) / 100);\\n        uint256 defenderTankLosses = ((defenderTanks *\\n            winnerTankLossesPercentage) / 100);\\n        if (defenderSoldierLosses > (attackerSoldierLosses / 2)) {\\n            defenderSoldierLosses = (attackerSoldierLosses / 2);\\n        }\\n        if (defenderTankLosses > (attackerTankLosses / 2)) {\\n            defenderTankLosses = (attackerTankLosses / 2);\\n        }\\n        return (\\n            attackerSoldierLosses,\\n            attackerTankLosses,\\n            defenderSoldierLosses,\\n            defenderTankLosses\\n        );\\n    }\\n\\n    function collectSpoils(uint256 battleId, uint256 attackerId) internal {\\n        uint256 defenderId = groundBattleIdToDefenderForces[battleId].countryId;\\n        uint256[] memory randomWords = s_requestIndexToRandomWords[battleId];\\n        uint256 randomLandMiles;\\n        uint256 randomInfrastructure;\\n        uint256 attackType = groundBattleIdToAttackerForces[battleId]\\n            .attackType;\\n        uint256 fobCount = imp2.getForwardOperatingBaseCount(attackerId);\\n        if (attackType == 1) {\\n            randomLandMiles = (1 + fobCount + (randomWords[6] % 3));\\n            randomInfrastructure = (1 + fobCount + ((randomWords[7]) % 3));\\n        } else if (attackType == 2) {\\n            randomLandMiles = (2 + fobCount + (randomWords[6] % 3));\\n            randomInfrastructure = (2 + fobCount + ((randomWords[7]) % 3));\\n        } else if (attackType == 3) {\\n            randomLandMiles = (3 + fobCount + (randomWords[6] % 4));\\n            randomInfrastructure = (3 + fobCount + ((randomWords[7]) % 4));\\n        } else if (attackType == 4) {\\n            randomLandMiles = (4 + fobCount + (randomWords[6] % 5));\\n            randomInfrastructure = (4 + fobCount + ((randomWords[7]) % 5));\\n        }\\n        uint256 attackerTech = inf.getTechnologyCount(attackerId);\\n        uint256 defenderTech = inf.getTechnologyCount(defenderId);\\n        uint256 multiple = (attackerTech / (defenderTech + 1));\\n        if (multiple > 5) {\\n            multiple = 5;\\n        }\\n        randomLandMiles = (randomLandMiles * multiple);\\n        randomInfrastructure = (randomInfrastructure * multiple);\\n        inf.transferLandAndInfrastructure(\\n            randomLandMiles,\\n            randomInfrastructure,\\n            attackerId,\\n            defenderId\\n        );\\n    }\\n}\\n\\n\\n\",\"keccak256\":\"0xdc25ade99552743e2dcd5816a00568c19edcd75d6baff0eb3ebc7e6566ad1114\",\"license\":\"BUSL-1.1\"},\"contracts/IWarBucks.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWarBucks is IERC20 {\\n    function mintFromTreasury(address account, uint256 amount) external;\\n\\n    function burnFromTreasury(address account, uint256 amount) external;\\n\\n    function burnFromMint(address account, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xaafd2a29438057efa9484aa0ed60d6d8c7cbc95dd661cc8c847d19a96ff9828f\",\"license\":\"BUSL-1.1\"},\"contracts/Improvements.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"./Treasury.sol\\\";\\nimport \\\"./Navy.sol\\\";\\nimport \\\"./Forces.sol\\\";\\nimport \\\"./Wonders.sol\\\";\\nimport \\\"./CountryMinter.sol\\\";\\nimport \\\"./Infrastructure.sol\\\";\\nimport \\\"./Resources.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n///@title ImprovementsContract1\\n///@author OxSnosh\\n///@notice this contract will allow a nation owner to buy certain improvements\\ncontract ImprovementsContract1 is Ownable, ReentrancyGuard {\\n    address public treasury;\\n    address public improvements2;\\n    address public improvements3;\\n    address public improvements4;\\n    address public wonders1;\\n    address public navy;\\n    address public additionalNavy;\\n    address public countryMinter;\\n    address public infrastructure;\\n    uint256 public airportCost = 100000 * (10 ** 18);\\n    uint256 public bankCost = 100000 * (10 ** 18);\\n    uint256 public barracksCost = 50000 * (10 ** 18);\\n    uint256 public borderFortificationCost = 125000 * (10 ** 18);\\n    uint256 public borderWallCost = 60000 * (10 ** 18);\\n    uint256 public bunkerCost = 200000 * (10 ** 18);\\n    uint256 public casinoCost = 100000 * (10 ** 18);\\n    uint256 public churchCost = 40000 * (10 ** 18);\\n    uint256 public clinicCost = 50000 * (10 ** 18);\\n    uint256 public drydockCost = 100000 * (10 ** 18);\\n    uint256 public factoryCost = 150000 * (10 ** 18);\\n\\n    WondersContract1 won1;\\n    CountryMinter mint;\\n    TreasuryContract tres;\\n    InfrastructureContract inf;\\n\\n    struct Improvements1 {\\n        uint256 improvementCount;\\n        //Airport\\n        //$100,000\\n        //reduces aircraft cost -2%\\n        //reduces aircraft upkeep cost -2%\\n        //Limit 3\\n        uint256 airportCount;\\n        //Bank\\n        //$100,000\\n        //population income +7%\\n        uint256 bankCount;\\n        //Barracks\\n        //$50,000\\n        //increases soldier efficiency +10%\\n        //reduces soldier upkeep -10%\\n        uint256 barracksCount;\\n        //Border Fortifications\\n        //$125,000\\n        //Raises effectiveness of defending soldiers +2%\\n        //reduces max deployment -2%\\n        //Requires maintaining a border wall for each Border Fortification\\n        //Limit 3\\n        //Cannot own if forward operating base is owned\\n        //Collection required to delete\\n        uint256 borderFortificationCount;\\n        //Border Walls\\n        //$60,000\\n        //Decreases citizen count by -2%\\n        //increases population happiness +2,\\n        //Improves environment +1\\n        //Reduces the number of criminals in a nation 1% for each Border Wall.\\n        //Border Walls may only be purchased one at a time.\\n        uint256 borderWallCount;\\n        //Bunker\\n        //$200,000\\n        //Reduces infrastructure damage from [[aircraft,]] cruise missiles, and nukes -3%\\n        //Requires maintaining a Barracks for each Bunker.\\n        //Limit 5\\n        //Cannot build if Munitions Factory or Forward Operating Base is owned.\\n        //Collection required to delete\\n        uint256 bunkerCount;\\n        //Casino\\n        //$100,000\\n        //Increases happiness by 1.5,\\n        //decreases citizen income by 1%\\n        //-25 to crime prevention score.\\n        //Limit 2.\\n        uint256 casinoCount;\\n        //Church\\n        //$40,000\\n        //Increases population happiness +1.\\n        uint256 churchCount;\\n        //Clinic\\n        //$50,000\\n        //Increases population count by 2%\\n        //Purchasing 2 or more clinics allows you to purchase hospitals.\\n        //This improvement may not be destroyed if it is supporting a hospital until the hospital is first destroyed.\\n        uint256 clinicCount;\\n        //Drydock\\n        //$100,000\\n        //Allows nations to build and maintain navy Corvettes, Battleships, Cruisers, and Destroyers\\n        //Increases the number of each of these types of ships that a nation can support +1.\\n        //This improvement may not be destroyed if it is supporting navy vessels until those navy vessels are first destroyed.\\n        //requires Harbor\\n        uint256 drydockCount;\\n        //Factory\\n        //$150,000\\n        //Decreases cost of cruise missiles -5%\\n        //decreases tank cost -10%,\\n        //reduces initial infrastructure purchase cost -8%.\\n        uint256 factoryCount;\\n    }\\n\\n    mapping(uint256 => Improvements1) public idToImprovements1;\\n\\n    event Improvement1Purchased(\\n        uint256 indexed countryId,\\n        uint256 indexed improvementId,\\n        uint256 indexed amount\\n    );\\n\\n    event Improvement1Deleted(\\n        uint256 indexed countryId,\\n        uint256 indexed improvementId,\\n        uint256 indexed amount\\n    );\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings(\\n        address _treasury,\\n        address _improvements2,\\n        address _improvements3,\\n        address _improvements4,\\n        address _navy,\\n        address _additionalNavy,\\n        address _countryMinter,\\n        address _wonders1,\\n        address _infrastructure\\n    ) public onlyOwner {\\n        treasury = _treasury;\\n        tres = TreasuryContract(_treasury);\\n        improvements2 = _improvements2;\\n        improvements3 = _improvements3;\\n        improvements4 = _improvements4;\\n        navy = _navy;\\n        additionalNavy = _additionalNavy;\\n        countryMinter = _countryMinter;\\n        mint = CountryMinter(_countryMinter);\\n        wonders1 = _wonders1;\\n        won1 = WondersContract1(_wonders1);\\n        infrastructure = _infrastructure;\\n        inf = InfrastructureContract(_infrastructure);\\n    }\\n\\n    modifier approvedAddress() {\\n        require(\\n            msg.sender == improvements2 ||\\n                msg.sender == improvements3 ||\\n                msg.sender == improvements4,\\n            \\\"Unable to call\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyCountryMinter() {\\n        require(\\n            msg.sender == countryMinter,\\n            \\\"function only callable by countryMinter contract\\\"\\n        );\\n        _;\\n    }\\n\\n    ///@dev this function is only callable by the countryMinter contract\\n    ///@dev this function will initialize the struct to store the info about the minted nations improvements\\n    ///@notice this function will allow each minted nation to buy imoprovements\\n    ///@param id this is the nation ID for the nation being minted\\n    function generateImprovements(uint256 id) public onlyCountryMinter {\\n        require(\\n            idToImprovements1[id].improvementCount == 0,\\n            \\\"Improvements already exist\\\"\\n        );\\n        Improvements1 memory newImprovements1 = Improvements1(\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0\\n        );\\n        idToImprovements1[id] = newImprovements1;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will allow the owner of the contract to update the cost of an airport\\n    function updateAirportCost(uint256 newPrice) public onlyOwner {\\n        airportCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will allow the owner of the contract to update the cost of a bank\\n    function updateBankCost(uint256 newPrice) public onlyOwner {\\n        bankCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will allow the owner of the contract to update the cost of a barracks\\n    function updateBarracksCost(uint256 newPrice) public onlyOwner {\\n        barracksCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will allow the owner of the contract to update the cost of a border fortification\\n    function updateBorderFortificationCost(uint256 newPrice) public onlyOwner {\\n        borderFortificationCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will allow the owner of the contract to update the cost of a border wall\\n    function updateBorderWallCost(uint256 newPrice) public onlyOwner {\\n        borderWallCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will allow the owner of the contract to update the cost of a bunker\\n    function updateBunkerCost(uint256 newPrice) public onlyOwner {\\n        bunkerCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will allow the owner of the contract to update the cost of a casino\\n    function updateCasinoCost(uint256 newPrice) public onlyOwner {\\n        casinoCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will allow the owner of the contract to update the cost of a church\\n    function updateChurchCost(uint256 newPrice) public onlyOwner {\\n        churchCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will allow the owner of the contract to update the cost of a clinic\\n    function updateClinicCost(uint256 newPrice) public onlyOwner {\\n        clinicCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will allow the owner of the contract to update the cost of a drydock\\n    function updateDrydockCost(uint256 newPrice) public onlyOwner {\\n        drydockCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will allow the owner of the contract to update the cost of a factory\\n    function updateFactoryCost(uint256 newPrice) public onlyOwner {\\n        factoryCost = newPrice;\\n    }\\n\\n    ///@dev this function will allow the caller to return the cost of an improvement\\n    ///@return airportCost this will be the cost of an airport\\n    ///@return bankCost this will be the cost of a bank...\\n    function getCost1()\\n        public\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (\\n            airportCost,\\n            bankCost,\\n            barracksCost,\\n            borderFortificationCost,\\n            borderWallCost,\\n            bunkerCost,\\n            casinoCost,\\n            churchCost,\\n            clinicCost,\\n            drydockCost,\\n            factoryCost\\n        );\\n    }\\n\\n    ///@dev this is a public view function that will return the number of improvements a nation owns\\n    ///@notice this function will return the number of improvements a nation owns\\n    ///@param id this is the nation ID of the nation being queried\\n    ///@return count this is the number of improvements for a given nation\\n    function getImprovementCount(\\n        uint256 id\\n    ) public view returns (uint256 count) {\\n        count = idToImprovements1[id].improvementCount;\\n        return count;\\n    }\\n\\n    ///@dev this is a publiv function that is only callable from the other improvement contracts\\n    ///@notice this function will incrase the number of improvements for a nation when improvements are purchased\\n    ///@param id this is the ID for the nation purchasing improvements\\n    ///@param newCount is the updated total of improvements for a given nation\\n    function updateImprovementCount(\\n        uint256 id,\\n        uint256 newCount\\n    ) public approvedAddress {\\n        idToImprovements1[id].improvementCount = newCount;\\n    }\\n\\n    function checkCitizenCountForImprovementPurchase(\\n        uint256 id,\\n        uint256 amount\\n    ) public view returns (bool) {\\n        bool possible = false;\\n        (uint256 citizens, ) = inf.getTaxablePopulationCount(id);\\n        uint256 improvementCount = idToImprovements1[id].improvementCount;\\n        require(\\n            ((citizens / 1000) >= (improvementCount + amount)),\\n            \\\"population too low to purchase improvement\\\"\\n        );\\n        possible = true;\\n        return (possible);\\n    }\\n\\n    ///@dev this is a public function that allows a nation owner to purchase improvements\\n    ///@dev this function is only callable by the nation owner\\n    ///@notice this function will allow a nation owner to purchase certain improvements\\n    ///@param amount is the number of improvements being purchased\\n    ///@param countryId is the nation purchasing improvements\\n    /**\\n     * @param improvementId this will determine which improvement is being purchased\\n     * 1 = airport\\n     * 2 = bank\\n     * 3 = barracks\\n     * 4 = border fortification\\n     * 5 = border wall\\n     * 6 = bunker\\n     * 7 = casino\\n     * 8 = church\\n     * 9 = clinic\\n     * 10 = drydock\\n     * 11 = factory\\n     */\\n    function buyImprovement1(\\n        uint256 amount,\\n        uint256 countryId,\\n        uint256 improvementId\\n    ) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(countryId, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        require(improvementId <= 11, \\\"Invalid improvement ID\\\");\\n        uint256 daysSince = tres.getDaysSinceLastBillsPaid(countryId);\\n        require(daysSince == 0, \\\"must pay bills before buying improvements\\\");\\n        bool populationCheck = checkCitizenCountForImprovementPurchase(\\n            countryId,\\n            amount\\n        );\\n        require(\\n            populationCheck == true,\\n            \\\"population not high enough for purchase\\\"\\n        );\\n        uint256 balance = TreasuryContract(treasury).checkBalance(countryId);\\n        uint256 purchasePrice;\\n        if (improvementId == 1) {\\n            purchasePrice = airportCost * amount;\\n            require(balance >= purchasePrice, \\\"Insufficient balance\\\");\\n            uint256 existingCount = idToImprovements1[countryId].airportCount;\\n            require((existingCount + amount) <= 3, \\\"Cannot own more than 3\\\");\\n            idToImprovements1[countryId].airportCount += amount;\\n            idToImprovements1[countryId].improvementCount += amount;\\n        } else if (improvementId == 2) {\\n            purchasePrice = bankCost * amount;\\n            require(balance >= purchasePrice, \\\"Insufficient balance\\\");\\n            uint256 existingCount = idToImprovements1[countryId].bankCount;\\n            uint256 maxAmount = 5;\\n            bool federalReserve = won1.getFederalReserve(countryId);\\n            if (federalReserve) {\\n                maxAmount = 7;\\n            }\\n            require(\\n                (existingCount + amount) <= maxAmount,\\n                \\\"Cannot own more than 5\\\"\\n            );\\n            idToImprovements1[countryId].bankCount += amount;\\n            idToImprovements1[countryId].improvementCount += amount;\\n        } else if (improvementId == 3) {\\n            purchasePrice = barracksCost * amount;\\n            require(balance >= purchasePrice, \\\"Insufficient balance\\\");\\n            uint256 existingCount = idToImprovements1[countryId].barracksCount;\\n            require((existingCount + amount) <= 3, \\\"Cannot own more than 3\\\");\\n            idToImprovements1[countryId].barracksCount += amount;\\n            idToImprovements1[countryId].improvementCount += amount;\\n        } else if (improvementId == 4) {\\n            purchasePrice = borderFortificationCost * amount;\\n            require(balance >= purchasePrice, \\\"Insufficient balance\\\");\\n            uint256 existingCount = idToImprovements1[countryId]\\n                .borderFortificationCount;\\n            require((existingCount + amount) <= 3, \\\"Cannot own more than 3\\\");\\n            uint256 borderWallAmount = idToImprovements1[countryId]\\n                .borderWallCount;\\n            require(\\n                (existingCount + amount) <= borderWallAmount,\\n                \\\"Must own a border wall for every fortification\\\"\\n            );\\n            uint256 fobCount = ImprovementsContract2(improvements2)\\n                .getForwardOperatingBaseCount(countryId);\\n            require(\\n                fobCount == 0,\\n                \\\"Cannot own if forward operating base is owned\\\"\\n            );\\n            idToImprovements1[countryId].borderFortificationCount += amount;\\n            idToImprovements1[countryId].improvementCount += amount;\\n        } else if (improvementId == 5) {\\n            require(\\n                amount == 1,\\n                \\\"Border walls can only be purchased 1 at a time\\\"\\n            );\\n            purchasePrice = borderWallCost * amount;\\n            require(balance >= purchasePrice, \\\"Insufficient balance\\\");\\n            uint256 existingCount = idToImprovements1[countryId]\\n                .borderWallCount;\\n            require((existingCount + amount) <= 5, \\\"Cannot own more than 5\\\");\\n            idToImprovements1[countryId].borderWallCount += amount;\\n            idToImprovements1[countryId].improvementCount += amount;\\n        } else if (improvementId == 6) {\\n            purchasePrice = bunkerCost * amount;\\n            require(balance >= purchasePrice, \\\"Insufficient balance\\\");\\n            uint256 existingCount = idToImprovements1[countryId].bunkerCount;\\n            require((existingCount + amount) <= 3, \\\"Cannot own more than 3\\\");\\n            uint256 barracksAmount = idToImprovements1[countryId].barracksCount;\\n            require(\\n                (existingCount + amount) <= barracksAmount,\\n                \\\"Must own a barracks for every bunker\\\"\\n            );\\n            uint256 fobCount = ImprovementsContract2(improvements2)\\n                .getForwardOperatingBaseCount(countryId);\\n            require(\\n                fobCount == 0,\\n                \\\"Cannot own if forward operating base is owned\\\"\\n            );\\n            uint256 munitionsFactoryCount = ImprovementsContract4(improvements4)\\n                .getMunitionsFactoryCount(countryId);\\n            require(\\n                munitionsFactoryCount == 0,\\n                \\\"Cannot own if munitions factory is owned\\\"\\n            );\\n            idToImprovements1[countryId].bunkerCount += amount;\\n            idToImprovements1[countryId].improvementCount += amount;\\n        } else if (improvementId == 7) {\\n            purchasePrice = casinoCost * amount;\\n            require(balance >= purchasePrice, \\\"Insufficient balance\\\");\\n            uint256 existingCount = idToImprovements1[countryId].casinoCount;\\n            require((existingCount + amount) <= 2, \\\"Cannot own more than 2\\\");\\n            idToImprovements1[countryId].casinoCount += amount;\\n            idToImprovements1[countryId].improvementCount += amount;\\n        } else if (improvementId == 8) {\\n            purchasePrice = churchCost * amount;\\n            require(balance >= purchasePrice, \\\"Insufficient balance\\\");\\n            uint256 existingCount = idToImprovements1[countryId].churchCount;\\n            require((existingCount + amount) <= 5, \\\"Cannot own more than 5\\\");\\n            idToImprovements1[countryId].churchCount += amount;\\n            idToImprovements1[countryId].improvementCount += amount;\\n        } else if (improvementId == 9) {\\n            purchasePrice = clinicCost * amount;\\n            require(balance >= purchasePrice, \\\"Insufficient balance\\\");\\n            uint256 existingCount = idToImprovements1[countryId].clinicCount;\\n            require((existingCount + amount) <= 5, \\\"Cannot own more than 5\\\");\\n            idToImprovements1[countryId].clinicCount += amount;\\n            idToImprovements1[countryId].improvementCount += amount;\\n        } else if (improvementId == 10) {\\n            purchasePrice = drydockCost * amount;\\n            require(balance >= purchasePrice, \\\"Insufficient balance\\\");\\n            uint256 existingCount = idToImprovements1[countryId].drydockCount;\\n            require((existingCount + amount) <= 5, \\\"Cannot own more than 5\\\");\\n            uint256 harborCount = ImprovementsContract2(improvements2)\\n                .getHarborCount(countryId);\\n            require(harborCount > 0, \\\"Must own a harbor first\\\");\\n            idToImprovements1[countryId].drydockCount += amount;\\n            idToImprovements1[countryId].improvementCount += amount;\\n        } else {\\n            purchasePrice = factoryCost * amount;\\n            require(balance >= purchasePrice, \\\"Insufficient balance\\\");\\n            uint256 existingCount = idToImprovements1[countryId].factoryCount;\\n            require((existingCount + amount) <= 5, \\\"Cannot own more than 5\\\");\\n            idToImprovements1[countryId].factoryCount += amount;\\n            idToImprovements1[countryId].improvementCount += amount;\\n        }\\n        require(\\n            TreasuryContract(treasury).spendBalance(countryId, purchasePrice),\\n            \\\"Unable to spend balance\\\"\\n        );\\n        emit Improvement1Purchased(countryId, improvementId, amount);\\n    }\\n\\n    ///@dev this is a public function that allows a nation owner to delete improvements\\n    ///@dev this function is only callable by the nation owner\\n    ///@notice this function will allow a nation owner to delete certain improvements\\n    ///@param amount is the number of improvements being deleted\\n    ///@param countryId is the nation deleting improvements\\n    /**\\n     * @param improvementId this will determine which improvement is being deleted\\n     * 1 = airport\\n     * 2 = bank\\n     * 3 = barracks\\n     * 4 = border fortification\\n     * 5 = border wall\\n     * 6 = bunker\\n     * 7 = casino\\n     * 8 = church\\n     * 9 = clinic\\n     * 10 = drydock\\n     * 11 = factory\\n     */\\n    function deleteImprovement1(\\n        uint256 amount,\\n        uint256 countryId,\\n        uint256 improvementId\\n    ) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(countryId, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        require(improvementId <= 11, \\\"Invalid improvement ID\\\");\\n        if (improvementId == 1) {\\n            uint256 existingCount = idToImprovements1[countryId].airportCount;\\n            require((existingCount - amount) >= 0, \\\"Cannot delete that many\\\");\\n            idToImprovements1[countryId].airportCount -= amount;\\n            idToImprovements1[countryId].improvementCount -= amount;\\n        } else if (improvementId == 2) {\\n            uint256 existingCount = idToImprovements1[countryId].bankCount;\\n            require((existingCount - amount) >= 0, \\\"Cannot delete that many\\\");\\n            idToImprovements1[countryId].bankCount -= amount;\\n            idToImprovements1[countryId].improvementCount -= amount;\\n        } else if (improvementId == 3) {\\n            uint256 existingCount = idToImprovements1[countryId].barracksCount;\\n            require((existingCount - amount) >= 0, \\\"Cannot delete that many\\\");\\n            idToImprovements1[countryId].barracksCount -= amount;\\n            idToImprovements1[countryId].improvementCount -= amount;\\n        } else if (improvementId == 4) {\\n            uint256 existingCount = idToImprovements1[countryId]\\n                .borderFortificationCount;\\n            require((existingCount - amount) >= 0, \\\"Cannot delete that many\\\");\\n            idToImprovements1[countryId].borderFortificationCount -= amount;\\n            idToImprovements1[countryId].improvementCount -= amount;\\n        } else if (improvementId == 5) {\\n            uint256 existingCount = idToImprovements1[countryId]\\n                .borderWallCount;\\n            require((existingCount - amount) >= 0, \\\"Cannot delete that many\\\");\\n            idToImprovements1[countryId].borderWallCount -= amount;\\n            idToImprovements1[countryId].improvementCount -= amount;\\n        } else if (improvementId == 6) {\\n            uint256 existingCount = idToImprovements1[countryId].bunkerCount;\\n            require((existingCount - amount) >= 0, \\\"Cannot delete that many\\\");\\n            idToImprovements1[countryId].bunkerCount -= amount;\\n            idToImprovements1[countryId].improvementCount -= amount;\\n        } else if (improvementId == 7) {\\n            uint256 existingCount = idToImprovements1[countryId].casinoCount;\\n            require((existingCount - amount) >= 0, \\\"Cannot delete that many\\\");\\n            idToImprovements1[countryId].casinoCount -= amount;\\n            idToImprovements1[countryId].improvementCount -= amount;\\n        } else if (improvementId == 8) {\\n            uint256 existingCount = idToImprovements1[countryId].churchCount;\\n            require((existingCount - amount) >= 0, \\\"Cannot delete that many\\\");\\n            idToImprovements1[countryId].churchCount -= amount;\\n            idToImprovements1[countryId].improvementCount -= amount;\\n        } else if (improvementId == 9) {\\n            uint256 existingCount = idToImprovements1[countryId].clinicCount;\\n            require((existingCount - amount) >= 0, \\\"Cannot delete that many\\\");\\n            uint256 hospitalCount = ImprovementsContract2(improvements2)\\n                .getHospitalCount(countryId);\\n            require(\\n                hospitalCount == 0,\\n                \\\"Cannot delete while nation owns a hospital\\\"\\n            );\\n            idToImprovements1[countryId].clinicCount -= amount;\\n            idToImprovements1[countryId].improvementCount -= amount;\\n        } else if (improvementId == 10) {\\n            uint256 existingCount = idToImprovements1[countryId].drydockCount;\\n            require((existingCount - amount) >= 0, \\\"Cannot delete that many\\\");\\n            uint256 vesselCount = AdditionalNavyContract(additionalNavy)\\n                .getVesselCountForDrydock(countryId);\\n            require(\\n                vesselCount == 0,\\n                \\\"Cannot delete drydock while it supports vessels\\\"\\n            );\\n            idToImprovements1[countryId].drydockCount -= amount;\\n            idToImprovements1[countryId].improvementCount -= amount;\\n        } else {\\n            uint256 existingCount = idToImprovements1[countryId].factoryCount;\\n            require((existingCount - amount) >= 0, \\\"Cannot delete that many\\\");\\n            idToImprovements1[countryId].factoryCount -= amount;\\n            idToImprovements1[countryId].improvementCount -= amount;\\n        }\\n        emit Improvement1Deleted(countryId, improvementId, amount);\\n    }\\n\\n    ///@dev this is a public view function that will return the number of airports for a given nation\\n    ///@notice this function will return the number of airports a nation owns\\n    ///@param countryId is the nation ID of the nation being queried\\n    ///@return count is the number of airports a given nation owns\\n    function getAirportCount(\\n        uint256 countryId\\n    ) public view returns (uint256 count) {\\n        uint256 airportAmount = idToImprovements1[countryId].airportCount;\\n        return airportAmount;\\n    }\\n\\n    ///@dev this is a public view function that will return the number of barracks for a given nation\\n    ///@notice this function will return the number of barracks a nation owns\\n    ///@param countryId is the nation ID of the nation being queried\\n    ///@return count is the number of barracks a given nation owns\\n    function getBarracksCount(\\n        uint256 countryId\\n    ) public view returns (uint256 count) {\\n        uint256 barracksAmount = idToImprovements1[countryId].barracksCount;\\n        return barracksAmount;\\n    }\\n\\n    ///@dev this is a public view function that will return the number of border fortifications for a given nation\\n    ///@notice this function will return the number of border fortifications a nation owns\\n    ///@param countryId is the nation ID of the nation being queried\\n    ///@return count is the number of border fortifications a given nation owns\\n    function getBorderFortificationCount(\\n        uint256 countryId\\n    ) public view returns (uint256 count) {\\n        uint256 borderFortificationAmount = idToImprovements1[countryId]\\n            .borderFortificationCount;\\n        return borderFortificationAmount;\\n    }\\n\\n    ///@dev this is a public view function that will return the number of border walls for a given nation\\n    ///@notice this function will return the number of border walls a nation owns\\n    ///@param countryId is the nation ID of the nation being queried\\n    ///@return count is the number of border walls a given nation owns\\n    function getBorderWallCount(\\n        uint256 countryId\\n    ) public view returns (uint256 count) {\\n        return idToImprovements1[countryId].borderWallCount;\\n    }\\n\\n    ///@dev this is a public view function that will return the number of banks for a given nation\\n    ///@notice this function will return the number of banks a nation owns\\n    ///@param countryId is the nation ID of the nation being queried\\n    ///@return count is the number of banks a given nation owns\\n    function getBankCount(\\n        uint256 countryId\\n    ) public view returns (uint256 count) {\\n        return idToImprovements1[countryId].bankCount;\\n    }\\n\\n    ///@dev this is a public view function that will return the number of bunkers for a given nation\\n    ///@notice this function will return the number of bunkers a nation owns\\n    ///@param countryId is the nation ID of the nation being queried\\n    ///@return count is the number of bunkers a given nation owns\\n    function getBunkerCount(\\n        uint256 countryId\\n    ) public view returns (uint256 count) {\\n        return idToImprovements1[countryId].bunkerCount;\\n    }\\n\\n    ///@dev this is a public view function that will return the number of casinos for a given nation\\n    ///@notice this function will return the number of casinos a nation owns\\n    ///@param countryId is the nation ID of the nation being queried\\n    ///@return count is the number of casinos a given nation owns\\n    function getCasinoCount(\\n        uint256 countryId\\n    ) public view returns (uint256 count) {\\n        return idToImprovements1[countryId].casinoCount;\\n    }\\n\\n    ///@dev this is a public view function that will return the number of churches for a given nation\\n    ///@notice this function will return the number of churches a nation owns\\n    ///@param countryId is the nation ID of the nation being queried\\n    ///@return count is the number of churches a given nation owns\\n    function getChurchCount(\\n        uint256 countryId\\n    ) public view returns (uint256 count) {\\n        return idToImprovements1[countryId].churchCount;\\n    }\\n\\n    ///@dev this is a public view function that will return the number of drydocks for a given nation\\n    ///@notice this function will return the number of drydocks a nation owns\\n    ///@param countryId is the nation ID of the nation being queried\\n    ///@return count is the number of drydocks a given nation owns\\n    function getDrydockCount(\\n        uint256 countryId\\n    ) public view returns (uint256 count) {\\n        return idToImprovements1[countryId].drydockCount;\\n    }\\n\\n    ///@dev this is a public view function that will return the number of clinics for a given nation\\n    ///@notice this function will return the number of clinics a nation owns\\n    ///@param countryId is the nation ID of the nation being queried\\n    ///@return count is the number of clinics a given nation owns\\n    function getClinicCount(\\n        uint256 countryId\\n    ) public view returns (uint256 count) {\\n        return idToImprovements1[countryId].clinicCount;\\n    }\\n\\n    ///@dev this is a public view function that will return the number of factories for a given nation\\n    ///@notice this function will return the number of factories a nation owns\\n    ///@param countryId is the nation ID of the nation being queried\\n    ///@return count is the number of factories a given nation owns\\n    function getFactoryCount(\\n        uint256 countryId\\n    ) public view returns (uint256 count) {\\n        return idToImprovements1[countryId].factoryCount;\\n    }\\n}\\n\\n///@title ImprovementsContract2\\n///@author OxSnosh\\n///@notice this contract will allow a nation owner to buy certain improvements\\ncontract ImprovementsContract2 is Ownable, ReentrancyGuard {\\n    address public treasury;\\n    address public improvements1;\\n    address public forces;\\n    address public wonders1;\\n    address public countryMinter;\\n    address public resources;\\n    address public spies;\\n    uint256 public foreignMinistryCost = 120000 * (10 ** 18);\\n    uint256 public forwardOperatingBaseCost = 125000 * (10 ** 18);\\n    uint256 public guerillaCampCost = 20000 * (10 ** 18);\\n    uint256 public harborCost = 200000 * (10 ** 18);\\n    uint256 public hospitalCost = 180000 * (10 ** 18);\\n    uint256 public intelligenceAgencyCost = 38500 * (10 ** 18);\\n    uint256 public jailCost = 25000 * (10 ** 18);\\n    uint256 public laborCampCost = 150000 * (10 ** 18);\\n\\n    WondersContract1 won1;\\n    CountryMinter mint;\\n    TreasuryContract tres;\\n    ResourcesContract res;\\n    SpyContract spy;\\n\\n    struct Improvements2 {\\n        bool initialized;\\n        //Foreign Ministry\\n        //$120,000\\n        //Increases population income by 5%\\n        //Opens +1 extra foreign aid slot.\\n        //Limit one foreign ministry per nation\\n        uint256 foreignMinistryCount;\\n        //Forward Operating Base\\n        //$125,000\\n        //Increases spoils from ground attack damage 2% for balance\\n        //Increases spoils from ground attack damage +1/fob for Land and Tech;\\n        //Reduces effectiveness of one's own defending soldiers -3%.\\n        //Requires maintaining a Barracks for each Forward Operating Base.\\n        //Limit 2.\\n        //Cannot own if Border Fortifications or Bunker is owned.\\n        //Collection required to delete.\\n        uint256 forwardOperatingBaseCount;\\n        //Guerilla Camp\\n        //$20,000\\n        //Increases soldier efficiency +35%,\\n        //reduces soldier upkeep cost -10%\\n        //reduces citizen income -8%.\\n        uint256 guerillaCampCount;\\n        //Harbor\\n        //$200,000\\n        //Increases population income by 1%.\\n        //Opens +1 extra trade slot\\n        //Limit one harbor per nation.\\n        //This improvement may not be destroyed if it is supporting trade agreements or navy vessels until those trade agreements and navy vessels are first removed.\\n        uint256 harborCount;\\n        //Hospital\\n        //$180,000\\n        //Increases population count by 6%.\\n        //Need 2 clinics for a hospital.\\n        //Limit one hospital per nation.\\n        //Nations must retain at least one hospital if that nation owns a Universal Health Care wonder.\\n        uint256 hospitalCount;\\n        //Intelligence Agency\\n        //$38,500\\n        //Increases happiness for tax rates greater than 23% +1\\n        //Each Intelligence Agency allows nations to purchase + 100 spies\\n        //This improvement may not be destroyed if it is supporting spies until those spies are first destroyed.\\n        uint256 intelligenceAgencyCount;\\n        //Jail\\n        //$25,000\\n        //Incarcerates up to 500 criminals\\n        //Limit 5\\n        uint256 jailCount;\\n        //Labor Camp\\n        //$150,000\\n        //Reduces infrastructure upkeep costs -10%\\n        //reduces population happiness -1.\\n        //Incarcerates up to 200 criminals per Labor Camp.\\n        uint256 laborCampCount;\\n    }\\n\\n    mapping(uint256 => Improvements2) public idToImprovements2;\\n\\n    event Improvement2Purchased(\\n        uint256 indexed countryId,\\n        uint256 indexed improvementId,\\n        uint256 indexed amount\\n    );\\n\\n    event Improvement2Deleted(\\n        uint256 indexed countryId,\\n        uint256 indexed improvementId,\\n        uint256 indexed amount\\n    );\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings(\\n        address _treasury,\\n        address _forces,\\n        address _wonders1,\\n        address _countryMinter,\\n        address _improvements1,\\n        address _resources,\\n        address _spies\\n    ) public onlyOwner {\\n        treasury = _treasury;\\n        tres = TreasuryContract(_treasury);\\n        forces = _forces;\\n        wonders1 = _wonders1;\\n        won1 = WondersContract1(_wonders1);\\n        countryMinter = _countryMinter;\\n        mint = CountryMinter(_countryMinter);\\n        improvements1 = _improvements1;\\n        resources = _resources;\\n        res = ResourcesContract(_resources);\\n        spies = _spies;\\n        spy = SpyContract(_spies);\\n    }\\n\\n    modifier onlyCountryMinter() {\\n        require(\\n            msg.sender == countryMinter,\\n            \\\"function only callable by countryMinter contract\\\"\\n        );\\n        _;\\n    }\\n\\n    ///@dev this function is only callable by the countryMinter contract\\n    ///@dev this function will initialize the struct to store the info about the minted nations improvements\\n    ///@notice this function will allow each minted nation to buy imoprovements\\n    ///@param id this is the nation ID for the nation being minted\\n    function generateImprovements(uint256 id) public onlyCountryMinter {\\n        require(\\n            idToImprovements2[id].initialized == false,\\n            \\\"Improvements already initialized\\\"\\n        );\\n        Improvements2 memory newImprovements2 = Improvements2(\\n            true,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0\\n        );\\n        idToImprovements2[id] = newImprovements2;\\n    }\\n\\n    ///@dev this function will allow the caller to return the cost of an improvement\\n    ///@return foreignMinistryCost this will be the cost of a foreign ministry\\n    ///@return forwardOperatingBaseCost this will be the cost of a forward operating base...\\n    function getCost2()\\n        public\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (\\n            foreignMinistryCost,\\n            forwardOperatingBaseCost,\\n            guerillaCampCost,\\n            harborCost,\\n            hospitalCost,\\n            intelligenceAgencyCost,\\n            jailCost,\\n            laborCampCost\\n        );\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will allow the owner of the contract to update the cost of a foreign ministry\\n    function updateForeignMinistryCost(uint256 newPrice) public onlyOwner {\\n        foreignMinistryCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will allow the owner of the contract to update the cost of a forward operating base\\n    function updateForwardOperatingBaseCost(uint256 newPrice) public onlyOwner {\\n        forwardOperatingBaseCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will allow the owner of the contract to update the cost of a guerilla camp\\n    function updateGuerillaCampCost(uint256 newPrice) public onlyOwner {\\n        guerillaCampCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will allow the owner of the contract to update the cost of a harbor\\n    function updateHarborCost(uint256 newPrice) public onlyOwner {\\n        harborCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will allow the owner of the contract to update the cost of a hospital\\n    function updateHospitalCost(uint256 newPrice) public onlyOwner {\\n        hospitalCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will allow the owner of the contract to update the cost of an intel agency\\n    function updateIntelligenceAgencyCost(uint256 newPrice) public onlyOwner {\\n        intelligenceAgencyCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will allow the owner of the contract to update the cost of a jail\\n    function updateJailCost(uint256 newPrice) public onlyOwner {\\n        jailCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will allow the owner of the contract to update the cost of a labor camp\\n    function updateLaborCampCost(uint256 newPrice) public onlyOwner {\\n        laborCampCost = newPrice;\\n    }\\n\\n    ///@dev this is a public function that allows a nation owner to purchase improvements\\n    ///@dev this function is only callable by the nation owner\\n    ///@notice this function will allow a nation owner to purchase certain improvements\\n    ///@param amount is the number of improvements being purchased\\n    ///@param countryId is the nation purchasing improvements\\n    /**\\n     * @param improvementId this will determine which improvement is being purchased\\n     * 1 = foreign ministry\\n     * 2 = forward operating base\\n     * 3 = guerilla camp\\n     * 4 = harbor\\n     * 5 = hospital\\n     * 6 = intel agency\\n     * 7 = jail\\n     * 8 = labor camp\\n     */\\n    function buyImprovement2(\\n        uint256 amount,\\n        uint256 countryId,\\n        uint256 improvementId\\n    ) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(countryId, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        uint256 daysSince = tres.getDaysSinceLastBillsPaid(countryId);\\n        require(daysSince == 0, \\\"must pay bills before buying improvements\\\");\\n        bool populationCheck = ImprovementsContract1(improvements1)\\n            .checkCitizenCountForImprovementPurchase(countryId, amount);\\n        require(\\n            populationCheck == true,\\n            \\\"population not high enough for purchase\\\"\\n        );\\n        require(improvementId <= 12, \\\"Invalid improvement ID\\\");\\n        uint256 balance = TreasuryContract(treasury).checkBalance(countryId);\\n        uint256 purchasePrice;\\n        if (improvementId == 1) {\\n            purchasePrice = foreignMinistryCost * amount;\\n            require(balance >= purchasePrice, \\\"Insufficient balance\\\");\\n            uint256 existingCount = idToImprovements2[countryId]\\n                .foreignMinistryCount;\\n            require((existingCount + amount) <= 1, \\\"Cannot own more than 1\\\");\\n            idToImprovements2[countryId].foreignMinistryCount += amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n            uint256 newImprovementTotal = existingImprovementTotal + amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        } else if (improvementId == 2) {\\n            purchasePrice = forwardOperatingBaseCost * amount;\\n            require(balance >= purchasePrice, \\\"Insufficient balance\\\");\\n            uint256 existingCount = idToImprovements2[countryId]\\n                .forwardOperatingBaseCount;\\n            require((existingCount + amount) <= 2, \\\"Cannot own more than 2\\\");\\n            uint256 borderFortificationAmount = ImprovementsContract1(\\n                improvements1\\n            ).getBorderFortificationCount(countryId);\\n            require(\\n                borderFortificationAmount == 0,\\n                \\\"Cannot own if border fortification is owned\\\"\\n            );\\n            uint256 bunkerAmount = ImprovementsContract1(improvements1)\\n                .getBunkerCount(countryId);\\n            require(bunkerAmount == 0, \\\"Cannot own if bunker is owned\\\");\\n            idToImprovements2[countryId].forwardOperatingBaseCount += amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n            uint256 newImprovementTotal = existingImprovementTotal + amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        } else if (improvementId == 3) {\\n            purchasePrice = guerillaCampCost * amount;\\n            require(balance >= purchasePrice, \\\"Insufficient balance\\\");\\n            uint256 existingCount = idToImprovements2[countryId]\\n                .guerillaCampCount;\\n            require((existingCount + amount) <= 5, \\\"Cannot own more than 5\\\");\\n            idToImprovements2[countryId].guerillaCampCount += amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n            uint256 newImprovementTotal = existingImprovementTotal + amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        } else if (improvementId == 4) {\\n            purchasePrice = harborCost * amount;\\n            require(balance >= purchasePrice, \\\"Insufficient balance\\\");\\n            uint256 existingCount = idToImprovements2[countryId].harborCount;\\n            require((existingCount + amount) <= 1, \\\"Cannot own more than 1\\\");\\n            idToImprovements2[countryId].harborCount += amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n            uint256 newImprovementTotal = existingImprovementTotal + amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        } else if (improvementId == 5) {\\n            purchasePrice = hospitalCost * amount;\\n            require(balance >= purchasePrice, \\\"Insufficient balance\\\");\\n            uint256 existingCount = idToImprovements2[countryId].hospitalCount;\\n            require((existingCount + amount) <= 1, \\\"Cannot own more than 1\\\");\\n            uint256 clinicCount = ImprovementsContract1(improvements1)\\n                .getClinicCount(countryId);\\n            require(clinicCount >= 2, \\\"Need to own at least 2 clinics\\\");\\n            idToImprovements2[countryId].hospitalCount += amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n            uint256 newImprovementTotal = existingImprovementTotal + amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        } else if (improvementId == 6) {\\n            purchasePrice = intelligenceAgencyCost * amount;\\n            require(balance >= purchasePrice, \\\"Insufficient balance\\\");\\n            uint256 existingCount = idToImprovements2[countryId]\\n                .intelligenceAgencyCount;\\n            require((existingCount + amount) <= 5, \\\"Cannot own more than 5\\\");\\n            idToImprovements2[countryId].intelligenceAgencyCount += amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n            uint256 newImprovementTotal = existingImprovementTotal + amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        } else if (improvementId == 7) {\\n            purchasePrice = jailCost * amount;\\n            require(balance >= purchasePrice, \\\"Insufficient balance\\\");\\n            uint256 existingCount = idToImprovements2[countryId].jailCount;\\n            require((existingCount + amount) <= 5, \\\"Cannot own more than 5\\\");\\n            idToImprovements2[countryId].jailCount += amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n            uint256 newImprovementTotal = existingImprovementTotal + amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        } else if (improvementId == 8) {\\n            purchasePrice = laborCampCost * amount;\\n            require(balance >= purchasePrice, \\\"Insufficient balance\\\");\\n            uint256 existingCount = idToImprovements2[countryId].laborCampCount;\\n            require((existingCount + amount) <= 5, \\\"Cannot own more than 5\\\");\\n            idToImprovements2[countryId].laborCampCount += amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n            uint256 newImprovementTotal = existingImprovementTotal + amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        }\\n        require(TreasuryContract(treasury).spendBalance(countryId, purchasePrice),\\n            \\\"Unable to spend balance\\\"\\n        );\\n        emit Improvement2Purchased(countryId, improvementId, amount);\\n    }\\n\\n    ///@dev this is a public function that allows a nation owner to delete improvements\\n    ///@dev this function is only callable by the nation owner\\n    ///@notice this function will allow a nation owner to delete certain improvements\\n    ///@param amount is the number of improvements being deleted\\n    ///@param countryId is the nation deleting improvements\\n    /**\\n     * @param improvementId this will determine which improvement is being deleted\\n     * 1 = foreign ministry\\n     * 2 = forward operating base\\n     * 3 = guerilla camp\\n     * 4 = harbor\\n     * 5 = hospital\\n     * 6 = intel agency\\n     * 7 = jail\\n     * 8 = labor camp\\n     */\\n    function deleteImprovement2(\\n        uint256 amount,\\n        uint256 countryId,\\n        uint256 improvementId\\n    ) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(countryId, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        require(improvementId <= 12, \\\"Invalid improvement ID\\\");\\n        if (improvementId == 1) {\\n            uint256 existingCount = idToImprovements2[countryId]\\n                .foreignMinistryCount;\\n            require((existingCount - amount) >= 0, \\\"Cannot delete that many\\\");\\n            idToImprovements2[countryId].foreignMinistryCount -= amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n            uint256 newImprovementTotal = existingImprovementTotal -= amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        } else if (improvementId == 2) {\\n            uint256 existingCount = idToImprovements2[countryId]\\n                .forwardOperatingBaseCount;\\n            require((existingCount - amount) >= 0, \\\"Cannot delete that many\\\");\\n            idToImprovements2[countryId].forwardOperatingBaseCount -= amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n            uint256 newImprovementTotal = existingImprovementTotal -= amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        } else if (improvementId == 3) {\\n            uint256 existingCount = idToImprovements2[countryId]\\n                .guerillaCampCount;\\n            require((existingCount - amount) >= 0, \\\"Cannot delete that many\\\");\\n            idToImprovements2[countryId].guerillaCampCount -= amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n            uint256 newImprovementTotal = existingImprovementTotal -= amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        } else if (improvementId == 4) {\\n            uint256 existingCount = idToImprovements2[countryId].harborCount;\\n            require((existingCount - amount) >= 0, \\\"Cannot delete that many\\\");\\n            uint256 drydockCount = ImprovementsContract1(improvements1)\\n                .getDrydockCount(countryId);\\n            require(\\n                drydockCount == 0,\\n                \\\"Cannot delete a drydock if it supports a harbor\\\"\\n            );\\n            //need a requirement that it cannot be deleted if it supports a trade agreement\\n            uint256[] memory partners = res.getTradingPartners(countryId);\\n            require(\\n                partners.length <= 4,\\n                \\\"Cannot delete, harbor supports a trade\\\"\\n            );\\n            idToImprovements2[countryId].harborCount -= amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n            uint256 newImprovementTotal = existingImprovementTotal -= amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        } else if (improvementId == 5) {\\n            uint256 existingCount = idToImprovements2[countryId].hospitalCount;\\n            require((existingCount - amount) >= 0, \\\"Cannot delete that many\\\");\\n            idToImprovements2[countryId].hospitalCount -= amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n\\n            uint256 newImprovementTotal = existingImprovementTotal -= amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        } else if (improvementId == 6) {\\n            uint256 existingCount = idToImprovements2[countryId]\\n                .intelligenceAgencyCount;\\n            require((existingCount - amount) >= 0, \\\"Cannot delete that many\\\");\\n            uint256 spyCount = spy.getSpyCount(countryId);\\n            uint256 newIntelAgencyCount = existingCount - amount;\\n            bool centralIntelAgency = won1.getCentralIntelligenceAgency(\\n                countryId\\n            );\\n            uint256 baseSpyCount = 50;\\n            if (centralIntelAgency) {\\n                baseSpyCount = 300;\\n            }\\n            require(\\n                spyCount <= (baseSpyCount + (newIntelAgencyCount * 100)),\\n                \\\"You have too many spies to delete, each intel agency supports 100 spies\\\"\\n            );\\n            idToImprovements2[countryId].intelligenceAgencyCount -= amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n            uint256 newImprovementTotal = existingImprovementTotal -= amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        } else if (improvementId == 7) {\\n            uint256 existingCount = idToImprovements2[countryId].jailCount;\\n            require((existingCount - amount) >= 0, \\\"Cannot delete that many\\\");\\n            idToImprovements2[countryId].jailCount -= amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n            uint256 newImprovementTotal = existingImprovementTotal -= amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        } else if (improvementId == 8) {\\n            uint256 existingCount = idToImprovements2[countryId].laborCampCount;\\n            require((existingCount - amount) >= 0, \\\"Cannot delete that many\\\");\\n            idToImprovements2[countryId].laborCampCount -= amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n            uint256 newImprovementTotal = existingImprovementTotal -= amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        }\\n        emit Improvement2Deleted(countryId, improvementId, amount);\\n    }\\n\\n    ///@dev this is a public view function that will return the number of foreign ministries for a given nation\\n    ///@notice this function will return the number of foreign ministries a nation owns\\n    ///@param countryId is the nation ID of the nation being queried\\n    ///@return count is the number of foreign ministries a given nation owns\\n    function getForeignMinistryCount(\\n        uint256 countryId\\n    ) public view returns (uint256 count) {\\n        return idToImprovements2[countryId].foreignMinistryCount;\\n    }\\n\\n    ///@dev this is a public view function that will return the number of forward operating bases for a given nation\\n    ///@notice this function will return the number of forward operating bases a nation owns\\n    ///@param countryId is the nation ID of the nation being queried\\n    ///@return count is the number of forward operating bases a given nation owns\\n    function getForwardOperatingBaseCount(\\n        uint256 countryId\\n    ) public view returns (uint256 count) {\\n        return idToImprovements2[countryId].forwardOperatingBaseCount;\\n    }\\n\\n    ///@dev this is a public view function that will return the number of guerilla camps for a given nation\\n    ///@notice this function will return the number of guerialls camps a nation owns\\n    ///@param countryId is the nation ID of the nation being queried\\n    ///@return count is the number of guerilla camps a given nation owns\\n    function getGuerillaCampCount(\\n        uint256 countryId\\n    ) public view returns (uint256 count) {\\n        return idToImprovements2[countryId].guerillaCampCount;\\n    }\\n\\n    ///@dev this is a public view function that will return the number of harbors for a given nation\\n    ///@notice this function will return the number of harbors a nation owns\\n    ///@param countryId is the nation ID of the nation being queried\\n    ///@return count is the number of harbors a given nation owns\\n    function getHarborCount(\\n        uint256 countryId\\n    ) public view returns (uint256 count) {\\n        return idToImprovements2[countryId].harborCount;\\n    }\\n\\n    ///@dev this is a public view function that will return the number of hospitals for a given nation\\n    ///@notice this function will return the number of hospitals a nation owns\\n    ///@param countryId is the nation ID of the nation being queried\\n    ///@return count is the number of hospitals a given nation owns\\n    function getHospitalCount(\\n        uint256 countryId\\n    ) public view returns (uint256 count) {\\n        return idToImprovements2[countryId].hospitalCount;\\n    }\\n\\n    ///@dev this is a public view function that will return the number of intel agencies for a given nation\\n    ///@notice this function will return the number of intel agencies a nation owns\\n    ///@param countryId is the nation ID of the nation being queried\\n    ///@return count is the number of intel agencies a given nation owns\\n    function getIntelAgencyCount(\\n        uint256 countryId\\n    ) public view returns (uint256 count) {\\n        return idToImprovements2[countryId].intelligenceAgencyCount;\\n    }\\n\\n    ///@dev this is a public view function that will return the number of jails for a given nation\\n    ///@notice this function will return the number of jails a nation owns\\n    ///@param countryId is the nation ID of the nation being queried\\n    ///@return count is the number of jails a given nation owns\\n    function getJailCount(\\n        uint256 countryId\\n    ) public view returns (uint256 count) {\\n        return idToImprovements2[countryId].jailCount;\\n    }\\n\\n    ///@dev this is a public view function that will return the number of labor camps for a given nation\\n    ///@notice this function will return the number of labor camps a nation owns\\n    ///@param countryId is the nation ID of the nation being queried\\n    ///@return count is the number of labor camps a given nation owns\\n    function getLaborCampCount(\\n        uint256 countryId\\n    ) public view returns (uint256 count) {\\n        return idToImprovements2[countryId].laborCampCount;\\n    }\\n}\\n\\n///@title ImprovementsContract4\\n///@author OxSnosh\\n///@notice this contract will allow a nation owner to buy certain improvements\\ncontract ImprovementsContract4 is Ownable, ReentrancyGuard {\\n    address public treasury;\\n    address public improvements1;\\n    address public improvements2;\\n    address public forces;\\n    address public countryMinter;\\n    address public wonders4;\\n    address public resources;\\n    uint256 public missileDefenseCost = 90000 * (10 ** 18);\\n    uint256 public munitionsFactoryCost = 200000 * (10 ** 18);\\n    uint256 public navalAcademyCost = 300000 * (10 ** 18);\\n    uint256 public navalConstructionYardCost = 300000 * (10 ** 18);\\n    uint256 public officeOfPropagandaCost = 200000 * (10 ** 18);\\n    uint256 public policeHeadquartersCost = 75000 * (10 ** 18);\\n\\n    WondersContract1 won1;\\n    ImprovementsContract1 imp1;\\n    ImprovementsContract2 imp2;\\n    CountryMinter mint;\\n    TreasuryContract tres;\\n    WondersContract4 won4;\\n    ResourcesContract res;\\n\\n    struct Improvements4 {\\n        bool initialized;\\n        //Missile Defense\\n        //$90,000\\n        //Reduces effectiveness of incoming cruise missiles used against your nation -10%.\\n        //Nations must retain at least three missile defenses if that nation owns a Strategic Defense Initiative wonder.\\n        uint256 missileDefenseCount;\\n        //MunitionsFactory\\n        //$200,000\\n        //Increases enemy infrastructure damage from your [[aircraft,]] cruise missiles, and nukes +3%\\n        //+0.3 penalty to environment per Munitions Factory.\\n        //Requires maintaining 3 or more Factories.\\n        //Requires having Lead as a resource to purchase.\\n        //Limit 5.\\n        //Cannot build if Bunkers owned.\\n        uint256 munitionsFactoryCount;\\n        //Naval Academy\\n        //$300,000\\n        //Increases both attacking and defending navy vessel strength +1.\\n        //Limit 2 per nation.\\n        //Requires Harbor.\\n        uint256 navalAcademyCount;\\n        //Naval Construction Yard\\n        //$300,000\\n        //Increases the daily purchase limit for navy vessels +1.\\n        //Limit 3 per nation.\\n        //requires Harbor\\n        uint256 navalConstructionYardCount;\\n        //Office of Propoganda\\n        //$200,000\\n        //Decreases the effectiveness of enemy defending soldiers 3%.\\n        //Requires maintaining a Forward Operating Base for each Office of Propaganda\\n        //Limit 2\\n        uint256 officeOfPropagandaCount;\\n        //Police Headquarters\\n        //$75,000\\n        //Increases population happiness +2.\\n        uint256 policeHeadquartersCount;\\n    }\\n\\n    mapping(uint256 => Improvements4) public idToImprovements4;\\n\\n    event Improvement4Purchased(\\n        uint256 indexed countryId,\\n        uint256 indexed improvementId,\\n        uint256 indexed amount\\n    );\\n\\n    event Improvement4Deleted(\\n        uint256 indexed countryId,\\n        uint256 indexed improvementId,\\n        uint256 indexed amount\\n    );\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings(\\n        address _treasury,\\n        address _forces,\\n        address _improvements1,\\n        address _improvements2,\\n        address _countryMinter,\\n        address _wonders4,\\n        address _resources\\n    ) public onlyOwner {\\n        treasury = _treasury;\\n        tres = TreasuryContract(_treasury);\\n        forces = _forces;\\n        improvements1 = _improvements1;\\n        imp1 = ImprovementsContract1(_improvements1);\\n        improvements2 = _improvements2;\\n        imp2 = ImprovementsContract2(_improvements2);\\n        countryMinter = _countryMinter;\\n        mint = CountryMinter(_countryMinter);\\n        wonders4 = _wonders4;\\n        won4 = WondersContract4(_wonders4);\\n        resources = _resources;\\n        res = ResourcesContract(_resources);\\n    }\\n\\n    modifier onlyCountryMinter() {\\n        require(\\n            msg.sender == countryMinter,\\n            \\\"function only callable by countryMinter contract\\\"\\n        );\\n        _;\\n    }\\n\\n    ///@dev this function is only callable by the countryMinter contract\\n    ///@dev this function will initialize the struct to store the info about the minted nations improvements\\n    ///@notice this function will allow each minted nation to buy imoprovements\\n    ///@param id this is the nation ID for the nation being minted\\n    function generateImprovements(uint256 id) public onlyCountryMinter {\\n        require(\\n            idToImprovements4[id].initialized == false,\\n            \\\"Improvements already initialized\\\"\\n        );\\n        Improvements4 memory newImprovements4 = Improvements4(true, 0, 0, 0, 0, 0, 0);\\n        idToImprovements4[id] = newImprovements4;\\n    }\\n\\n    ///@dev this function will allow the caller to return the cost of an improvement\\n    ///@return missileDefenseCost this will be the cost of a foreign ministry\\n    ///@return munitionsFactoryCost this will be the cost of a forward operating base...\\n    function getCost4()\\n        public\\n        view\\n        returns (uint256, uint256, uint256, uint256, uint256, uint256)\\n    {\\n        return (\\n            missileDefenseCost,\\n            munitionsFactoryCost,\\n            navalAcademyCost,\\n            navalConstructionYardCost,\\n            officeOfPropagandaCost,\\n            policeHeadquartersCost\\n        );\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will allow the owner of the contract to update the cost of a missile defense\\n    function updateMissileDefenseCost(uint256 newPrice) public onlyOwner {\\n        missileDefenseCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will allow the owner of the contract to update the cost of a munitions factory\\n    function updateMunitionsFactoryCost(uint256 newPrice) public onlyOwner {\\n        munitionsFactoryCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will allow the owner of the contract to update the cost of naval academy\\n    function updateNavalAcademyCost(uint256 newPrice) public onlyOwner {\\n        navalAcademyCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will allow the owner of the contract to update the cost of naval construction yard\\n    function updateNavalConstructionYardCost(\\n        uint256 newPrice\\n    ) public onlyOwner {\\n        navalConstructionYardCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will allow the owner of the contract to update the cost of an office of propaganda\\n    function updateOfficeOfPropagandaCost(uint256 newPrice) public onlyOwner {\\n        officeOfPropagandaCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will allow the owner of the contract to update the cost of a police headquarters\\n    function updatePoliceHeadquartersCost(uint256 newPrice) public onlyOwner {\\n        policeHeadquartersCost = newPrice;\\n    }\\n\\n    ///@dev this is a public function that allows a nation owner to purchase improvements\\n    ///@dev this function is only callable by the nation owner\\n    ///@notice this function will allow a nation owner to purchase certain improvements\\n    ///@param amount is the number of improvements being purchased\\n    ///@param countryId is the nation purchasing improvements\\n    /**\\n     * @param improvementId this will determine which improvement is being purchased\\n     * 1 = missile defense\\n     * 2 = munitions factory\\n     * 3 = naval academy\\n     * 4 = naval construction yard\\n     * 5 = office of propaganda\\n     * 6 = police headquarters\\n     */\\n    function buyImprovement4(\\n        uint256 amount,\\n        uint256 countryId,\\n        uint256 improvementId\\n    ) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(countryId, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        uint256 daysSince = tres.getDaysSinceLastBillsPaid(countryId);\\n        require(daysSince == 0, \\\"must pay bills before buying improvements\\\");\\n        bool populationCheck = ImprovementsContract1(improvements1)\\n            .checkCitizenCountForImprovementPurchase(countryId, amount);\\n        require(\\n            populationCheck == true,\\n            \\\"population not high enough for purchase\\\"\\n        );\\n        require(improvementId <= 12, \\\"Invalid improvement ID\\\");\\n        uint256 balance = TreasuryContract(treasury).checkBalance(countryId);\\n        uint256 purchasePrice;\\n        if (improvementId == 1) {\\n            purchasePrice = missileDefenseCost * amount;\\n            require(balance >= purchasePrice, \\\"Insufficient balance\\\");\\n            uint256 existingCount = idToImprovements4[countryId]\\n                .missileDefenseCount;\\n            require((existingCount + amount) <= 5, \\\"Cannot own more than 5\\\");\\n            idToImprovements4[countryId].missileDefenseCount += amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n            uint256 newImprovementTotal = existingImprovementTotal + amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        } else if (improvementId == 2) {\\n            purchasePrice = munitionsFactoryCost * amount;\\n            require(balance >= purchasePrice, \\\"Insufficient balance\\\");\\n            uint256 existingCount = idToImprovements4[countryId]\\n                .munitionsFactoryCount;\\n            require((existingCount + amount) <= 5, \\\"Cannot own more than 5\\\");\\n            uint256 bunkerAmount = ImprovementsContract1(improvements1)\\n                .getBunkerCount(countryId);\\n            require(bunkerAmount == 0, \\\"Cannot own if bunker is owned\\\");\\n            uint256 factoryCount = imp1.getFactoryCount(countryId);\\n            require(\\n                factoryCount >= 3,\\n                \\\"Must own at least 3 factories to purchase\\\"\\n            );\\n            require(\\n                res.viewLead(countryId) == true,\\n                \\\"Must possess lead to purchase\\\"\\n            );\\n            idToImprovements4[countryId].munitionsFactoryCount += amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n            uint256 newImprovementTotal = existingImprovementTotal + amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        } else if (improvementId == 3) {\\n            purchasePrice = navalAcademyCost * amount;\\n            require(balance >= purchasePrice, \\\"Insufficient balance\\\");\\n            uint256 existingCount = idToImprovements4[countryId]\\n                .navalAcademyCount;\\n            require((existingCount + amount) <= 2, \\\"Cannot own more than 2\\\");\\n            uint256 harborAmount = imp2.getHarborCount(countryId);\\n            require(harborAmount > 0, \\\"must own a harbor to purchase\\\");\\n            idToImprovements4[countryId].navalAcademyCount += amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n            uint256 newImprovementTotal = existingImprovementTotal + amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        } else if (improvementId == 4) {\\n            purchasePrice = navalConstructionYardCost * amount;\\n            require(balance >= purchasePrice, \\\"Insufficient balance\\\");\\n            uint256 existingCount = idToImprovements4[countryId]\\n                .navalConstructionYardCount;\\n            require((existingCount + amount) <= 3, \\\"Cannot own more than 3\\\");\\n            uint256 harborAmount = imp2.getHarborCount(countryId);\\n            require(harborAmount > 0, \\\"must own a harbor to purchase\\\");\\n            idToImprovements4[countryId].navalConstructionYardCount += amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n            uint256 newImprovementTotal = existingImprovementTotal + amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        } else if (improvementId == 5) {\\n            purchasePrice = officeOfPropagandaCost * amount;\\n            require(balance >= purchasePrice, \\\"Insufficient balance\\\");\\n            uint256 existingCount = idToImprovements4[countryId]\\n                .officeOfPropagandaCount;\\n            require((existingCount + amount) <= 2, \\\"Cannot own more than 2\\\");\\n            uint256 forwardOperatingBaseAmount = ImprovementsContract2(\\n                improvements2\\n            ).getForwardOperatingBaseCount(countryId);\\n            require(\\n                (existingCount + amount) <= forwardOperatingBaseAmount,\\n                \\\"Must own 1 forward operating base for each office of propaganda\\\"\\n            );\\n            idToImprovements4[countryId].officeOfPropagandaCount += amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n            uint256 newImprovementTotal = existingImprovementTotal + amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        } else if (improvementId == 6) {\\n            purchasePrice = policeHeadquartersCost * amount;\\n            require(balance >= purchasePrice, \\\"Insufficient balance\\\");\\n            uint256 existingCount = idToImprovements4[countryId]\\n                .policeHeadquartersCount;\\n            require((existingCount + amount) <= 5, \\\"Cannot own more than 5\\\");\\n            idToImprovements4[countryId].policeHeadquartersCount += amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n            uint256 newImprovementTotal = existingImprovementTotal + amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        }\\n        require(TreasuryContract(treasury).spendBalance(countryId, purchasePrice),\\n            \\\"Unable to spend balance\\\"\\n        );\\n        emit Improvement4Purchased(countryId, improvementId, amount);\\n    }\\n\\n    ///@dev this is a public function that allows a nation owner to delete improvements\\n    ///@dev this function is only callable by the nation owner\\n    ///@notice this function will allow a nation owner to delete certain improvements\\n    ///@param amount is the number of improvements being delete\\n    ///@param countryId is the nation deleting improvements\\n    /**\\n     * @param improvementId this will determine which improvement is being deleted\\n     * 1 = missile defense\\n     * 2 = munitions factory\\n     * 3 = naval academy\\n     * 4 = naval construction yard\\n     * 5 = office of propaganda\\n     * 6 = police headquarters\\n     */\\n    function deleteImprovement4(\\n        uint256 amount,\\n        uint256 countryId,\\n        uint256 improvementId\\n    ) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(countryId, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        require(improvementId <= 12, \\\"Invalid improvement ID\\\");\\n        if (improvementId == 1) {\\n            uint256 existingCount = idToImprovements4[countryId]\\n                .missileDefenseCount;\\n            require((existingCount - amount) >= 0, \\\"Cannot delete that many\\\");\\n            //cannot delete below 3 if strategic defense init\\n            bool strategicDefenseInitiative = won4\\n                .getStrategicDefenseInitiative(countryId);\\n            if (strategicDefenseInitiative) {\\n                require(\\n                    (existingCount - amount) >= 3,\\n                    \\\"Cannot delete if Strategic Defense Initiative owned\\\"\\n                );\\n            }\\n            idToImprovements4[countryId].missileDefenseCount -= amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n            uint256 newImprovementTotal = existingImprovementTotal -= amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        } else if (improvementId == 2) {\\n            uint256 existingCount = idToImprovements4[countryId]\\n                .munitionsFactoryCount;\\n            require((existingCount - amount) >= 0, \\\"Cannot delete that many\\\");\\n            idToImprovements4[countryId].munitionsFactoryCount -= amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n            uint256 newImprovementTotal = existingImprovementTotal -= amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        } else if (improvementId == 3) {\\n            uint256 existingCount = idToImprovements4[countryId]\\n                .navalAcademyCount;\\n            require((existingCount - amount) >= 0, \\\"Cannot delete that many\\\");\\n            idToImprovements4[countryId].navalAcademyCount -= amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n            uint256 newImprovementTotal = existingImprovementTotal -= amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        } else if (improvementId == 4) {\\n            uint256 existingCount = idToImprovements4[countryId]\\n                .navalConstructionYardCount;\\n            require((existingCount - amount) >= 0, \\\"Cannot delete that many\\\");\\n            idToImprovements4[countryId].navalConstructionYardCount -= amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n            uint256 newImprovementTotal = existingImprovementTotal -= amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        } else if (improvementId == 5) {\\n            uint256 existingCount = idToImprovements4[countryId]\\n                .officeOfPropagandaCount;\\n            require((existingCount - amount) >= 0, \\\"Cannot delete that many\\\");\\n            idToImprovements4[countryId].officeOfPropagandaCount -= amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n            uint256 newImprovementTotal = existingImprovementTotal -= amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        } else if (improvementId == 6) {\\n            uint256 existingCount = idToImprovements4[countryId]\\n                .policeHeadquartersCount;\\n            require((existingCount - amount) >= 0, \\\"Cannot delete that many\\\");\\n            idToImprovements4[countryId].policeHeadquartersCount -= amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n            uint256 newImprovementTotal = existingImprovementTotal -= amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        }\\n        emit Improvement4Deleted(countryId, improvementId, amount);\\n    }\\n\\n    ///@dev this is a public view function that will return the number of missile defenses for a given nation\\n    ///@notice this function will return the number of missile defenses a nation owns\\n    ///@param countryId is the nation ID of the nation being queried\\n    ///@return count is the number of missile defenses a given nation owns\\n    function getMissileDefenseCount(\\n        uint256 countryId\\n    ) public view returns (uint256 count) {\\n        return idToImprovements4[countryId].missileDefenseCount;\\n    }\\n\\n    ///@dev this is a public view function that will return the number of munitions factories for a given nation\\n    ///@notice this function will return the number of munitions factories a nation owns\\n    ///@param countryId is the nation ID of the nation being queried\\n    ///@return count is the number of munitions factories a given nation owns\\n    function getMunitionsFactoryCount(\\n        uint256 countryId\\n    ) public view returns (uint256 count) {\\n        return idToImprovements4[countryId].munitionsFactoryCount;\\n    }\\n\\n    ///@dev this is a public view function that will return the number of naval academies for a given nation\\n    ///@notice this function will return the number of naval academies a nation owns\\n    ///@param countryId is the nation ID of the nation being queried\\n    ///@return count is the number of naval academies a given nation owns\\n    function getNavalAcademyCount(\\n        uint256 countryId\\n    ) public view returns (uint256 count) {\\n        return idToImprovements4[countryId].navalAcademyCount;\\n    }\\n\\n    ///@dev this is a public view function that will return the number of naval construction yards for a given nation\\n    ///@notice this function will return the number of naval construction yards a nation owns\\n    ///@param countryId is the nation ID of the nation being queried\\n    ///@return count is the number of naval construction yards a given nation owns\\n    function getNavalConstructionYardCount(\\n        uint256 countryId\\n    ) public view returns (uint256 count) {\\n        return idToImprovements4[countryId].navalConstructionYardCount;\\n    }\\n\\n    ///@dev this is a public view function that will return the number of offices of propaganda for a given nation\\n    ///@notice this function will return the number of roffices of propaganda a nation owns\\n    ///@param countryId is the nation ID of the nation being queried\\n    ///@return count is the number of offices of propaganda a given nation owns\\n    function getOfficeOfPropagandaCount(\\n        uint256 countryId\\n    ) public view returns (uint256 count) {\\n        return idToImprovements4[countryId].officeOfPropagandaCount;\\n    }\\n\\n    ///@dev this is a public view function that will return the number of police headquarters for a given nation\\n    ///@notice this function will return the number of police headquuarters a nation owns\\n    ///@param countryId is the nation ID of the nation being queried\\n    ///@return count is the number of police headquarters a given nation owns\\n    function getPoliceHeadquartersCount(\\n        uint256 countryId\\n    ) public view returns (uint256 count) {\\n        return idToImprovements4[countryId].policeHeadquartersCount;\\n    }\\n}\\n\\n///@title ImprovementsContract3\\n///@author OxSnosh\\n///@notice this contract will allow a nation owner to buy certain improvements\\ncontract ImprovementsContract3 is Ownable, ReentrancyGuard {\\n    address public treasury;\\n    address public improvements1;\\n    address public improvements2;\\n    address public navy;\\n    address public additionalNavy;\\n    address public countryMinter;\\n    address public bonusResources;\\n    address public wonder4;\\n    uint256 public prisonCost = 200000 * (10 ** 18);\\n    uint256 public radiationContainmentChamberCost = 200000 * (10 ** 18);\\n    uint256 public redLightDistrictCost = 50000 * (10 ** 18);\\n    uint256 public rehabilitationFacilityCost = 500000 * (10 ** 18);\\n    uint256 public satelliteCost = 90000 * (10 ** 18);\\n    uint256 public schoolCost = 85000 * (10 ** 18);\\n    uint256 public shipyardCost = 100000 * (10 ** 18);\\n    uint256 public stadiumCost = 110000 * (10 ** 18);\\n    uint256 public universityCost = 180000 * (10 ** 18);\\n\\n    CountryMinter mint;\\n    TreasuryContract tres;\\n    BonusResourcesContract bonus;\\n    WondersContract4 won4;\\n\\n    struct Improvements3 {\\n        bool initialized;\\n        //Prison\\n        //$200,000\\n        //Incarcerates up to 5,000 criminals.\\n        //Limit 5\\n        uint256 prisonCount;\\n        //RadiationContainmentChamber\\n        //$200,000\\n        //Lowers global radiation level that affects your nation by 20%.\\n        //Requires maintaining Radiation Cleanup bonus resource to function\\n        //Requires maintaining a Bunker for each Radiation Containment Chamber.\\n        //Limit 2.\\n        //Collection required to delete.\\n        uint256 radiationContainmentChamberCount;\\n        //RedLightDistrict\\n        //$50,000\\n        //Increases happiness by 1,\\n        //penalizes environment by 0.5,\\n        //-25 to crime prevention score\\n        //Limit 2\\n        uint256 redLightDistrictCount;\\n        //Rehabilitation Facility\\n        //$500,000\\n        //Sends up to 500 criminals back into the citizen count\\n        //Limit 5\\n        uint256 rehabilitationFacilityCount;\\n        //Satellite\\n        //$90,000\\n        //Increases effectiveness of cruise missiles used by your nation +10%.\\n        //Nations must retain at least three satellites if that nation owns a Strategic Defense Initiative wonder\\n        uint256 satelliteCount;\\n        //School\\n        //$85,000\\n        //Increases population income by 5%\\n        //increases literacy rate +1%\\n        //Purchasing 3 or more schools allows you to purchase universities\\n        //This improvement may not be destroyed if it is supporting universities until the universities are first destroyed.\\n        uint256 schoolCount;\\n        //Shipyard\\n        //$100,000\\n        //Allows nations to build and maintain navy Landing Ships, Frigates, Submarines, and Aircraft Carriers.\\n        //Increases the number of each of these types of ships that a nation can support +1.\\n        //This improvement may not be destroyed if it is supporting navy vessels until those navy vessels are first destroyed.\\n        //Requires Harbor\\n        uint256 shipyardCount;\\n        //Stadium\\n        //$110,000\\n        //Increases population happiness + 3.\\n        uint256 stadiumCount;\\n        //University\\n        //$180,000\\n        //Increases population income by 8%\\n        //reduces technology cost -10%\\n        //increases literacy rate +3%.\\n        //Three schools must be purchased before any universities can be purchased.\\n        //Limit 2\\n        uint256 universityCount;\\n    }\\n\\n    mapping(uint256 => Improvements3) public idToImprovements3;\\n\\n    event Improvement3Purchased(\\n        uint256 indexed countryId,\\n        uint256 indexed improvementId,\\n        uint256 indexed amount\\n    );\\n\\n    event Improvement3Deleted(\\n        uint256 indexed countryId,\\n        uint256 indexed improvementId,\\n        uint256 indexed amount\\n    );\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings(\\n        address _treasury,\\n        address _additionalNavy,\\n        address _improvements1,\\n        address _improvements2,\\n        address _countryMinter,\\n        address _bonusResources,\\n        address _wonder4\\n    ) public onlyOwner {\\n        treasury = _treasury;\\n        tres = TreasuryContract(_treasury);\\n        additionalNavy = _additionalNavy;\\n        improvements1 = _improvements1;\\n        improvements2 = _improvements2;\\n        countryMinter = _countryMinter;\\n        mint = CountryMinter(_countryMinter);\\n        bonusResources = _bonusResources;\\n        bonus = BonusResourcesContract(_bonusResources);\\n        wonder4 = _wonder4;\\n        won4 = WondersContract4(_wonder4);\\n    }\\n\\n    modifier onlyCountryMinter() {\\n        require(\\n            msg.sender == countryMinter,\\n            \\\"function only callable by countryMinter contract\\\"\\n        );\\n        _;\\n    }\\n\\n    ///@dev this function is only callable by the countryMinter contract\\n    ///@dev this function will initialize the struct to store the info about the minted nations improvements\\n    ///@notice this function will allow each minted nation to buy imoprovements\\n    ///@param id this is the nation ID for the nation being minted\\n    function generateImprovements(uint256 id) public onlyCountryMinter {\\n        require(\\n            idToImprovements3[id].initialized == false,\\n            \\\"Improvements already initialized\\\"\\n        ); \\n        Improvements3 memory newImprovements3 = Improvements3(\\n            true,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0\\n        );\\n        idToImprovements3[id] = newImprovements3;\\n    }\\n\\n    ///@dev this function will allow the caller to return the cost of an improvement\\n    ///@return officeOfPropagandaCost this will be the cost of an office of propaganda\\n    ///@return policeHeadquartersCost this will be the cost of a police headquarters...\\n    function getCost3()\\n        public\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (\\n            prisonCost,\\n            radiationContainmentChamberCost,\\n            redLightDistrictCost,\\n            rehabilitationFacilityCost,\\n            satelliteCost,\\n            schoolCost,\\n            shipyardCost,\\n            stadiumCost,\\n            universityCost\\n        );\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will allow the owner of the contract to update the cost of a prison\\n    function updatePrisonCost(uint256 newPrice) public onlyOwner {\\n        prisonCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will allow the owner of the contract to update the cost of a radiatiion containment chamber\\n    function updateRadiationContainmentChamberCost(\\n        uint256 newPrice\\n    ) public onlyOwner {\\n        radiationContainmentChamberCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will allow the owner of the contract to update the cost of a red light district\\n    function updateRedLightDistrictCost(uint256 newPrice) public onlyOwner {\\n        redLightDistrictCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will allow the owner of the contract to update the cost of a rehab facility\\n    function updateRehabilitationFacilityCost(\\n        uint256 newPrice\\n    ) public onlyOwner {\\n        rehabilitationFacilityCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will allow the owner of the contract to update the cost of a satellite\\n    function updateSatelliteCost(uint256 newPrice) public onlyOwner {\\n        satelliteCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will allow the owner of the contract to update the cost of a school\\n    function updateSchoolCost(uint256 newPrice) public onlyOwner {\\n        schoolCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will allow the owner of the contract to update the cost of a shipyard\\n    function updateShipyardCost(uint256 newPrice) public onlyOwner {\\n        shipyardCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will allow the owner of the contract to update the cost of a stadium\\n    function updateStadiumCost(uint256 newPrice) public onlyOwner {\\n        stadiumCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will allow the owner of the contract to update the cost of a university\\n    function updateUniversityCost(uint256 newPrice) public onlyOwner {\\n        universityCost = newPrice;\\n    }\\n\\n    ///@dev this is a public function that allows a nation owner to purchase improvements\\n    ///@dev this function is only callable by the nation owner\\n    ///@notice this function will allow a nation owner to purchase certain improvements\\n    ///@param amount is the number of improvements being purchased\\n    ///@param countryId is the nation purchasing improvements\\n    /**\\n     * @param improvementId this will determine which improvement is being purchased\\n     * 1 = prison\\n     * 2 = radiaton containment chambers\\n     * 3 = red light district\\n     * 4 = rehab facilities\\n     * 5 = satellite\\n     * 6 = school\\n     * 7 = shipyard\\n     * 8 = stadium\\n     * 9 = university\\n     */\\n    function buyImprovement3(\\n        uint256 amount,\\n        uint256 countryId,\\n        uint256 improvementId\\n    ) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(countryId, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        uint256 daysSince = tres.getDaysSinceLastBillsPaid(countryId);\\n        require(daysSince == 0, \\\"must pay bills before buying improvements\\\");\\n        bool populationCheck = ImprovementsContract1(improvements1)\\n            .checkCitizenCountForImprovementPurchase(countryId, amount);\\n        require(\\n            populationCheck == true,\\n            \\\"population not high enough for purchase\\\"\\n        );\\n        require(improvementId <= 12, \\\"Invalid improvement ID\\\");\\n        uint256 balance = TreasuryContract(treasury).checkBalance(countryId);\\n        uint256 purchasePrice;\\n        if (improvementId == 1) {\\n            purchasePrice = prisonCost * amount;\\n            require(balance >= purchasePrice, \\\"Insufficient balance\\\");\\n            uint256 existingCount = idToImprovements3[countryId].prisonCount;\\n            require((existingCount + amount) <= 5, \\\"Cannot own more than 5\\\");\\n            idToImprovements3[countryId].prisonCount += amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n            uint256 newImprovementTotal = existingImprovementTotal + amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        } else if (improvementId == 2) {\\n            purchasePrice = radiationContainmentChamberCost * amount;\\n            require(balance >= purchasePrice, \\\"Insufficient balance\\\");\\n            uint256 existingCount = idToImprovements3[countryId]\\n                .radiationContainmentChamberCount;\\n            require((existingCount + amount) <= 2, \\\"Cannot own more than 2\\\");\\n            uint256 bunkerAmount = ImprovementsContract1(improvements1)\\n                .getBunkerCount(countryId);\\n            require(\\n                (existingCount + amount) <= bunkerAmount,\\n                \\\"Must own a bunker for each radiation containment chamber\\\"\\n            );\\n            bool radiationCleanup = bonus.viewRadiationCleanup(countryId);\\n            require(\\n                radiationCleanup,\\n                \\\"nation must possess radiation cleanup bonus resource to purchase\\\"\\n            );\\n            idToImprovements3[countryId]\\n                .radiationContainmentChamberCount += amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n            uint256 newImprovementTotal = existingImprovementTotal + amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        } else if (improvementId == 3) {\\n            purchasePrice = redLightDistrictCost * amount;\\n            require(balance >= purchasePrice, \\\"Insufficient balance\\\");\\n            uint256 existingCount = idToImprovements3[countryId]\\n                .redLightDistrictCount;\\n            require((existingCount + amount) <= 2, \\\"Cannot own more than 2\\\");\\n            idToImprovements3[countryId].redLightDistrictCount += amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n            uint256 newImprovementTotal = existingImprovementTotal + amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        } else if (improvementId == 4) {\\n            purchasePrice = rehabilitationFacilityCost * amount;\\n            require(balance >= purchasePrice, \\\"Insufficient balance\\\");\\n            uint256 existingCount = idToImprovements3[countryId]\\n                .rehabilitationFacilityCount;\\n            require((existingCount + amount) <= 5, \\\"Cannot own more than 5\\\");\\n            idToImprovements3[countryId].rehabilitationFacilityCount += amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n            uint256 newImprovementTotal = existingImprovementTotal + amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        } else if (improvementId == 5) {\\n            purchasePrice = satelliteCost * amount;\\n            require(balance >= purchasePrice, \\\"Insufficient balance\\\");\\n            uint256 existingCount = idToImprovements3[countryId].satelliteCount;\\n            require((existingCount + amount) <= 5, \\\"Cannot own more than 5\\\");\\n            idToImprovements3[countryId].satelliteCount += amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n            uint256 newImprovementTotal = existingImprovementTotal + amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        } else if (improvementId == 6) {\\n            purchasePrice = schoolCost * amount;\\n            require(balance >= purchasePrice, \\\"Insufficient balance\\\");\\n            uint256 existingCount = idToImprovements3[countryId].schoolCount;\\n            require((existingCount + amount) <= 5, \\\"Cannot own more than 5\\\");\\n            idToImprovements3[countryId].schoolCount += amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n            uint256 newImprovementTotal = existingImprovementTotal + amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        } else if (improvementId == 7) {\\n            purchasePrice = shipyardCost * amount;\\n            require(balance >= purchasePrice, \\\"Insufficient balance\\\");\\n            uint256 existingCount = idToImprovements3[countryId].shipyardCount;\\n            require((existingCount + amount) <= 5, \\\"Cannot own more than 5\\\");\\n            idToImprovements3[countryId].shipyardCount += amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n            uint256 newImprovementTotal = existingImprovementTotal + amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        } else if (improvementId == 8) {\\n            purchasePrice = stadiumCost * amount;\\n            require(balance >= purchasePrice, \\\"Insufficient balance\\\");\\n            uint256 existingCount = idToImprovements3[countryId].stadiumCount;\\n            require((existingCount + amount) <= 5, \\\"Cannot own more than 5\\\");\\n            idToImprovements3[countryId].stadiumCount += amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n            uint256 newImprovementTotal = existingImprovementTotal + amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        } else {\\n            purchasePrice = universityCost * amount;\\n            require(balance >= purchasePrice, \\\"Insufficient balance\\\");\\n            uint256 existingCount = idToImprovements3[countryId]\\n                .universityCount;\\n            require((existingCount + amount) <= 2, \\\"Cannot own more than 2\\\");\\n            uint256 schoolAmount = idToImprovements3[countryId].schoolCount;\\n            require(\\n                schoolAmount >= 3,\\n                \\\"Must own 3 schools to own a university\\\"\\n            );\\n            idToImprovements3[countryId].universityCount += amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n            uint256 newImprovementTotal = existingImprovementTotal + amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        }\\n        require(TreasuryContract(treasury).spendBalance(countryId, purchasePrice),\\n            \\\"Unable to spend balance\\\"\\n        );\\n        emit Improvement3Purchased(countryId, improvementId, amount);\\n    }\\n\\n    ///@dev this is a public function that allows a nation owner to delete improvements\\n    ///@dev this function is only callable by the nation owner\\n    ///@notice this function will allow a nation owner to delete certain improvements\\n    ///@param amount is the number of improvements being delete\\n    ///@param countryId is the nation deleting improvements\\n    /**\\n     * @param improvementId this will determine which improvement is being deleted\\n     * 1 = prison\\n     * 2 = radiaton containment chambers\\n     * 3 = red light district\\n     * 4 = rehab facilities\\n     * 5 = satellite\\n     * 6 = school\\n     * 7 = shipyard\\n     * 8 = stadium\\n     * 9 = university\\n     */\\n    function deleteImprovement3(\\n        uint256 amount,\\n        uint256 countryId,\\n        uint256 improvementId\\n    ) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(countryId, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        require(improvementId <= 12, \\\"Invalid improvement ID\\\");\\n        if (improvementId == 1) {\\n            uint256 existingCount = idToImprovements3[countryId].prisonCount;\\n            require((existingCount - amount) >= 0, \\\"Cannot delete that many\\\");\\n            idToImprovements3[countryId].prisonCount -= amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n            uint256 newImprovementTotal = existingImprovementTotal -= amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        } else if (improvementId == 2) {\\n            uint256 existingCount = idToImprovements3[countryId]\\n                .radiationContainmentChamberCount;\\n            require((existingCount - amount) >= 0, \\\"Cannot delete that many\\\");\\n            idToImprovements3[countryId]\\n                .radiationContainmentChamberCount -= amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n            uint256 newImprovementTotal = existingImprovementTotal -= amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        } else if (improvementId == 3) {\\n            uint256 existingCount = idToImprovements3[countryId]\\n                .redLightDistrictCount;\\n            require((existingCount - amount) >= 0, \\\"Cannot delete that many\\\");\\n            idToImprovements3[countryId].redLightDistrictCount -= amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n            uint256 newImprovementTotal = existingImprovementTotal -= amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        } else if (improvementId == 4) {\\n            uint256 existingCount = idToImprovements3[countryId]\\n                .rehabilitationFacilityCount;\\n            require((existingCount - amount) >= 0, \\\"Cannot delete that many\\\");\\n            idToImprovements3[countryId].rehabilitationFacilityCount -= amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n            uint256 newImprovementTotal = existingImprovementTotal -= amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        } else if (improvementId == 5) {\\n            uint256 existingCount = idToImprovements3[countryId].satelliteCount;\\n            require((existingCount - amount) >= 0, \\\"Cannot delete that many\\\");\\n            bool strategicDefense = won4.getStrategicDefenseInitiative(\\n                countryId\\n            );\\n            if (strategicDefense) {\\n                require(\\n                    (existingCount - amount) >= 3,\\n                    \\\"must maintain 3 satellites with strategic defense initiative\\\"\\n                );\\n            }\\n            idToImprovements3[countryId].satelliteCount -= amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n            uint256 newImprovementTotal = existingImprovementTotal -= amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        } else if (improvementId == 6) {\\n            uint256 existingCount = idToImprovements3[countryId].schoolCount;\\n            require((existingCount - amount) >= 0, \\\"Cannot delete that many\\\");\\n            uint256 universityAmount = idToImprovements3[countryId]\\n                .universityCount;\\n            uint256 newCount = existingCount - amount;\\n            require(\\n                newCount >= universityAmount,\\n                \\\"Must own one school for each university\\\"\\n            );\\n            idToImprovements3[countryId].schoolCount -= amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n            uint256 newImprovementTotal = existingImprovementTotal -= amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        } else if (improvementId == 7) {\\n            uint256 existingCount = idToImprovements3[countryId].shipyardCount;\\n            require((existingCount - amount) >= 0, \\\"Cannot delete that many\\\");\\n            uint256 shipyardVesselCount = AdditionalNavyContract(additionalNavy)\\n                .getVesselCountForShipyard(countryId);\\n            require(\\n                shipyardVesselCount == 0,\\n                \\\"Cannot delete shipyard while it supports vessels\\\"\\n            );\\n            idToImprovements3[countryId].shipyardCount -= amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n            uint256 newImprovementTotal = existingImprovementTotal -= amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        } else if (improvementId == 8) {\\n            uint256 existingCount = idToImprovements3[countryId].stadiumCount;\\n            require((existingCount - amount) >= 0, \\\"Cannot delete that many\\\");\\n            idToImprovements3[countryId].stadiumCount -= amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n            uint256 newImprovementTotal = existingImprovementTotal -= amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        } else {\\n            uint256 existingCount = idToImprovements3[countryId]\\n                .universityCount;\\n            require((existingCount - amount) >= 0, \\\"Cannot delete that many\\\");\\n            idToImprovements3[countryId].universityCount -= amount;\\n            uint256 existingImprovementTotal = ImprovementsContract1(\\n                improvements1\\n            ).getImprovementCount(countryId);\\n            uint256 newImprovementTotal = existingImprovementTotal -= amount;\\n            ImprovementsContract1(improvements1).updateImprovementCount(\\n                countryId,\\n                newImprovementTotal\\n            );\\n        }\\n        emit Improvement3Deleted(countryId, improvementId, amount);\\n    }\\n\\n    ///@dev this is a public view function that will return the number of prisons for a given nation\\n    ///@notice this function will return the number of prisons a nation owns\\n    ///@param countryId is the nation ID of the nation being queried\\n    ///@return count is the number of prisons a given nation owns\\n    function getPrisonCount(\\n        uint256 countryId\\n    ) public view returns (uint256 count) {\\n        return idToImprovements3[countryId].prisonCount;\\n    }\\n\\n    ///@dev this is a public view function that will return the number of radiation containment chambers for a given nation\\n    ///@notice this function will return the number of radiation containment chambers a nation owns\\n    ///@param countryId is the nation ID of the nation being queried\\n    ///@return count is the number of radiation containment chambers a given nation owns\\n    function getRadiationContainmentChamberCount(\\n        uint256 countryId\\n    ) public view returns (uint256 count) {\\n        return idToImprovements3[countryId].radiationContainmentChamberCount;\\n    }\\n\\n    ///@dev this is a public view function that will return the number of red light districts for a given nation\\n    ///@notice this function will return the number of red light districts a nation owns\\n    ///@param countryId is the nation ID of the nation being queried\\n    ///@return count is the number of red light districts a given nation owns\\n    function getRedLightDistrictCount(\\n        uint256 countryId\\n    ) public view returns (uint256 count) {\\n        return idToImprovements3[countryId].redLightDistrictCount;\\n    }\\n\\n    ///@dev this is a public view function that will return the number of rehab facilities for a given nation\\n    ///@notice this function will return the number of rehab facilities a nation owns\\n    ///@param countryId is the nation ID of the nation being queried\\n    ///@return count is the number of rehab facilities a given nation owns\\n    function getRehabilitationFacilityCount(\\n        uint256 countryId\\n    ) public view returns (uint256 count) {\\n        return idToImprovements3[countryId].rehabilitationFacilityCount;\\n    }\\n\\n    ///@dev this is a public view function that will return the number of satellites for a given nation\\n    ///@notice this function will return the number of satellites a nation owns\\n    ///@param countryId is the nation ID of the nation being queried\\n    ///@return count is the number of satellites a given nation owns\\n    function getSatelliteCount(\\n        uint256 countryId\\n    ) public view returns (uint256 count) {\\n        return idToImprovements3[countryId].satelliteCount;\\n    }\\n\\n    ///@dev this is a public view function that will return the number of schools for a given nation\\n    ///@notice this function will return the number of schools a nation owns\\n    ///@param countryId is the nation ID of the nation being queried\\n    ///@return count is the number of schools a given nation owns\\n    function getSchoolCount(\\n        uint256 countryId\\n    ) public view returns (uint256 count) {\\n        return idToImprovements3[countryId].schoolCount;\\n    }\\n\\n    ///@dev this is a public view function that will return the number of shipyards for a given nation\\n    ///@notice this function will return the number of shipyards a nation owns\\n    ///@param countryId is the nation ID of the nation being queried\\n    ///@return count is the number of shipyards a given nation owns\\n    function getShipyardCount(\\n        uint256 countryId\\n    ) public view returns (uint256 count) {\\n        return idToImprovements3[countryId].shipyardCount;\\n    }\\n\\n    ///@dev this is a public view function that will return the number of stadiums for a given nation\\n    ///@notice this function will return the number of stadiums a nation owns\\n    ///@param countryId is the nation ID of the nation being queried\\n    ///@return count is the number of stadiums a given nation owns\\n    function getStadiumCount(\\n        uint256 countryId\\n    ) public view returns (uint256 count) {\\n        return idToImprovements3[countryId].stadiumCount;\\n    }\\n\\n    ///@dev this is a public view function that will return the number of universities for a given nation\\n    ///@notice this function will return the number of universities a nation owns\\n    ///@param countryId is the nation ID of the nation being queried\\n    ///@return count is the number of universities a given nation owns\\n    function getUniversityCount(\\n        uint256 countryId\\n    ) public view returns (uint256 count) {\\n        return idToImprovements3[countryId].universityCount;\\n    }\\n}\\n\",\"keccak256\":\"0xd4fe07bec0508640ae227e44d19263899820779c2dfc8af982ea43a852ad43eb\",\"license\":\"BUSL-1.1\"},\"contracts/Infrastructure.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"./CountryMinter.sol\\\";\\nimport \\\"./Resources.sol\\\";\\nimport \\\"./Improvements.sol\\\";\\nimport \\\"./Wonders.sol\\\";\\nimport \\\"./Treasury.sol\\\";\\nimport \\\"./Forces.sol\\\";\\nimport \\\"./CountryParameters.sol\\\";\\nimport \\\"./Crime.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n///@title InfrastructureContract\\n///@author OxSnosh\\n///@notice this contract will store a nations land, technology, infrastructure and tax rate\\ncontract InfrastructureContract is Ownable, ReentrancyGuard {\\n    address public countryMinter;\\n    address public resources;\\n    address public infrastructureMarket;\\n    address public techMarket;\\n    address public landMarket;\\n    address public improvements1;\\n    address public improvements2;\\n    address public improvements3;\\n    address public improvements4;\\n    address public wonders1;\\n    address public wonders2;\\n    address public wonders3;\\n    address public wonders4;\\n    address public forces;\\n    address public treasury;\\n    address public aid;\\n    address public parameters;\\n    address public spyAddress;\\n    address public taxes;\\n    address public cruiseMissile;\\n    address public nukeAddress;\\n    address public airBattle;\\n    address public groundBattle;\\n    address public crime;\\n    address public bonusResources;\\n\\n    CountryMinter mint;\\n    ResourcesContract res;\\n    ImprovementsContract1 imp1;\\n    ImprovementsContract2 imp2;\\n    ImprovementsContract3 imp3;\\n    ImprovementsContract4 imp4;\\n    WondersContract1 won1;\\n    WondersContract3 won3;\\n    WondersContract4 won4;\\n    CrimeContract crim;\\n    ForcesContract forc;\\n    BonusResourcesContract bonus;\\n    CountryParametersContract param;\\n\\n    struct Infrastructure {\\n        bool initialized;\\n        uint256 landArea;\\n        uint256 technologyCount;\\n        uint256 infrastructureCount;\\n        uint256 taxRate;\\n        bool collectionNeededToChangeRate;\\n    }\\n\\n    event InfrastructureDamageFromAirAssault(\\n        uint256 indexed countryId,\\n        uint256 indexed amount\\n    );\\n\\n    event TechDestroyedFromCruiseMissile(\\n        uint256 indexed countryId,\\n        uint256 indexed amount\\n    );\\n\\n    event InfrastructureDestroyedFromCruiseMissile(\\n        uint256 indexed countryId,\\n        uint256 indexed amount\\n    );\\n\\n    event LandDestroyedFromNukeAttack(\\n        uint256 indexed countryId,\\n        uint256 indexed amount\\n    );\\n\\n    event InfrastructureDestroyedFromNukeAttack(\\n        uint256 indexed countryId,\\n        uint256 indexed amount\\n    );\\n\\n    event TechDestroyedFromNukeAttack(\\n        uint256 indexed countryId,\\n        uint256 indexed amount\\n    );\\n\\n    event LandSold(\\n        uint256 indexed countryId,\\n        uint256 indexed amount,\\n        uint256 indexed cost\\n    );\\n\\n    mapping(uint256 => Infrastructure) public idToInfrastructure;\\n    mapping(uint256 => address) public idToOwnerInfrastructure;\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings1(\\n        address _resources,\\n        address _improvements1,\\n        address _improvements2,\\n        address _improvements3,\\n        address _improvements4,\\n        address _infrastructureMarket,\\n        address _techMarket,\\n        address _landMarket,\\n        address _bonusResources\\n    ) public onlyOwner {\\n        resources = _resources;\\n        res = ResourcesContract(_resources);\\n        improvements1 = _improvements1;\\n        imp1 = ImprovementsContract1(_improvements1);\\n        improvements2 = _improvements2;\\n        imp2 = ImprovementsContract2(_improvements2);\\n        improvements3 = _improvements3;\\n        imp3 = ImprovementsContract3(_improvements3);\\n        improvements4 = _improvements4;\\n        imp4 = ImprovementsContract4(_improvements4);\\n        infrastructureMarket = _infrastructureMarket;\\n        techMarket = _techMarket;\\n        landMarket = _landMarket;\\n        bonusResources = _bonusResources;\\n        bonus = BonusResourcesContract(_bonusResources);\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings2(\\n        address _wonders1,\\n        address _wonders2,\\n        address _wonders3,\\n        address _wonders4,\\n        address _treasury,\\n        address _parameters,\\n        address _forces,\\n        address _aid\\n    ) public onlyOwner {\\n        wonders1 = _wonders1;\\n        won1 = WondersContract1(_wonders1);\\n        wonders2 = _wonders2;\\n        wonders3 = _wonders3;\\n        won3 = WondersContract3(_wonders3);\\n        wonders4 = _wonders4;\\n        won4 = WondersContract4(_wonders4);\\n        treasury = _treasury;\\n        parameters = _parameters;\\n        forces = _forces;\\n        forc = ForcesContract(_forces);\\n        aid = _aid;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings3(\\n        address _spyAddress,\\n        address _tax,\\n        address _cruiseMissile,\\n        address _nukeAddress,\\n        address _airBattle,\\n        address _groundBattle,\\n        address _countryMinter,\\n        address _crime,\\n        address _parameters\\n    ) public onlyOwner {\\n        spyAddress = _spyAddress;\\n        taxes = _tax;\\n        cruiseMissile = _cruiseMissile;\\n        nukeAddress = _nukeAddress;\\n        airBattle = _airBattle;\\n        groundBattle = _groundBattle;\\n        countryMinter = _countryMinter;\\n        mint = CountryMinter(_countryMinter);\\n        crime = _crime;\\n        crim = CrimeContract(_crime);\\n        parameters = _parameters;\\n        param = CountryParametersContract(_parameters);\\n    }\\n\\n    modifier onlySpyContract() {\\n        require(\\n            msg.sender == spyAddress,\\n            \\\"only spy contract can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyTaxesContract() {\\n        require(\\n            msg.sender == taxes,\\n            \\\"only tax contract can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyCruiseMissileContract() {\\n        require(\\n            msg.sender == cruiseMissile,\\n            \\\"only callable from cruise missile contract\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyNukeContract() {\\n        require(\\n            msg.sender == nukeAddress,\\n            \\\"only callable from cruise missile contract\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyAirBattle() {\\n        require(\\n            msg.sender == airBattle,\\n            \\\"function only callable from Air Battle contract\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyGroundBattle() {\\n        require(\\n            msg.sender == groundBattle,\\n            \\\"function only callable from Ground Battle contract\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyInfrastructureMarket() {\\n        require(\\n            msg.sender == infrastructureMarket,\\n            \\\"function only callable from infrastructure marketplace\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyTechMarket() {\\n        require(\\n            msg.sender == techMarket,\\n            \\\"function only callable from infrastructure marketplace\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyLandMarket() {\\n        require(\\n            msg.sender == landMarket,\\n            \\\"function only callable from infrastructure marketplace\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyCountryMinter() {\\n        require(\\n            msg.sender == countryMinter,\\n            \\\"function only callable from countryMinter contract\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyAidContract() {\\n        require(msg.sender == aid);\\n        _;\\n    }\\n\\n    ///@dev this function is only callable by the countryMinter contract\\n    ///@dev this function will initialize the struct to store the info about the minted nations infrastructure\\n    ///@notice this function allows this contract to store info about a nations infrastructure\\n    ///@param id this is the nation ID for the nation being minted\\n    function generateInfrastructure(uint256 id) public onlyCountryMinter {\\n        require(\\n            !idToInfrastructure[id].initialized,\\n            \\\"infrastructure already initialized\\\"\\n        );\\n        Infrastructure memory newInfrastrusture = Infrastructure(\\n            true,\\n            20,\\n            0,\\n            20,\\n            16,\\n            false\\n        );\\n        idToInfrastructure[id] = newInfrastrusture;\\n    }\\n\\n    ///@dev this function is only callable from the infrastructure market contract\\n    ///@dev this function will increase a nations infrastructure when purchased in the market contract\\n    ///@notice this function will increase a nations infrastructure when purchased in the market contract\\n    ///@param id is the nation purchasing infrastructure\\n    ///@param amount is the amount of infrastructure being purchased\\n    function increaseInfrastructureFromMarket(\\n        uint256 id,\\n        uint256 amount\\n    ) public onlyInfrastructureMarket returns (bool) {\\n        idToInfrastructure[id].infrastructureCount += amount;\\n        return true;\\n    }\\n\\n    ///@dev this is a public function only callable from the infrastructure market contract\\n    ///@dev this function will allow a nation owner to sell infrastructure\\n    ///@notice this function will allow a nation owner to sell infrastructure\\n    ///@param id this is the nation id of the nation selling infrastructure\\n    ///@param amount this is the amount of infrastructure being sold\\n    function decreaseInfrastructureFromMarket(\\n        uint256 id,\\n        uint256 amount\\n    ) public onlyInfrastructureMarket returns (bool) {\\n        idToInfrastructure[id].infrastructureCount -= amount;\\n        return true;\\n    }\\n\\n    ///@dev this is a public function only callable from the technology market contract\\n    ///@dev this function will increase the technology count when technology is purchased\\n    ///@notice this function will increase technology when technology is purchased\\n    ///@param id this is the nation id of the nation purchasing technology\\n    ///@param amount this is the amount of technology being purchased\\n    function increaseTechnologyFromMarket(\\n        uint256 id,\\n        uint256 amount\\n    ) public onlyTechMarket returns (bool) {\\n        idToInfrastructure[id].technologyCount += amount;\\n        return true;\\n    }\\n\\n    ///@dev this is a public function only callable from the technology market contract\\n    ///@dev this function will allow a nation owner to sell technology\\n    ///@notice this function will allow a nation owner to sell technology\\n    ///@param id this is the nation id of the nation selling technology\\n    ///@param amount this is the amount of technology being sold\\n    function decreaseTechnologyFromMarket(\\n        uint256 id,\\n        uint256 amount\\n    ) public onlyTechMarket returns (bool) {\\n        idToInfrastructure[id].technologyCount -= amount;\\n        return true;\\n    }\\n\\n    ///@dev this is a public function only callable from the land market contract\\n    ///@dev this function will increase the land area count when land is purchased\\n    ///@notice this function will increase land area when land is purchased\\n    ///@param id this is the nation id of the nation purchasing land\\n    ///@param amount this is the amount of land being purchased\\n    function increaseLandCountFromMarket(\\n        uint256 id,\\n        uint256 amount\\n    ) public onlyLandMarket returns (bool) {\\n        idToInfrastructure[id].landArea += amount;\\n        return true;\\n    }\\n\\n    ///@dev this is a public function only callable from the land market contract\\n    ///@dev this function will allow a nation owner to sell land\\n    ///@notice this function will allow a nation owner to sell land\\n    ///@param id this is the nation id of the nation selling land\\n    ///@param amount this is the amount of land being sold\\n    function decreaseLandCountFromMarket(\\n        uint256 id,\\n        uint256 amount\\n    ) public onlyLandMarket returns (bool) {\\n        idToInfrastructure[id].landArea -= amount;\\n        return true;\\n    }\\n\\n    ///@dev this is a public view function that will return the amount of land a nation has\\n    ///@notice this function will return the amount of land a nation has\\n    ///@param countryId this is the nation ID of the country being queried\\n    ///@return count is the amount of land area for a given country\\n    function getLandCount(\\n        uint256 countryId\\n    ) public view returns (uint256 count) {\\n        return idToInfrastructure[countryId].landArea;\\n    }\\n\\n    ///@dev this is a public view function that will return a nations area of influence from a given land area\\n    ///@notice this function will return a given nations area of influence as a multiple of their land area\\n    ///@notice coal will increase area of influence 15%\\n    ///@notice rubber will increase area of influence 20%\\n    ///@notice spices will increase area of influence 8%\\n    ///@notice an agriculture development program will increase area of influence 15%\\n    ///@param id is the nation id of the nation being queried\\n    ///@return uint256 is the given nations area of influence\\n    function getAreaOfInfluence(uint256 id) public view returns (uint256) {\\n        uint256 currentLand = idToInfrastructure[id].landArea;\\n        uint256 landModifier = 100;\\n        bool coal = res.viewCoal(id);\\n        if (coal) {\\n            landModifier += 15;\\n        }\\n        bool rubber = res.viewRubber(id);\\n        if (rubber) {\\n            landModifier += 20;\\n        }\\n        bool spices = res.viewSpices(id);\\n        if (spices) {\\n            landModifier += 8;\\n        }\\n        bool agriculturalDevelopmentProgram = won1\\n            .getAgriculturalDevelopmentProgram(id);\\n        if (agriculturalDevelopmentProgram) {\\n            landModifier += 15;\\n        }\\n        uint256 governmentType = param.getGovernmentType(id);\\n        if (\\n            governmentType == 1 ||\\n            governmentType == 2 ||\\n            governmentType == 6 ||\\n            governmentType == 7 ||\\n            governmentType == 9 ||\\n            governmentType == 10\\n        ) {\\n            landModifier += 5;\\n        }\\n        uint256 areaOfInfluence = ((currentLand * landModifier) / 100);\\n        return areaOfInfluence;\\n    }\\n\\n    ///@dev this is a public function that is only callable from the spy contract\\n    ///@dev this function will decrease land area after a successful spy attack\\n    ///@notice this function will decrease land area after a successful spy attack\\n    ///@param countryId is the country ID of the nation losing land in the attack\\n    ///@param amount is the amount of land being lost in the attack\\n    function decreaseLandCountFromSpyContract(\\n        uint256 countryId,\\n        uint256 amount\\n    ) public onlySpyContract {\\n        uint256 currentLand = idToInfrastructure[countryId].landArea;\\n        if (amount >= currentLand) {\\n            idToInfrastructure[countryId].landArea = 0;\\n        } else {\\n            idToInfrastructure[countryId].landArea -= amount;\\n        }\\n    }\\n\\n    ///@dev this is a public function that will decrease a nations land when attacked by a nuke\\n    ///@dev this function is only callable by the nuke contract\\n    ///@notice this function will decrease the amount of a nations land when attacked by a nuke\\n    ///@notice the maximum amount of land that can be lost is 150 miles\\n    ///@param countryId this is the nation ID of the nation being attacked\\n    ///@param percentage this is the percentage of a nations land being lost\\n    ///@param attackType is the type of attack being used in the nuke strike (1 = standard, 2 = infrastructure, 3 = land, 4 = technology)\\n    ///@notice attack type can only be 2, 3 or 4 if the attacking nation has EMP weaponization\\n    function decreaseLandCountFromNukeContract(\\n        uint256 countryId,\\n        uint256 percentage,\\n        uint256 attackType\\n    ) public onlyNukeContract {\\n        uint256 landAmount = idToInfrastructure[countryId].landArea;\\n        uint256 landAmountToDecrease = ((landAmount * percentage) / 100);\\n        uint256 maxLandToDecrease = 150;\\n        if (attackType == 3) {\\n            maxLandToDecrease = 200;\\n        }\\n        if (attackType == 2 || attackType == 4) {\\n            maxLandToDecrease = 100;\\n        }\\n        if (landAmountToDecrease > maxLandToDecrease) {\\n            idToInfrastructure[countryId].landArea -= maxLandToDecrease;\\n            landAmountToDecrease = maxLandToDecrease;\\n        } else {\\n            idToInfrastructure[countryId].landArea -= landAmountToDecrease;\\n        }\\n        emit LandDestroyedFromNukeAttack(countryId, landAmountToDecrease);\\n    }\\n\\n    ///@dev this is a public view function that will retrun the amount of technology a nation has\\n    ///@notice this function will return the amount of technology a nation has\\n    ///@param countryId this is the nation ID of the nation being queried\\n    ///@return count is the tech amount for a given nation\\n    function getTechnologyCount(\\n        uint256 countryId\\n    ) public view returns (uint256 count) {\\n        uint256 technologyAmount = idToInfrastructure[countryId]\\n            .technologyCount;\\n        return technologyAmount;\\n    }\\n\\n    ///@dev this is a public function only callable from the aid contract\\n    ///@dev this function will send the technology when an aid proposal is accepted\\n    ///@notice this function will send the technology when an aid proposal is accepted\\n    ///@param idSender is the nation id of the sender of the technology aid\\n    ///@param idReciever is the nation id of the recipient of technology aid\\n    ///@param amount is the amount of technology being sent\\n    function sendTech(\\n        uint256 idSender,\\n        uint256 idReciever,\\n        uint256 amount\\n    ) public onlyAidContract nonReentrant returns (bool) {\\n        idToInfrastructure[idSender].technologyCount -= amount;\\n        idToInfrastructure[idReciever].technologyCount += amount;\\n        return true;\\n    }\\n\\n    ///@dev this is a public function only callable from the spy contract\\n    ///@dev this function will decrease the amount of tech for a nation after a successful spy attack\\n    ///@notice this function will decrease a nation's tech after a successful spy attack\\n    ///@param countryId this is the nation ID of the nation being attacked\\n    ///@param amount is the amount of technology a nation is losing in the attack\\n    function decreaseTechCountFromSpyContract(\\n        uint256 countryId,\\n        uint256 amount\\n    ) public onlySpyContract {\\n        uint256 currentTech = idToInfrastructure[countryId].technologyCount;\\n        if (amount >= currentTech) {\\n            idToInfrastructure[countryId].technologyCount = 0;\\n        } else {\\n            idToInfrastructure[countryId].technologyCount -= amount;\\n        }\\n    }\\n\\n    ///@dev this is a public function only callable from the cruise missile contract\\n    ///@dev this function will decrease the amount of tech for a nation after a successful cruise missile attack\\n    ///@notice this function will decrease a nation's tech after a successful cruise missile attack\\n    ///@param countryId this is the nation ID of the nation being attacked\\n    ///@param amount is the amount of technology a nation is losing in the attack\\n    function decreaseTechCountFromCruiseMissileContract(\\n        uint256 countryId,\\n        uint256 amount\\n    ) public onlyCruiseMissileContract {\\n        uint256 currentTech = idToInfrastructure[countryId].technologyCount;\\n        uint256 actualDecrease = amount;\\n\\n        if (amount >= currentTech) {\\n            actualDecrease = currentTech;\\n            idToInfrastructure[countryId].technologyCount = 0;\\n        } else {\\n            idToInfrastructure[countryId].technologyCount -= amount;\\n        }\\n\\n        emit TechDestroyedFromCruiseMissile(countryId, actualDecrease);\\n    }\\n\\n    ///@dev this is a public function only callable from the nuke contract\\n    ///@dev this function will decrease the amount of tech for a nation after a succesful nuke attack\\n    ///@notice this function will decrease a nations tech after a succesful nuke attack\\n    ///@notice the maximum amount of tech a nation can lose in an attack is 50\\n    ///@param countryId this is the nation ID of the nation being attacked\\n    ///@param percentage is the percentage of a nations technology a nation is losing in the attack\\n    ///@param attackType is the type of attack being used in the nuke strike (1 = standard, 2 = infrastructure, 3 = land, 4 = technology)\\n    ///@notice attack type can only be 2, 3 or 4 if the attacking nation has EMP weaponization\\n    function decreaseTechCountFromNukeContract(\\n        uint256 countryId,\\n        uint256 percentage,\\n        uint256 attackType\\n    ) public onlyNukeContract {\\n        uint256 techAmount = idToInfrastructure[countryId].technologyCount;\\n        uint256 techAmountToDecrease = ((techAmount * percentage) / 100);\\n        uint256 maxTechToDecrease = 50;\\n        if (attackType == 4) {\\n            maxTechToDecrease = 70;\\n        }\\n        if (attackType == 2 || attackType == 3) {\\n            maxTechToDecrease = 30;\\n        }\\n        if (techAmountToDecrease > maxTechToDecrease) {\\n            idToInfrastructure[countryId].technologyCount -= maxTechToDecrease;\\n            techAmountToDecrease = maxTechToDecrease;\\n        } else {\\n            idToInfrastructure[countryId]\\n                .technologyCount -= techAmountToDecrease;\\n        }\\n        emit TechDestroyedFromNukeAttack(countryId, techAmountToDecrease);\\n    }\\n\\n    ///@dev this is a public view function that will return the amount of infrastructure for a nation\\n    ///@notice this function will return a nations infrastructure count\\n    ///@param countryId is the nation ID of the country being queried\\n    ///@return count is the amount of technology for a given nation\\n    function getInfrastructureCount(\\n        uint256 countryId\\n    ) public view returns (uint256 count) {\\n        uint256 infrastructureAmount = idToInfrastructure[countryId]\\n            .infrastructureCount;\\n        return infrastructureAmount;\\n    }\\n\\n    ///@dev this is a public function only callable from the spy contract\\n    ///@dev this function will decrease a nation's infrastructure amount after a successful spy attack\\n    ///@notice this function will decrease a nation's infrastructure after a successful spy attack\\n    ///@param countryId this is the nation ID of the nation losing infrastructure\\n    ///@param amount this is the amount of infrastructure being lost\\n    function decreaseInfrastructureCountFromSpyContract(\\n        uint256 countryId,\\n        uint256 amount\\n    ) public onlySpyContract {\\n        uint256 currentInfra = idToInfrastructure[countryId].infrastructureCount;\\n        if (amount >= currentInfra) {\\n            idToInfrastructure[countryId].infrastructureCount = 0;\\n        } else {\\n            idToInfrastructure[countryId].infrastructureCount -= amount;\\n        }\\n    }\\n\\n    ///@dev this is a public view function that is only callable from the cruise missile contract\\n    ///@dev this function will decrease the amount of technology lost in a cruise missile attack\\n    ///@notice this function will decrease the amount of technology lost in a cruise missile attack\\n    ///@param countryId this is the nation id of the country being queried\\n    ///@param amountToDecrease this is the amount of infrastructure being decreased\\n    function decreaseInfrastructureCountFromCruiseMissileContract(\\n        uint256 countryId,\\n        uint256 amountToDecrease\\n    ) public onlyCruiseMissileContract {\\n        uint256 infrastructureAmount = idToInfrastructure[countryId]\\n            .infrastructureCount;\\n        if (amountToDecrease >= infrastructureAmount) {\\n            idToInfrastructure[countryId].infrastructureCount = 0;\\n            amountToDecrease = infrastructureAmount;\\n        } else {\\n            idToInfrastructure[countryId]\\n                .infrastructureCount -= amountToDecrease;\\n        }\\n        emit InfrastructureDestroyedFromCruiseMissile(\\n            countryId,\\n            amountToDecrease\\n        );\\n    }\\n\\n    ///@dev this is a public function only callable from the nuke contract\\n    ///@dev this function will decrease the amount of a nations infrastructure after a nuke attack\\n    ///@notice this function will decrease the amount of a nations infrastructure after a nuke attack\\n    ///@notice the maximum amount of infrastructure a nation can lose in a nuke strike is 150\\n    ///@notice defender bunkers will decrease the amount of damage in a succesful nuke attack\\n    ///@notice attacker munitions factories will increase the amount of damage of a succesful nuke attack\\n    ///@param defenderId is the defending nation in a nuke strike\\n    ///@param attackerId is an attacking nation in a nuke strike\\n    ///@param percentage is the percentage of infrastructure being lost before modifiers (defender bunkers and attacker munitions factories)\\n    ///@param attackType is the type of attack being used in the nuke strike (1 = standard, 2 = infrastructure, 3 = land, 4 = technology)\\n    ///@notice attack type can only be 2, 3 or 4 if the attacking nation has EMP weaponization\\n    function decreaseInfrastructureCountFromNukeContract(\\n        uint256 defenderId,\\n        uint256 attackerId,\\n        uint256 percentage,\\n        uint256 attackType\\n    ) public onlyNukeContract {\\n        uint256 infrastructureAmount = idToInfrastructure[defenderId]\\n            .infrastructureCount;\\n        uint256 damagePercentage = percentage;\\n        uint256 bunkerCount = imp1.getBunkerCount(defenderId);\\n        if (bunkerCount > 0) {\\n            damagePercentage -= (bunkerCount * 3);\\n        }\\n        uint256 attackerMunitionsFactory = imp4.getMunitionsFactoryCount(\\n            attackerId\\n        );\\n        if (attackerMunitionsFactory > 0) {\\n            damagePercentage += (attackerMunitionsFactory * 3);\\n        }\\n        uint256 infrastructureAmountToDecrease = ((infrastructureAmount *\\n            damagePercentage) / 100);\\n        uint256 maxInfrastructureToDecrease = (150 -\\n            (bunkerCount * 5) +\\n            (attackerMunitionsFactory * 5));\\n        if (attackType == 2) {\\n            maxInfrastructureToDecrease = (200 -\\n                (bunkerCount * 5) +\\n                (attackerMunitionsFactory * 5));\\n        }\\n        if (attackType == 3 || attackType == 4) {\\n            maxInfrastructureToDecrease = (100 -\\n                (bunkerCount * 5) +\\n                (attackerMunitionsFactory * 5));\\n        }\\n        if (infrastructureAmountToDecrease > maxInfrastructureToDecrease) {\\n            idToInfrastructure[defenderId]\\n                .infrastructureCount -= maxInfrastructureToDecrease;\\n            infrastructureAmountToDecrease = maxInfrastructureToDecrease;\\n        } else {\\n            idToInfrastructure[defenderId]\\n                .infrastructureCount -= infrastructureAmountToDecrease;\\n        }\\n        emit InfrastructureDestroyedFromNukeAttack(\\n            defenderId,\\n            infrastructureAmountToDecrease\\n        );\\n    }\\n\\n    ///@dev this is a public function only callable from the air battle contract\\n    ///@dev this function will decrease a nations infrastructure lost in a bombing attack\\n    ///@notice this function will decrease a nations infrastructure lost in a bombing attack (max 20 levels)\\n    ///@param countryId is the nation id of the country losing infrastructure\\n    ///@param amountToDecrease is the amount of infrastructure being lost\\n    function decreaseInfrastructureCountFromAirBattleContract(\\n        uint256 countryId,\\n        uint256 amountToDecrease\\n    ) public onlyAirBattle returns (bool) {\\n        uint256 infrastructureDamageModifier = 100;\\n        uint256 bunkerCount = imp1.getBunkerCount(countryId);\\n        if (bunkerCount > 0) {\\n            infrastructureDamageModifier -= (5 * bunkerCount);\\n        }\\n        uint256 damage = ((amountToDecrease * infrastructureDamageModifier) /\\n            100);\\n        uint256 infrastructureAmount = idToInfrastructure[countryId]\\n            .infrastructureCount;\\n        if (damage >= 20) {\\n            damage = 20;\\n        }\\n        if (damage >= infrastructureAmount) {\\n            idToInfrastructure[countryId].infrastructureCount = 0;\\n            damage = infrastructureAmount;\\n        } else {\\n            idToInfrastructure[countryId].infrastructureCount -= damage;\\n        }\\n        emit InfrastructureDamageFromAirAssault(countryId, damage);\\n        return true;\\n    }\\n\\n    ///@dev this is a public function only callable from the ground battle contract\\n    ///@notice this function will transfer land and infrastructure lost during a ground battle\\n    ///@param landMiles is the amount of land being won\\n    ///@param infrastructureLevels is the amount of infrastructure being won\\n    ///@param attackerId is the ID of the attack nation\\n    ///@param defenderId is the ID of the defending nation\\n    function transferLandAndInfrastructure(\\n        uint256 landMiles,\\n        uint256 infrastructureLevels,\\n        uint256 attackerId,\\n        uint256 defenderId\\n    ) public onlyGroundBattle nonReentrant {\\n        uint256 defenderLand = idToInfrastructure[defenderId].landArea;\\n        uint256 defenderInfrastructure = idToInfrastructure[defenderId]\\n            .infrastructureCount;\\n        if (defenderLand <= landMiles) {\\n            idToInfrastructure[attackerId].landArea += defenderLand;\\n            landMiles = defenderLand;\\n            idToInfrastructure[defenderId].landArea = 0;\\n        } else {\\n            idToInfrastructure[attackerId].landArea += landMiles;\\n            idToInfrastructure[defenderId].landArea -= landMiles;\\n        }\\n        if (defenderInfrastructure <= infrastructureLevels) {\\n            idToInfrastructure[attackerId]\\n                .infrastructureCount += defenderInfrastructure;\\n            infrastructureLevels = defenderInfrastructure;\\n            idToInfrastructure[defenderId].infrastructureCount = 0;\\n        } else {\\n            idToInfrastructure[attackerId]\\n                .infrastructureCount += infrastructureLevels;\\n            idToInfrastructure[defenderId]\\n                .infrastructureCount -= infrastructureLevels;\\n        }\\n    }\\n\\n    ///@dev this is public view function that will return a nations total population count\\n    ///@notice this function will return a nation population count\\n    ///@notice a nations base populaton is a nation infrastructure count * 8\\n    ///@notice a nations population is increased by cattle, fish, pigs, sugar, wheat, affluent population and decreased by border walls\\n    ///@return uint256 is a nations total population\\n    function getTotalPopulationCount(uint256 id) public view returns (uint256) {\\n        uint256 infra = getInfrastructureCount(id);\\n        uint256 populationBaseCount = (infra * 8);\\n        bool agricultureDevelopment = won1.getAgriculturalDevelopmentProgram(\\n            id\\n        );\\n        if (agricultureDevelopment) {\\n            populationBaseCount = (infra * 9);\\n        }\\n        uint256 populationModifier = 100;\\n        bool cattle = res.viewCattle(id);\\n        if (cattle) {\\n            populationModifier += 5;\\n        }\\n        bool fish = res.viewFish(id);\\n        if (fish) {\\n            populationModifier += 8;\\n        }\\n        bool pigs = res.viewPigs(id);\\n        if (pigs) {\\n            populationModifier += 4;\\n        }\\n        bool sugar = res.viewSugar(id);\\n        if (sugar) {\\n            populationModifier += 3;\\n        }\\n        bool wheat = res.viewWheat(id);\\n        if (wheat) {\\n            populationModifier += 8;\\n        }\\n        bool affluentPopulation = bonus.viewAffluentPopulation(id);\\n        if (affluentPopulation) {\\n            populationModifier += 5;\\n        }\\n        uint256 borderWalls = imp1.getBorderWallCount(id);\\n        if (borderWalls > 0) {\\n            populationModifier -= (2 * borderWalls);\\n        }\\n        uint256 additionalModifierPoints = getAdditionalPopulationModifierPoints(\\n                id\\n            );\\n        populationModifier += additionalModifierPoints;\\n        uint256 population = ((populationBaseCount * populationModifier) / 100);\\n        return population;\\n    }\\n\\n    ///@dev this is an internal view function that will be called by the above function\\n    ///@dev this function will return additonal population percentage modifiers for the above function\\n    ///@notice this function will return additonal population percentage modifiers for the above function\\n    ///@notice a nations population is increased by clinics, hospitals, disaster relief agencies, national environmental office, national research lab and universal healthcare\\n    ///@return uint256 is the additional percentage modifiers for the above function\\n    function getAdditionalPopulationModifierPoints(\\n        uint256 id\\n    ) internal view returns (uint256) {\\n        uint256 additionalPoints;\\n        uint256 clinicCount = imp1.getClinicCount(id);\\n        if (clinicCount > 0) {\\n            additionalPoints += (2 * clinicCount);\\n        }\\n        uint256 hospitals = imp2.getHospitalCount(id);\\n        if (hospitals > 0) {\\n            additionalPoints += 6;\\n        }\\n        bool disasterReliefAgency = won1.getDisasterReliefAgency(id);\\n        if (disasterReliefAgency) {\\n            additionalPoints += 3;\\n        }\\n        bool nationalEnvironmentOffice = won3.getNationalEnvironmentOffice(id);\\n        if (nationalEnvironmentOffice) {\\n            additionalPoints += 5;\\n        }\\n        bool nationalResearchLab = won3.getNationalResearchLab(id);\\n        if (nationalResearchLab) {\\n            additionalPoints += 5;\\n        }\\n        bool universalHealthcare = won4.getUniversalHealthcare(id);\\n        if (universalHealthcare) {\\n            additionalPoints += 3;\\n        }\\n        return additionalPoints;\\n    }\\n\\n    ///@dev this is public view function that will return a nations taxable population\\n    ///@notice this function will return a nations taxable population\\n    ///@notice a nations total population consists of citizens, soldiers and criminals\\n    ///@notice only citizens pay taxes\\n    ///@param id is the nation id of the nation being queried\\n    ///@return uint256 this is the given nations total taxable population\\n    function getTaxablePopulationCount(\\n        uint256 id\\n    ) public view returns (uint256, uint256) {\\n        uint256 totalPop = getTotalPopulationCount(id);\\n        (uint256 criminals, , ) = crim.getCriminalCount(id);\\n        uint256 soldiers = forc.getSoldierCount(id);\\n        uint256 citizens;\\n        uint256 citizenDefecit;\\n        if ((totalPop) <= (criminals + soldiers)) {\\n            citizens = 0;\\n            citizenDefecit = ((criminals + soldiers) - (totalPop));\\n        } else {\\n            citizens = ((totalPop) - (criminals + soldiers));\\n            citizenDefecit = 0;\\n        }\\n        return (citizens, citizenDefecit);\\n    }\\n\\n    ///@dev this is a public view function that will return a nations tax rate at which they tax their citizens\\n    ///@notice this function will return the tax rate which a nation taxes their citizens at\\n    ///@param id is the nation ID of the nation being queried\\n    ///@return taxPercentage is the tax rate for a given nation\\n    function getTaxRate(\\n        uint256 id\\n    ) public view returns (uint256 taxPercentage) {\\n        uint256 taxRate = idToInfrastructure[id].taxRate;\\n        return taxRate;\\n    }\\n\\n    ///@dev this is a public function only callable by a nation owner\\n    ///@dev this function will allow a nation owner to set their nations tax rate\\n    ///@notice this function will allow a nation owner to set their nations tax rate\\n    ///@notice a tax rate can be between 15% and 28%\\n    ///@notice a tax rate can be 30% with a social security wonder\\n    ///@param id is the nation id of the nation changing its tax rate\\n    ///@param newTaxRate is the new tax rate for a nation\\n    function setTaxRate(uint256 id, uint256 newTaxRate) public {\\n        bool owner = mint.checkOwnership(id, msg.sender);\\n        require(owner, \\\"!nation owner\\\");\\n        require(\\n            idToInfrastructure[id].collectionNeededToChangeRate == false,\\n            \\\"need to collect taxes before changing tax rate\\\"\\n        );\\n        uint256 maximumTaxRate = 28;\\n        bool socialSecurity = won4.getSocialSecuritySystem(id);\\n        if (socialSecurity) {\\n            maximumTaxRate = 30;\\n        }\\n        require(newTaxRate <= maximumTaxRate, \\\"cannot tax above maximum rate\\\");\\n        require(newTaxRate >= 15, \\\"cannot tax below 15%\\\");\\n        idToInfrastructure[id].taxRate = newTaxRate;\\n    }\\n\\n    ///@dev this is a public function only callable from the spy contract\\n    ///@dev this function will reset a nations tax rate after a succesful spy attack\\n    ///@notice this function will reset a nations tax rate after a succesful spy attack\\n    ///@param id this is the nation ID for the nation being attacked and getting its tax rate changed\\n    ///@param newTaxRate is the new tax rate for the nation\\n    function setTaxRateFromSpyContract(\\n        uint256 id,\\n        uint256 newTaxRate\\n    ) public onlySpyContract {\\n        idToInfrastructure[id].taxRate = newTaxRate;\\n        idToInfrastructure[id].collectionNeededToChangeRate = true;\\n    }\\n\\n    ///@dev this is a public function only callable from the taxes contract\\n    ///@dev this function will toggle the collection needed to change tax rate to true\\n    ///@notice this function will toggle the collection needed to change tax rate to true\\n    ///@notice when a nation is blockaded it will need to either break the blockade or collect taxes at a reduced rate to be able to change tax rate\\n    ///@param id is the nation ID of the nation toggleing the collection needed parameter\\n    function toggleCollectionNeededToChangeRate(\\n        uint256 id\\n    ) public onlyTaxesContract {\\n        idToInfrastructure[id].collectionNeededToChangeRate = false;\\n    }\\n\\n    ///@dev this is a public view function that will return true if a nation needs to collect taxes in order to change its tax rate\\n    ///@notice this function will return true if a nation needs to collect taxes in order to change its tax rate\\n    ///@param id is the nation ID of the nation being queried\\n    ///@return bool is the boolean value whether a nation needs to collect taxes in order to change its tax rate\\n    function checkIfCollectionNeededToChangeRate(\\n        uint256 id\\n    ) public view returns (bool) {\\n        bool collectionNeeded = idToInfrastructure[id]\\n            .collectionNeededToChangeRate;\\n        return collectionNeeded;\\n    }\\n}\\n\",\"keccak256\":\"0xb1dd3b1169e5fa0388ce5eed3de3a751a70d556109b39e8d760bf58a0d3b5c9a\",\"license\":\"BUSL-1.1\"},\"contracts/KeeperFile.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n///@title KeeperContract\\n///@author OxSnosh\\n///@dev this contract will allow gelato automation to maintain the game clock that increments every 12 hours\\ncontract KeeperContract is Ownable {\\n    uint256 public gameDay;\\n    uint public interval;\\n    uint public lastTimeStamp;\\n    address public keeperRegistry;\\n\\n    event GameDayIncremented(uint256 indexed gameDay);\\n\\n    constructor() {\\n        interval = 12 hours;\\n        lastTimeStamp = block.timestamp;\\n        gameDay = 0;\\n    }\\n\\n    function checkUpkeep() external view returns (bool upkeepNeeded) {\\n        upkeepNeeded = (block.timestamp - lastTimeStamp) >= interval;\\n        return (upkeepNeeded);\\n    }\\n\\n    function performUpkeep() external {\\n        require(this.checkUpkeep(), \\\"Upkeep not needed\\\");\\n        lastTimeStamp = lastTimeStamp + interval;\\n        gameDay++;\\n        emit GameDayIncremented(gameDay);\\n    }\\n\\n    function incrementGameDay() public onlyOwner {\\n        gameDay++;\\n        lastTimeStamp = block.timestamp;\\n        emit GameDayIncremented(gameDay);\\n    }\\n\\n    function updateInterval(uint _interval) public onlyOwner {\\n        interval = _interval;\\n    }\\n\\n    function getGameDay() public view returns (uint256) {\\n        return gameDay;\\n    }\\n}\\n\",\"keccak256\":\"0x25dbfa5a423e51ba973fd65f4b6a76e576e95466e52c3146a1940ddfdcc31a20\",\"license\":\"BUSL-1.1\"},\"contracts/Military.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"./SpyOperations.sol\\\";\\nimport \\\"./CountryMinter.sol\\\";\\nimport \\\"./KeeperFile.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n///@title MilitaryContract\\n///@author OxSnosh\\n///@dev this contract inherits from openzeppelin's ownable contract\\n///@notice this contract will allow a nation owner to control their defcon level, threat level and war/peace preference\\ncontract MilitaryContract is Ownable {\\n    address public spyAddress;\\n    address public countryMinter;\\n    address public keeper;\\n\\n    SpyOperationsContract spy;\\n    CountryMinter mint;\\n    KeeperContract keep;\\n\\n    struct Military {\\n        bool initialized;\\n        uint256 defconLevel;\\n        uint256 threatLevel;\\n        bool warPeacePreference;\\n        uint256 dayPeaceToggled;\\n    }\\n\\n    event DefconLevelUpdated(uint256 indexed id, uint256 indexed newLevel);\\n\\n    event ThreatLevelUpdated(uint256 indexed id, uint256 indexed newLevel);\\n\\n    event WarPeacePreferenceToggled(\\n        uint256 indexed id,\\n        bool indexed warPeacePreference\\n    );\\n\\n    mapping(uint256 => Military) public idToMilitary;\\n\\n    modifier onlySpyContract() {\\n        require(msg.sender == spyAddress, \\\"only callable from spy contract\\\");\\n        _;\\n    }\\n\\n    modifier onlyCountryMinter() {\\n        require(msg.sender == countryMinter, \\\"only callable from country minter contract\\\");\\n        _;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings (address _spyAddress, address _countryMinter, address _keeper) public onlyOwner {\\n        spyAddress = _spyAddress;\\n        spy = SpyOperationsContract(_spyAddress);\\n        countryMinter = _countryMinter;\\n        mint = CountryMinter(_countryMinter);\\n        keeper = _keeper;\\n        keep = KeeperContract(_keeper);\\n    }\\n\\n    ///@dev this function is a public function only callable from the country minter contract\\n    ///@notice this function will allow allow a nation owner to reset their defcon and threat level and toggle their war peace preference\\n    function generateMilitary(uint256 id) public onlyCountryMinter {\\n        require(idToMilitary[id].initialized == false, \\\"Military already initialized\\\");\\n        Military memory newMilitary = Military(true, 5, 1, false, 0);\\n        idToMilitary[id] = newMilitary;\\n    }\\n\\n    ///@dev this is a public function only callable by the nation owner\\n    ///@dev this function will allow a nation owner to update their defcon level\\n    ///@notice this function will allow a nation owner to update their defcon level\\n    ///@param newDefcon is the new defcon which must be an integer between 1 and 5\\n    ///@param id is the nation id of the nation updating their defcon\\n    function updateDefconLevel(uint256 newDefcon, uint256 id) public {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require (isOwner, \\\"!nation owner\\\");\\n        require(\\n            newDefcon == 1 ||\\n                newDefcon == 2 ||\\n                newDefcon == 3 ||\\n                newDefcon == 4 ||\\n                newDefcon == 5,\\n            \\\"New DEFCON level is not an integer between 1 and 5\\\"\\n        );\\n        idToMilitary[id].defconLevel = newDefcon;\\n        emit DefconLevelUpdated(id, newDefcon);\\n    }\\n\\n    ///@dev this function will only be callable from the Spy contract\\n    ///@dev this function will allow a successful spy operation to update the defcon level\\n    ///@notice this function will allow a successful spy attack to update the defcon level\\n    ///@param id is the nation id that was attacked and getting their defcon reset\\n    ///@param newLevel is the new defcon level being set during the attack\\n    function setDefconLevelFromSpyContract(uint256 id, uint256 newLevel) public onlySpyContract {\\n        require(\\n            newLevel == 1 ||\\n                newLevel == 2 ||\\n                newLevel == 3 ||\\n                newLevel == 4 ||\\n                newLevel == 5,\\n            \\\"New DEFCON level is not an integer between 1 and 5\\\"\\n        );\\n        idToMilitary[id].defconLevel = newLevel;\\n        emit DefconLevelUpdated(id, newLevel);\\n    }\\n\\n    ///@dev this is a public function only callable by the nation owner\\n    ///@dev this function allows a nation owner to update the threat level of a nation\\n    ///@notice this function allows a nation owner to update the threat level of a nation\\n    ///@param newThreatLevel is the new threat level being updated\\n    ///@param id is the nation id of the nation updating the threat level\\n    function updateThreatLevel(uint256 newThreatLevel, uint256 id) public {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require (isOwner, \\\"!nation owner\\\");\\n        require(\\n            newThreatLevel == 1 ||\\n                newThreatLevel == 2 ||\\n                newThreatLevel == 3 ||\\n                newThreatLevel == 4 ||\\n                newThreatLevel == 5,\\n            \\\"Not a valid threat level\\\"\\n        );\\n        idToMilitary[id].threatLevel = newThreatLevel;\\n        emit ThreatLevelUpdated(id, newThreatLevel);\\n    }\\n\\n    ///@dev this function will only be callable from the Spy contract\\n    ///@dev this function will allow a successful spy operation to update the threat level\\n    ///@notice this function will allow a successful spy attack to update the threat level\\n    ///@param id is the nation id that was attacked and getting their threat level reset\\n    ///@param newLevel is the new threat level being set during the attack\\n    function setThreatLevelFromSpyContract(uint256 id, uint256 newLevel)\\n        public\\n        onlySpyContract\\n    {\\n        require(\\n            newLevel == 1 ||\\n                newLevel == 2 ||\\n                newLevel == 3 ||\\n                newLevel == 4 ||\\n                newLevel == 5,\\n            \\\"New threat level is not an integer between 1 and 5\\\"\\n        );\\n        idToMilitary[id].threatLevel = newLevel;\\n        emit ThreatLevelUpdated(id, newLevel);\\n    }\\n\\n    ///@dev this function is a public function only callable from the nation owner\\n    ///@dev this function will allow a nation to toggle their preference for peace or war\\n    ///@notice this function will allow a nation to toggle their preference for peace or war\\n    ///@param id is the nation id of the nation toggling their preference\\n    function toggleWarPeacePreference(uint256 id) public {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require (isOwner, \\\"!nation owner\\\");\\n        uint256 gameDay = keep.getGameDay();\\n        if (idToMilitary[id].warPeacePreference == true) {\\n            require(\\n                (gameDay - idToMilitary[id].dayPeaceToggled) >= 7,\\n                \\\"Must wait 7 days to switch to peace mode\\\"\\n            );\\n            idToMilitary[id].warPeacePreference = false;\\n            idToMilitary[id].dayPeaceToggled = gameDay;\\n        } else {\\n            idToMilitary[id].warPeacePreference = true;\\n            idToMilitary[id].dayPeaceToggled = gameDay;\\n        }\\n        emit WarPeacePreferenceToggled(id, idToMilitary[id].warPeacePreference);\\n    }\\n\\n    ///@dev this is a public view function that will return a nations defcon level\\n    ///@param id is the nation id of the nation being queried\\n    ///@return uint256 is the defcon level for a given nation\\n    function getDefconLevel(uint256 id) public view returns (uint256) {\\n        uint256 defcon = idToMilitary[id].defconLevel;\\n        return defcon;\\n    }\\n\\n    ///@dev this is a public view function that will return a nations threat level\\n    ///@param id is the nation id of the nation being queried\\n    ///@return uint256 is the threat level for a given nation\\n    function getThreatLevel(uint256 id) public view returns (uint256) {\\n        uint256 threatLevel = idToMilitary[id].threatLevel;\\n        return threatLevel;\\n    }\\n\\n    ///@dev this is a public view function that will return a nations preference for war\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool is true if war is possible\\n    function getWarPeacePreference(uint256 id) public view returns (bool, uint256) {\\n        bool war = idToMilitary[id].warPeacePreference;\\n        uint256 daysPeaceToggled = idToMilitary[id].dayPeaceToggled;\\n        uint256 gameDay = keep.getGameDay();\\n        uint256 daysRemaining;\\n        if (war == true) {\\n            daysRemaining = 7 - (gameDay - daysPeaceToggled);\\n        } else {\\n            daysRemaining = 0;\\n        }\\n        return (war, daysRemaining);\\n    }\\n\\n    function getDaysInPeaceMode(uint256 id) public view returns (uint256) {\\n        uint256 daysPeaceToggled = idToMilitary[id].dayPeaceToggled;\\n        uint256 gameDay = keep.getGameDay();\\n        uint256 daysInPeaceMode = (gameDay - daysPeaceToggled);\\n        return daysInPeaceMode;\\n    }\\n}\\n\",\"keccak256\":\"0x6ed3bc0adaf78564e8f4d88574f21271ab544a2a5a7ebc9fd863a571ec67a65b\",\"license\":\"BUSL-1.1\"},\"contracts/Missiles.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"./Treasury.sol\\\";\\nimport \\\"./Infrastructure.sol\\\";\\nimport \\\"./Resources.sol\\\";\\nimport \\\"./Wonders.sol\\\";\\nimport \\\"./Improvements.sol\\\";\\nimport \\\"./CountryMinter.sol\\\";\\nimport \\\"./War.sol\\\";\\nimport \\\"./NationStrength.sol\\\";\\nimport \\\"./GroundBattle.sol\\\";\\nimport \\\"./KeeperFile.sol\\\";\\nimport \\\"./CountryParameters.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n///@title MissilesContract\\n///@author OxSnosh\\n///@dev this contract will allow a nation to purchase cruise missiles and nukes\\n///@dev this contract inherits from the openzeppelin ownable contract\\ncontract MissilesContract is Ownable, ReentrancyGuard {\\n    uint256 public cruiseMissileCost = 20000 * (10 ** 18);\\n    uint256 public defaultNukeCost = 500000 * (10 ** 18);\\n    uint256 public nukeCost;\\n    address public countryMinter;\\n    address public treasury;\\n    address public spyAddress;\\n    address public resources;\\n    address public improvements1;\\n    address public wonders1;\\n    address public wonders2;\\n    address public wonders4;\\n    address public nukeAddress;\\n    address public airBattle;\\n    address public countryinter;\\n    address public strength;\\n    address public keeper;\\n    address public infrastructure;\\n\\n    CountryMinter mint;\\n    InfrastructureContract inf;\\n    ResourcesContract res;\\n    WondersContract1 won1;\\n    WondersContract2 won2;\\n    WondersContract4 won4;\\n    ImprovementsContract1 imp1;\\n    ImprovementsContract2 imp2;\\n    WarContract war;\\n    TreasuryContract tsy;\\n    NationStrengthContract stren;\\n    KeeperContract keep;\\n\\n    struct Missiles {\\n        bool initialized;\\n        uint256 cruiseMissiles;\\n        uint256 nuclearWeapons;\\n    }\\n\\n    mapping(uint256 => mapping(uint256 => uint256))\\n        public idToNukesPurchasedToday;\\n\\n    event CruiseMissilesPurchased(\\n        uint256 indexed id,\\n        uint256 indexed amountPurchased\\n    );\\n\\n    event NukePurchased(uint256 indexed id);\\n\\n    event CruiseMissilesDestroyedByAirAssault(\\n        uint256 indexed id,\\n        uint256 amountDestroyed\\n    );\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings(\\n        address _treasury,\\n        address _spyAddress,\\n        address _nukeAddress,\\n        address _airBattle,\\n        address _wonders2,\\n        address _strength,\\n        address _infrastructure\\n    ) public onlyOwner {\\n        treasury = _treasury;\\n        tsy = TreasuryContract(_treasury);\\n        spyAddress = _spyAddress;\\n        nukeAddress = _nukeAddress;\\n        airBattle = _airBattle;\\n        wonders2 = _wonders2;\\n        won2 = WondersContract2(_wonders2);\\n        strength = _strength;\\n        stren = NationStrengthContract(_strength);\\n        infrastructure = _infrastructure;\\n        inf = InfrastructureContract(_infrastructure);\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings2(\\n        address _resources,\\n        address _improvements1,\\n        address _wonders1,\\n        address _wonders4,\\n        address _countryMinter,\\n        address _keeper\\n    ) public onlyOwner {\\n        resources = _resources;\\n        res = ResourcesContract(_resources);\\n        wonders1 = _wonders1;\\n        won1 = WondersContract1(_wonders1);\\n        wonders4 = _wonders4;\\n        won4 = WondersContract4(_wonders4);\\n        improvements1 = _improvements1;\\n        imp1 = ImprovementsContract1(_improvements1);\\n        countryMinter = _countryMinter;\\n        mint = CountryMinter(_countryMinter);\\n        keeper = _keeper;\\n        keep = KeeperContract(_keeper);\\n    }\\n\\n    mapping(uint256 => Missiles) public idToMissiles;\\n\\n    modifier onlyCountryMinter() {\\n        require(\\n            msg.sender == countryMinter,\\n            \\\"only callable from country minter contract\\\"\\n        );\\n        _;\\n    }\\n\\n    function generateMissiles(uint256 id) public onlyCountryMinter {\\n        require(\\n            idToMissiles[id].initialized == false,\\n            \\\"missiles already initialized\\\"\\n        );\\n        Missiles memory newMissiles = Missiles(true, 0, 0);\\n        idToMissiles[id] = newMissiles;\\n    }\\n\\n    modifier onlySpyContract() {\\n        require(msg.sender == spyAddress, \\\"only callable from spy contract\\\");\\n        _;\\n    }\\n\\n    modifier onlyNukeContract() {\\n        require(msg.sender == nukeAddress, \\\"only callable from nuke contract\\\");\\n        _;\\n    }\\n\\n    modifier onlyAirBattle() {\\n        require(\\n            msg.sender == airBattle,\\n            \\\"only callable from air battle contract\\\"\\n        );\\n        _;\\n    }\\n\\n    ///@dev this function is a public function that will allow a nation owner to purchase cruise missiles\\n    ///@notice this function allows a nation owner to purchase cruise missiles\\n    ///@param amount is the amount of cruise missiles being purchased\\n    ///@param id is the nation id of the nation buying cruise missiles\\n    function buyCruiseMissiles(uint256 amount, uint256 id) public nonReentrant{\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        uint256 techAmount = inf.getTechnologyCount(id);\\n        require(techAmount >= 15, \\\"requires 15 tech\\\");\\n        uint256 costPerMissile = getCruiseMissileCost(id);\\n        uint256 cost = (costPerMissile * amount);\\n        tsy.spendBalance(id, cost);\\n        idToMissiles[id].cruiseMissiles += amount;\\n        emit CruiseMissilesPurchased(id, amount);\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateCruiseMissileCost(uint256 newPrice) public onlyOwner {\\n        cruiseMissileCost = newPrice;\\n    }\\n\\n    ///@dev this is a public view function that will return the cost per missiile of cruise missiles for a nation\\n    ///@notice this function will return the cost per cruise missile for a given nation\\n    ///@param id is the nation id of the nation purchasing missiles\\n    ///@return cost is the cost per missile of cruise missiles for that nation\\n    function getCruiseMissileCost(\\n        uint256 id\\n    ) public view returns (uint256 cost) {\\n        uint256 basePurchasePrice = cruiseMissileCost;\\n        uint256 factoryCount = imp1.getFactoryCount(id);\\n        uint256 costModifier = 100;\\n        if (factoryCount > 0) {\\n            costModifier -= (factoryCount * 5);\\n        }\\n        bool lead = res.viewLead(id);\\n        if (lead) {\\n            costModifier -= 20;\\n        }\\n        uint256 costPerMissile = ((basePurchasePrice * costModifier) / 100);\\n        return costPerMissile;\\n    }\\n\\n    ///@dev this is a public view function that will return the number of cruise missile a nation owns\\n    ///@notice this function will return the number of cruise missiles a given nation owns\\n    ///@param id is the nation ID of the nation being queried\\n    ///@return uint256 is the number of cruise missiles a given nation owns\\n    function getCruiseMissileCount(uint256 id) public view returns (uint256) {\\n        uint256 count = idToMissiles[id].cruiseMissiles;\\n        return count;\\n    }\\n\\n    ///@dev this is a public function that will decrease the number of cruise missiles only callable from the spy contract\\n    ///@notice this function will decrease the number of cruise missiles lost during a spy attack\\n    ///@param amount this is the number of missiles being destroyed\\n    ///@param id this is the nation id of the nation being attacked\\n    function decreaseCruiseMissileCount(\\n        uint256 amount,\\n        uint256 id\\n    ) public onlySpyContract {\\n        uint256 missiles = idToMissiles[id].cruiseMissiles;\\n        if (amount >= missiles) {\\n            idToMissiles[id].cruiseMissiles = 0;\\n        } else {\\n            idToMissiles[id].cruiseMissiles -= amount;\\n        }\\n    }\\n\\n    ///@dev this is a public function that will decrease the number of cruise missiles only callable from the nuke contract\\n    ///@notice this function will decrease the number of cruise missiles lost during a nuke attack\\n    ///@notice a succesful nuke attack will destroy 35% of your nations cruise missiles\\n    ///@notice a fallout shelter system will reduce the number of missiles lost during a nuke attack to 25%\\n    ///@param id this is the nation id of the nation being attacked\\n    function decreaseCruiseMissileCountFromNukeContract(\\n        uint256 id\\n    ) public onlyNukeContract {\\n        uint256 cruiseMissiles = idToMissiles[id].cruiseMissiles;\\n        uint256 percentage = 35;\\n        bool falloutShelter = won1.getFalloutShelterSystem(id);\\n        if (falloutShelter) {\\n            percentage = 25;\\n        }\\n        uint256 cruiseMissilesToDecrease = ((cruiseMissiles * percentage) /\\n            100);\\n        if (cruiseMissilesToDecrease >= cruiseMissiles) {\\n            idToMissiles[id].cruiseMissiles = 0;\\n        } else {\\n            idToMissiles[id].cruiseMissiles -= cruiseMissilesToDecrease;\\n        }\\n    }\\n\\n    ///@dev this is a public function only callable from the air battle contact\\n    ///@notice this function will decrease the number of cruise missiles lost during a bombing mission\\n    ///@param id this is the nation id of the nation losing missiles from being attacked by bombers\\n    ///@param amountToDecrease this is the number of cruise missiles beind destroyed by the bombing mission\\n    function decreaseCruiseMissileCountFromAirBattleContract(\\n        uint256 id,\\n        uint256 amountToDecrease\\n    ) public onlyAirBattle returns (bool) {\\n        uint256 cruiseMissiles = idToMissiles[id].cruiseMissiles;\\n        if (amountToDecrease >= cruiseMissiles) {\\n            idToMissiles[id].cruiseMissiles = 0;\\n            amountToDecrease = cruiseMissiles;\\n        } else {\\n            idToMissiles[id].cruiseMissiles -= amountToDecrease;\\n        }\\n        emit CruiseMissilesDestroyedByAirAssault(id, amountToDecrease);\\n        return true;\\n    }\\n\\n    ///@dev this is a public function that will allow a nation owner to purchase nukes\\n    ///@notice this function allows a nation owner to purchase nukes\\n    ///@notice requirements to purchase nukes are 75 technology, 1000 infrastructure and access to uranium\\n    ///@notice a nation must also have a nation strength of 150,000 or a manhattan project to purchase nukes\\n    ///@notice a nation owner can only purchase one nuke per day (2 with a weapons research center)\\n    ///@param id is the nation id of the nation purchasing nukes\\n    function buyNukes(uint256 id) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        uint256 techAmount = inf.getTechnologyCount(id);\\n        require(techAmount >= 75, \\\"requires 75 tech\\\");\\n        uint256 infrastructureAmount = inf.getInfrastructureCount(id);\\n        require(infrastructureAmount >= 1000, \\\"insufficient infrastructure\\\");\\n        bool isUranium = res.viewUranium(id);\\n        require(isUranium, \\\"no uranium\\\");\\n        uint256 nationStrength = stren.getNationStrength(id);\\n        bool manhattanProject = won2.getManhattanProject(id);\\n        require(\\n            nationStrength > 150000 || manhattanProject,\\n            \\\"need 150,000 strength or manhattan project\\\"\\n        );\\n        uint256 day = keep.getGameDay();\\n        uint256 nukesPurchasedToday = idToNukesPurchasedToday[id][day];\\n        uint256 maxNukesPerDay = 1;\\n        bool weaponsResearchCenter = won4.getWeaponsResearchCenter(id);\\n        if (weaponsResearchCenter) {\\n            maxNukesPerDay = 2;\\n        }\\n        require(\\n            nukesPurchasedToday < maxNukesPerDay,\\n            \\\"already purchased nuke today\\\"\\n        );\\n        uint256 cost = getNukeCost(id);\\n        require(tsy.spendBalance(id, cost), \\\"failed to spend balance on nuke\\\");\\n        idToNukesPurchasedToday[id][day] += 1;\\n        idToMissiles[id].nuclearWeapons += 1;\\n        emit NukePurchased(id);\\n    }\\n\\n    ///@dev this is a public function that will return the cost per nuke for a nation\\n    ///@notice this function will return the cost per nuke for a nation\\n    ///@notice nukes cost 500,000 + (50,000 * current nuke count)\\n    ///@param id is the nation ID of the nation being queried\\n    ///@return uint256 is the cost per nuke for a given nation\\n    function getNukeCost(uint256 id) public view returns (uint256) {\\n        uint256 nukeCount = idToMissiles[id].nuclearWeapons;\\n        uint256 cost = (defaultNukeCost + (nukeCount * 50000));\\n        uint256 mod = 100;\\n        bool lead = res.viewLead(id);\\n        if (lead) {\\n            mod = 80;\\n        }\\n        cost = ((cost * mod) / 100);\\n        return cost;\\n    }\\n\\n    function updateDefaultNukeCost(uint256 newCost) public onlyOwner {\\n        defaultNukeCost = newCost;\\n    }\\n\\n    function getDefaultNukeCost() public view returns (uint256) {\\n        return defaultNukeCost;\\n    }\\n\\n    function getNukesPurchasedToday(uint256 id) public view returns (uint256) {\\n        uint256 day = keep.getGameDay();\\n        return idToNukesPurchasedToday[id][day];\\n    }\\n\\n    ///@dev this is a public view function that will retrun a nations current nuke count\\n    ///@notice this function retrurns a nations current nuke count\\n    ///@param id this is the nation ID for the nation being queried\\n    ///@return uint256 this is the current nuke count for a given nation\\n    function getNukeCount(uint256 id) public view returns (uint256) {\\n        uint256 count = idToMissiles[id].nuclearWeapons;\\n        return count;\\n    }\\n\\n    ///@dev this is a public function that will decrease the nuke count for a nation by 1 when a nuke is launched from the nuke contract\\n    ///@dev this function is only callable from the nuke contract\\n    ///@notice this function will decrease a nations nuke count by 1 when a nuke is launched\\n    ///@param id is the nation id of the nation launching the nuke that will have its nuke count decreased by 1\\n    function decreaseNukeCountFromNukeContract(\\n        uint256 id\\n    ) public onlyNukeContract {\\n        require(\\n            idToMissiles[id].nuclearWeapons > 0,\\n            \\\"no nukes to launch\\\"\\n        );\\n        idToMissiles[id].nuclearWeapons -= 1;\\n    }\\n\\n    ///@dev this is a public function that will decrease the nuke count for a nation when a successful spy attack is executed\\n    ///@dev this function is only callable from the spy contract\\n    ///@notice this function will decrease a nations nuke count if they are successfully attacked by a spy\\n    ///@param id is the nation id of the nation that was attacked and is losing a nuke\\n    function decreaseNukeCountFromSpyContract(\\n        uint256 id\\n    ) public onlySpyContract {\\n        bool silo = won2.getHiddenNuclearMissileSilo(id);\\n        uint256 nukeCount = getNukeCount(id);\\n        uint256 requiredNukeAmount = 1;\\n        if (silo) {\\n            requiredNukeAmount = 6;\\n        }\\n        require(nukeCount >= requiredNukeAmount, \\\"no nukes to destroy\\\");\\n        idToMissiles[id].nuclearWeapons -= 1;\\n    }\\n}\",\"keccak256\":\"0xcb3e214ac59c152d187dc1bd10cdf490d238693df33fa6a4bded277c13753069\",\"license\":\"BUSL-1.1\"},\"contracts/NationStrength.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"./Infrastructure.sol\\\";\\nimport \\\"./Forces.sol\\\";\\nimport \\\"./Fighters.sol\\\";\\nimport \\\"./Bombers.sol\\\";\\nimport \\\"./Navy.sol\\\";\\nimport \\\"./Missiles.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n///@title NationStrengthContract\\n///@author OxSnosh\\n///@dev this contract inherits from openzeppelin's ownable contract\\n///@notice this contract will calculate a given nation's strength\\ncontract NationStrengthContract is Ownable {\\n    address public infrastructure;\\n    address public forces;\\n    address public fighters;\\n    address public bombers;\\n    address public navy;\\n    address public missiles;\\n    address public navy2;\\n\\n    InfrastructureContract inf;\\n    ForcesContract frc;\\n    FightersContract fight;\\n    BombersContract bomb;\\n    NavyContract nav;\\n    MissilesContract mis;\\n    NavyContract2 nav2;\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings (\\n        address _infrastructure,\\n        address _forces,\\n        address _fighters,\\n        address _bombers,\\n        address _navy,\\n        address _missiles,\\n        address _navy2\\n    ) public onlyOwner {\\n        infrastructure = _infrastructure;\\n        inf = InfrastructureContract(_infrastructure);\\n        forces = _forces;\\n        frc = ForcesContract(_forces);\\n        fighters = _fighters;\\n        fight = FightersContract(_fighters);\\n        bombers = _bombers;\\n        bomb = BombersContract(_bombers);\\n        navy = _navy;\\n        nav = NavyContract(_navy);\\n        missiles = _missiles;\\n        mis = MissilesContract(_missiles);\\n        navy2 = _navy2;\\n        nav2 = NavyContract2(_navy2);\\n    }\\n\\n    \\n    ///@dev this function is only callable by the contract owner\\n    function updateInfrastructureContract(address newAddress) public onlyOwner {\\n        infrastructure = newAddress;\\n        inf = InfrastructureContract(newAddress);\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateForcesContract(address newAddress) public onlyOwner {\\n        forces = newAddress;\\n        frc = ForcesContract(newAddress);\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateFightersContract(address newAddress) public onlyOwner {\\n        fighters = newAddress;\\n        fight = FightersContract(newAddress);\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateBombersContract(address newAddress) public onlyOwner {\\n        bombers = newAddress;\\n        bomb = BombersContract(newAddress);\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateNavyContract(address newAddress) public onlyOwner {\\n        navy = newAddress;\\n        nav = NavyContract(newAddress);\\n    }\\n\\n    ///@dev this is a public view function that will return a nation's strength\\n    ///@notice this function will return a given nations strength\\n    ///@notice strength is calculated in the following way\\n    /**\\n     * land purchased * 1.5 +\\n     * infra * 3 +\\n     * tech * 5 +\\n     * soldiers * .02 +\\n     * tanks deployed * .15 +\\n     * tanks defending * .20 +\\n     * aircraft rankings * 5 +\\n     * navy rankings * 10\\n     * cruise missiles * 10 +\\n     * nukes ** 2 * 10 +\\n    */\\n    ///@param id is the nation id of the nation being queried\\n    ///@return uint256 is the nations strength\\n    function getNationStrength(uint256 id) public view returns (uint256) {\\n        uint256 nationStrengthFromCommodities = getNationStrengthFromCommodities(\\n                id\\n            );\\n        uint256 nationStrengthFromMilitary = getNationStrengthFromMilitary(id);\\n        uint256 nationStrength = nationStrengthFromCommodities +\\n            nationStrengthFromMilitary;\\n        return nationStrength;\\n    }\\n\\n    function getNationStrengthFromCommodities(uint256 id)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 landCount = inf.getLandCount(id);\\n        uint256 techCount = inf.getTechnologyCount(id);\\n        uint256 infrastructureCount = inf.getInfrastructureCount(id);\\n        uint256 strengthFromCommodities = (((landCount * 150) +\\n            (techCount * 500) +\\n            (infrastructureCount * 300)) / 100);\\n        return strengthFromCommodities;\\n    }\\n\\n    function getNationStrengthFromMilitary(uint256 id)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 soldierCount = frc.getSoldierCount(id);\\n        uint256 soldierStrength = ((soldierCount * 2) / 100);\\n        uint256 deployedTankCount = frc.getDeployedTankCount(id);\\n        uint256 defendingTankCount = frc.getDefendingTankCount(id);\\n        uint256 tankStrength = (((deployedTankCount * 15) +\\n            (defendingTankCount * 20)) / 100);\\n        uint256 additionalStrength = getAdditionalStrengthFromMiliary(id);\\n        uint256 strengthFromMilitary = (soldierStrength +\\n            tankStrength +\\n            additionalStrength);\\n        return strengthFromMilitary;\\n    }\\n\\n    function getAdditionalStrengthFromMiliary(uint256 id) public view returns (uint256) {\\n        uint256 cruiseMissileCount = mis.getCruiseMissileCount(id);\\n        uint256 cruiseMissileStrength = ((cruiseMissileCount * 10));\\n        uint256 nukeCount = mis.getNukeCount(id);\\n        uint256 nukeStrengthBase = (nukeCount**2);\\n        uint256 nukeStrength = (nukeStrengthBase * 10);\\n        uint256 aircraftStrength = getStrengthFromAirForce(id);\\n        uint256 navyStrength = getStrengthFromNavy(id);\\n        uint256 additionalStrengthFromMilitary = (cruiseMissileStrength +\\n            nukeStrength +\\n            aircraftStrength +\\n            navyStrength);\\n        return additionalStrengthFromMilitary;\\n    }\\n\\n    function getStrengthFromAirForce(uint256 id)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 defendingFighterStrength = getStrengthFromFighters(id);\\n        uint256 defendingBomberStrength = getStrengthFromBombers(id);\\n        uint256 strengthFromAirForce = (defendingFighterStrength +\\n            defendingBomberStrength);\\n        return strengthFromAirForce;\\n    }\\n\\n    function getStrengthFromFighters(uint256 id)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 yak9Count = fight.getYak9Count(id);\\n        uint256 p51MustangCount = fight.getP51MustangCount(id);\\n        uint256 f86SabreCount = fight.getF86SabreCount(id);\\n        uint256 mig15Count = fight.getMig15Count(id);\\n        uint256 f100SuperSabreCount = fight.getF100SuperSabreCount(id);\\n        uint256 additionalFighterStrength = getAdditionalStrengthFromFighters(\\n                id\\n            );\\n        uint256 strengthFromFighters = (((yak9Count * 1) +\\n            (p51MustangCount * 2) +\\n            (f86SabreCount * 3) +\\n            (mig15Count * 4) +\\n            (f100SuperSabreCount * 5) +\\n            additionalFighterStrength) * 5);\\n        return strengthFromFighters;\\n    }\\n\\n    function getAdditionalStrengthFromFighters(uint256 id)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 f35LightningCount = fight.getF35LightningCount(id);\\n        uint256 f15EagleCount = fight.getF15EagleCount(id);\\n        uint256 su30MkiCount = fight.getSu30MkiCount(id);\\n        uint256 f22RaptorCount = fight.getF22RaptorCount(id);\\n        uint256 additionalFighterStrength = ((f35LightningCount * 6) +\\n            (f15EagleCount * 7) +\\n            (su30MkiCount * 8) +\\n            (f22RaptorCount * 9));\\n        return additionalFighterStrength;\\n    }\\n\\n    function getStrengthFromBombers(uint256 id)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 ah1CobraCount = bomb.getAh1CobraCount(id);\\n        uint256 ah64ApacheCount = bomb.getAh64ApacheCount(id);\\n        uint256 bristolBlenheimCount = bomb.getBristolBlenheimCount(\\n            id\\n        );\\n        uint256 b52MitchellCount = bomb.getB52MitchellCount(id);\\n        uint256 b17gFlyingFortressCount = bomb\\n            .getB17gFlyingFortressCount(id);\\n        uint256 additionalStrengthFromBombers = getAdditionalStrengthFromBombers(\\n                id\\n            );\\n        uint256 strengthFromBombers = (((ah1CobraCount * 1) +\\n            (ah64ApacheCount * 2) +\\n            (bristolBlenheimCount * 3) +\\n            (b52MitchellCount * 4) +\\n            (b17gFlyingFortressCount * 5) +\\n            additionalStrengthFromBombers) * 5);\\n        return strengthFromBombers;\\n    }\\n\\n    function getAdditionalStrengthFromBombers(uint256 id)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 b52StratofortressCount = bomb\\n            .getB52StratofortressCount(id);\\n        uint256 b2SpiritCount = bomb.getB2SpiritCount(id);\\n        uint256 b1bLancerCount = bomb.getB1bLancerCount(id);\\n        uint256 tupolevTu160Count = bomb.getTupolevTu160Count(id);\\n        uint256 additionalStrengthFromBombers = ((b52StratofortressCount * 6) +\\n            (b2SpiritCount * 7) +\\n            (b1bLancerCount * 8) +\\n            (tupolevTu160Count * 9));\\n        return additionalStrengthFromBombers;\\n    }\\n\\n    function getStrengthFromNavy(uint256 id) internal view returns (uint256) {\\n        uint256 corvetteCount = nav.getCorvetteCount(id);\\n        uint256 landingShipCount = nav.getLandingShipCount(id);\\n        uint256 battleshipCount = nav.getBattleshipCount(id);\\n        uint256 cruiserCount = nav.getCruiserCount(id);\\n        uint256 additionalNavyStrength = getAdditionalNavyStrength(id);\\n        uint256 strengthFromNavy = (((corvetteCount * 1) +\\n            (landingShipCount * 3) +\\n            (battleshipCount * 5) +\\n            (cruiserCount * 6) +\\n            additionalNavyStrength) * 10);\\n        return strengthFromNavy;\\n    }\\n\\n    function getAdditionalNavyStrength(uint256 id)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 frigateCount = nav2.getFrigateCount(id);\\n        uint256 destroyerCount = nav2.getDestroyerCount(id);\\n        uint256 submarineCount = nav2.getSubmarineCount(id);\\n        uint256 aircraftCarrierCount = nav2.getAircraftCarrierCount(id);\\n        uint256 additionalNavyStrength = ((frigateCount * 8) +\\n            (destroyerCount * 11) +\\n            (submarineCount * 12) +\\n            (aircraftCarrierCount * 15));\\n        return additionalNavyStrength;\\n    }\\n}\\n\",\"keccak256\":\"0xabfddc866e3958ff745f57a567f339955c06425d03d49fda88fb8c42f353d7a7\",\"license\":\"BUSL-1.1\"},\"contracts/Navy.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"./Treasury.sol\\\";\\nimport \\\"./Improvements.sol\\\";\\nimport \\\"./War.sol\\\";\\nimport \\\"./Resources.sol\\\";\\nimport \\\"./Military.sol\\\";\\nimport \\\"./Nuke.sol\\\";\\nimport \\\"./Wonders.sol\\\";\\nimport \\\"./CountryMinter.sol\\\";\\nimport \\\"./KeeperFile.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n///@title NavalActionsContract\\n///@author OxSnosh\\n///@dev this contract inherits from openzeppelin's ownable contract\\n///@notice this contract will keep track of naval actions (daily blockades, purchases and action slots)\\ncontract NavalActionsContract is Ownable {\\n    address public keeper;\\n    address public navy;\\n    address public navy2;\\n    address public navalBlockade;\\n    address public breakBlockade;\\n    address public navalAttack;\\n    address public countryMinter;\\n\\n    CountryMinter mint;\\n    KeeperContract keep;\\n\\n    struct NavalActions {\\n        bool initialized;\\n        mapping(uint256 => bool) blockadedToday;\\n        mapping(uint256 => uint256) purchasesToday;\\n        mapping(uint256 => uint256) actionSlotsUsedToday;\\n    }\\n\\n    mapping(uint256 => NavalActions) idToNavalActions;\\n    mapping(uint256 => mapping(uint256 => uint256)) public idToDayToPurchases;\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings(\\n        address _navalBlockade,\\n        address _breakBlockade,\\n        address _navalAttack,\\n        address _keeper,\\n        address _navy,\\n        address _navy2,\\n        address _countryMinter\\n    ) public onlyOwner {\\n        navalBlockade = _navalBlockade;\\n        breakBlockade = _breakBlockade;\\n        navalAttack = _navalAttack;\\n        navy = _navy;\\n        navy2 = _navy2;\\n        keeper = _keeper;\\n        keep = KeeperContract(_keeper);\\n        countryMinter = _countryMinter;\\n        mint = CountryMinter(_countryMinter);\\n    }\\n\\n    modifier onlyCountryMinter() {\\n        require(\\n            msg.sender == countryMinter,\\n            \\\"function only callable from countryMinter\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyNavalAction() {\\n        require(\\n            msg.sender == navalBlockade ||\\n                msg.sender == breakBlockade ||\\n                msg.sender == navalAttack,\\n            \\\"function only callable from navy contracts\\\"\\n        );\\n        _;\\n    }\\n\\n    ///@dev this is a public function that is only callable from the country minter contract\\n    ///@dev this function is called when a nation is minted\\n    ///@dev this function will initialize the struct that will keep track of action slots, daily blockades and purchases\\n    ///@notice this function will allow the contract to keep track of each nations action slots, blockades and purchases\\n    ///@param id is the nation ID of the country being minted\\n    function generateNavalActions(uint256 id) public onlyCountryMinter {\\n        uint256 gameDay = keep.getGameDay();\\n        NavalActions storage newNavalActions = idToNavalActions[id];\\n        require(\\n            !newNavalActions.initialized,\\n            \\\"naval actions already initialized\\\"\\n        );\\n        newNavalActions.initialized = true;\\n        newNavalActions.blockadedToday[gameDay] = false;\\n        newNavalActions.purchasesToday[gameDay] = 0;\\n        newNavalActions.actionSlotsUsedToday[gameDay] = 0;\\n    }\\n\\n    ///@dev this is a public view function that is only callable from the navy battle contracts\\n    ///@dev a nation is only allows to make 3 naval actions per day\\n    ///@notice a nation is only allowed to make 3 naval actions per day\\n    ///@notice this function will increase naval actions when they occur\\n    function increaseAction(uint256 id) public onlyNavalAction {\\n        uint256 gameDay = keep.getGameDay();\\n        idToNavalActions[id].actionSlotsUsedToday[gameDay] += 1;\\n    }\\n\\n    modifier onlyNavy() {\\n        require(\\n            msg.sender == navy || msg.sender == navy2,\\n            \\\"function only callable from navy contract\\\"\\n        );\\n        _;\\n    }\\n\\n    ///@dev this is a public function that is only callable from the navy contract where purchases occur\\n    ///@dev this function will increment a nations daily purchases as purchases occur\\n    ///@notice a nation at war can purchase 5 naval ships per day (7 with a foreign naval base)\\n    ///@notice during peacetime a nation can purchase 2 naval ships per day (4 with a foreign navla base)\\n    ///@param id is the nation id of the nation purchasin vessels\\n    ///@param amount is the amount of navy vessels being purchased\\n    function increasePurchases(uint256 id, uint256 amount) public onlyNavy {\\n        uint256 gameDay = keep.getGameDay();\\n        idToNavalActions[id].purchasesToday[gameDay] += amount;\\n    }\\n\\n    modifier onlyBlockade() {\\n        require(\\n            msg.sender == navalBlockade,\\n            \\\"function only callable from blockade contract\\\"\\n        );\\n        _;\\n    }\\n\\n    ///@dev this function is a public function that can only be called by the naval battle contracts\\n    ///@dev a nation can only be blockaded once per day\\n    ///@notice a nation can only be blockaded once per day\\n    ///@notice this function will be called when a nation is blockaded and set the blockadedToday to true\\n    ///@param id is the nation id of the nation being blockaded\\n    function toggleBlockaded(uint256 id) public onlyNavalAction {\\n        uint256 day = keep.getGameDay();\\n        idToNavalActions[id].blockadedToday[day] = true;\\n    }\\n\\n    ///@dev this is a public view function that will return a nations daily purchases\\n    ///@notice this function will return the amount of vessels a nation purchases today\\n    ///@param id is the nation id of the nation being queried\\n    ///@return uint256 is the number of ships purchased today\\n    function getPurchasesToday(uint256 id) public view returns (uint256) {\\n        return idToNavalActions[id].purchasesToday[keep.getGameDay()];\\n    }\\n\\n    ///@dev this is a public view function that will return a nations daily action slots used\\n    ///@notice this function will return the number of action slots a naton has used today\\n    ///@param id is the nation id of the nation being queried\\n    ///@return uint256 is the number of action slots used today\\n    function getActionSlotsUsed(uint256 id) public view returns (uint256) {\\n        uint256 gameDay = keep.getGameDay();\\n        uint256 actionSlotsUsed = idToNavalActions[id].actionSlotsUsedToday[\\n            gameDay\\n        ];\\n        return actionSlotsUsed;\\n    }\\n\\n    ///@dev this is a public view function that will return a boolean whether a nation has been blockaded today\\n    ///@notice this function will return true if a nation has been blockaded today\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool will be true if a nation has been blockaded today\\n    function getBlockadedToday(uint256 id) public view returns (bool) {\\n        uint256 gameDay = keep.getGameDay();\\n        bool blockadedToday = idToNavalActions[id].blockadedToday[gameDay];\\n        return blockadedToday;\\n    }\\n}\\n\\n///@title NavyContract\\n///@author OxSnosh\\n///@dev this contract inherits from openzeppelin's ownable contract\\n///@notice this contract will allow a user to purchase navy vessels\\ncontract NavyContract is Ownable, ReentrancyGuard {\\n    address public treasuryAddress;\\n    address public improvementsContract1Address;\\n    address public improvementsContract3Address;\\n    address public improvements4;\\n    address public resources;\\n    address public navyBattleAddress;\\n    address public military;\\n    address public nukes;\\n    address public wonders1;\\n    address public countryMinter;\\n    address public navalActions;\\n    address public additionalNavy;\\n    address public navy2Contract;\\n    address public bonusResources;\\n    address public infrastructure;\\n    uint256 public corvetteCost = 300000 * (10 ** 18);\\n    uint256 public corvetteRequiredInfrastructure = 2000;\\n    uint256 public corvetteRequiredTechnology = 200;\\n    uint256 public landingShipCost = 300000 * (10 ** 18);\\n    uint256 public landingShipRequiredInfrastructure = 2500;\\n    uint256 public landingShipRequiredTechnology = 200;\\n    uint256 public battleshipCost = 300000 * (10 ** 18);\\n    uint256 public battleshipRequiredInfrastructure = 2500;\\n    uint256 public battleshipRequiredTechnology = 300;\\n    uint256 public cruiserCost = 500000 * (10 ** 18);\\n    uint256 public cruiserRequiredInfrastructure = 3000;\\n    uint256 public cruiserRequiredTechnology = 350;\\n\\n    struct Navy {\\n        bool initialized;\\n        uint256 corvetteCount;\\n        uint256 landingShipCount;\\n        uint256 battleshipCount;\\n        uint256 cruiserCount;\\n    }\\n\\n    mapping(uint256 => Navy) public idToNavy;\\n\\n    event CorvettePurchased(\\n        uint256 indexed id,\\n        uint256 indexed amount,\\n        uint256 indexed purchasePrice\\n    );\\n    event LandingShipPurchased(\\n        uint256 indexed id,\\n        uint256 indexed amount,\\n        uint256 indexed purchasePrice\\n    );\\n    event BattleshipPurchased(\\n        uint256 indexed id,\\n        uint256 indexed amount,\\n        uint256 indexed purchasePrice\\n    );\\n    event CruiserPurchased(\\n        uint256 indexed id,\\n        uint256 indexed amount,\\n        uint256 indexed purchasePrice\\n    );\\n\\n    event CorvetteDecommissioned(uint256 indexed id, uint256 indexed amount);\\n\\n    event LandingShipDecommissioned(uint256 indexed id, uint256 indexed amount);\\n\\n    event BattleshipDecommissioned(uint256 indexed id, uint256 indexed amount);\\n\\n    event CruiserDecommissioned(uint256 indexed id, uint256 indexed amount);\\n\\n    event NukeDamageToNavy(\\n        uint256 indexed defenderId,\\n        uint256 corvetteCount,\\n        uint256 landingShip,\\n        uint256 cruiserCount,\\n        uint256 frigateCount\\n    );\\n\\n    ResourcesContract res;\\n    MilitaryContract mil;\\n    ImprovementsContract4 imp4;\\n    NukeContract nuke;\\n    WondersContract1 won1;\\n    NavalActionsContract navAct;\\n    CountryMinter mint;\\n    AdditionalNavyContract addNav;\\n    BonusResourcesContract bonus;\\n    NavyContract2 navy2;\\n    InfrastructureContract inf;\\n\\n    modifier onlyCountryMinter() {\\n        require(\\n            msg.sender == countryMinter,\\n            \\\"function only callable from countryMinter\\\"\\n        );\\n        _;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings(\\n        address _treasuryAddress,\\n        address _improvementsContract1Address,\\n        address _improvementsContract3Address,\\n        address _improvements4,\\n        address _resources,\\n        address _military,\\n        address _nukes,\\n        address _wonders1,\\n        address _navalActions,\\n        address _additionalNavy\\n    ) public onlyOwner {\\n        treasuryAddress = _treasuryAddress;\\n        improvementsContract1Address = _improvementsContract1Address;\\n        improvementsContract3Address = _improvementsContract3Address;\\n        improvements4 = _improvements4;\\n        imp4 = ImprovementsContract4(_improvements4);\\n        resources = _resources;\\n        res = ResourcesContract(_resources);\\n        military = _military;\\n        mil = MilitaryContract(_military);\\n        nukes = _nukes;\\n        nuke = NukeContract(_nukes);\\n        wonders1 = _wonders1;\\n        won1 = WondersContract1(_wonders1);\\n        navalActions = _navalActions;\\n        navAct = NavalActionsContract(_navalActions);\\n        additionalNavy = _additionalNavy;\\n        addNav = AdditionalNavyContract(_additionalNavy);\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings2(\\n        address _countryMinter,\\n        address _bonusResources,\\n        address _navy2,\\n        address _infrastructure\\n    ) public onlyOwner {\\n        countryMinter = _countryMinter;\\n        mint = CountryMinter(_countryMinter);\\n        bonusResources = _bonusResources;\\n        bonus = BonusResourcesContract(_bonusResources);\\n        navy2Contract = _navy2;\\n        navy2 = NavyContract2(_navy2);\\n        infrastructure = _infrastructure;\\n        inf = InfrastructureContract(_infrastructure);\\n    }\\n\\n    ///@dev this is a public function only callable from the countryMinter contract\\n    ///@dev this function will allow a nation owner to buy navy vessels\\n    ///@notice this function will allow a nation owner to buy navy vessels\\n    ///@param id this is the nation id of the nation being minted\\n    function generateNavy(uint256 id) public onlyCountryMinter {\\n        require(\\n            !idToNavy[id].initialized,\\n            \\\"navy already initialized for this nation\\\"\\n        );\\n        Navy memory newNavy = Navy(true, 0, 0, 0, 0);\\n        idToNavy[id] = newNavy;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateCorvetteSpecs(\\n        uint256 newPrice,\\n        uint256 newRequiredInf,\\n        uint256 newRequiredTech\\n    ) public onlyOwner {\\n        corvetteCost = newPrice;\\n        corvetteRequiredInfrastructure = newRequiredInf;\\n        corvetteRequiredTechnology = newRequiredTech;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateLandingShipSpecs(\\n        uint256 newPrice,\\n        uint256 newRequiredInf,\\n        uint256 newRequiredTech\\n    ) public onlyOwner {\\n        landingShipCost = newPrice;\\n        landingShipRequiredInfrastructure = newRequiredInf;\\n        landingShipRequiredTechnology = newRequiredTech;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateBattleshipSpecs(\\n        uint256 newPrice,\\n        uint256 newRequiredInf,\\n        uint256 newRequiredTech\\n    ) public onlyOwner {\\n        battleshipCost = newPrice;\\n        battleshipRequiredInfrastructure = newRequiredInf;\\n        battleshipRequiredTechnology = newRequiredTech;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateCruiserSpecs(\\n        uint256 newPrice,\\n        uint256 newRequiredInf,\\n        uint256 newRequiredTech\\n    ) public onlyOwner {\\n        cruiserCost = newPrice;\\n        cruiserRequiredInfrastructure = newRequiredInf;\\n        cruiserRequiredTechnology = newRequiredTech;\\n    }\\n\\n    modifier onlyBattle() {\\n        require(msg.sender == navyBattleAddress, \\\"only callable from battle\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdditionalNavy() {\\n        require(\\n            msg.sender == additionalNavy,\\n            \\\"function only callable from additional navy contract\\\"\\n        );\\n        _;\\n    }\\n\\n    function decreaseShipCount(\\n        uint256 nationId,\\n        uint256 shipType\\n    ) public onlyAdditionalNavy {\\n        if (shipType == 1) {\\n            require(\\n                idToNavy[nationId].corvetteCount > 0,\\n                \\\"underflow: corvette\\\"\\n            );\\n            idToNavy[nationId].corvetteCount -= 1;\\n        } else if (shipType == 2) {\\n            require(\\n                idToNavy[nationId].landingShipCount > 0,\\n                \\\"underflow: landing ship\\\"\\n            );\\n            idToNavy[nationId].landingShipCount -= 1;\\n        } else if (shipType == 3) {\\n            require(\\n                idToNavy[nationId].battleshipCount > 0,\\n                \\\"underflow: battleship\\\"\\n            );\\n            idToNavy[nationId].battleshipCount -= 1;\\n        } else if (shipType == 4) {\\n            require(idToNavy[nationId].cruiserCount > 0, \\\"underflow: cruiser\\\");\\n            idToNavy[nationId].cruiserCount -= 1;\\n        }\\n    }\\n\\n    function getNavyVesselCount(uint256 id) public view returns (uint256) {\\n        uint256 corvetteCount = idToNavy[id].corvetteCount;\\n        uint256 landingShipCount = idToNavy[id].landingShipCount;\\n        uint256 battleshipCount = idToNavy[id].battleshipCount;\\n        uint256 cruiserCount = idToNavy[id].cruiserCount;\\n        uint256 frigateCount = navy2.getFrigateCount(id);\\n        uint256 destroyerCount = navy2.getDestroyerCount(id);\\n        uint256 submarineCount = navy2.getSubmarineCount(id);\\n        uint256 aircraftCarrierCount = navy2.getAircraftCarrierCount(id);\\n        uint256 navyVessels = (corvetteCount +\\n            landingShipCount +\\n            battleshipCount +\\n            cruiserCount +\\n            frigateCount +\\n            destroyerCount +\\n            submarineCount +\\n            aircraftCarrierCount);\\n        return navyVessels;\\n    }\\n\\n    ///@dev this is a public function callable only by the nation owner\\n    ///@dev this function will allow a nation owner to purchase a corvette vessel\\n    ///@notice this function will allow a nation owner to purchase a corvette vessel\\n    ///@param amount this is the number of corvettes being purchased\\n    ///@param id this is the naton id of the nation purchasing vessels\\n    function buyCorvette(uint256 amount, uint256 id) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        (uint256 availablePurchases, ) = addNav.getAvailablePurchases(id);\\n        require(\\n            amount <= availablePurchases,\\n            \\\"purchase exceeds daily purchase limit\\\"\\n        );\\n        uint256 drydockAmount = ImprovementsContract1(\\n            improvementsContract1Address\\n        ).getDrydockCount(id);\\n        uint256 currentShips = getCorvetteCount(id);\\n        uint256 nationInfrastructure = inf.getInfrastructureCount(id);\\n        uint256 additionalPurchases = (nationInfrastructure /\\n            corvetteRequiredInfrastructure);\\n        require(\\n            (currentShips + amount) <= (drydockAmount + additionalPurchases),\\n            \\\"need more drydocks or infrastructure\\\"\\n        );\\n        require(\\n            inf.getTechnologyCount(id) >= corvetteRequiredTechnology,\\n            \\\"need more technology\\\"\\n        );\\n        uint256 purchasePrice = (corvetteCost * amount);\\n        bool steel = bonus.viewSteel(id);\\n        if (steel) {\\n            purchasePrice = ((purchasePrice * 85) / 100);\\n        }\\n        uint256 balance = TreasuryContract(treasuryAddress).checkBalance(id);\\n        require(balance >= purchasePrice);\\n        idToNavy[id].corvetteCount += amount;\\n        navAct.increasePurchases(id, amount);\\n        TreasuryContract(treasuryAddress).spendBalance(id, purchasePrice);\\n        emit CorvettePurchased(id, amount, purchasePrice);\\n    }\\n\\n    function decommissionCorvette(uint256 amount, uint256 id) public {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        require(amount <= idToNavy[id].corvetteCount, \\\"not enough corvettes\\\");\\n        idToNavy[id].corvetteCount -= amount;\\n        emit CorvetteDecommissioned(id, amount);\\n    }\\n\\n    ///@dev this is a public view function that will return the number of corvettes a nation owns\\n    ///@dev this function wll return the number of corvettes a nation owns\\n    ///@notice this functon will return the number of corvettes a nation owns\\n    ///@param id this is the nation id of the nation being queried\\n    ///@return uint256 this is the number of corvettes for a given nation\\n    function getCorvetteCount(uint256 id) public view returns (uint256) {\\n        uint256 corvetteAmount = idToNavy[id].corvetteCount;\\n        return corvetteAmount;\\n    }\\n\\n    ///@dev this is a public function callable only by the nation owner\\n    ///@dev this function will allow a nation owner to purchase a landing ships vessel\\n    ///@notice this function will allow a nation owner to purchase a landing ships vessel\\n    ///@param amount this is the number of landing ships being purchased\\n    ///@param id this is the naton id of the nation purchasing vessels\\n    function buyLandingShip(uint256 amount, uint256 id) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        (uint256 availablePurchases, ) = addNav.getAvailablePurchases(id);\\n        require(\\n            amount <= availablePurchases,\\n            \\\"purchase exceeds daily purchase limit\\\"\\n        );\\n        uint256 shipyardAmount = ImprovementsContract3(\\n            improvementsContract3Address\\n        ).getShipyardCount(id);\\n        uint256 currentShips = getLandingShipCount(id);\\n        uint256 nationInfrastructure = inf.getInfrastructureCount(id);\\n        uint256 additionalPurchases = (nationInfrastructure /\\n            landingShipRequiredInfrastructure);\\n        require(\\n            (currentShips + amount) <= (shipyardAmount + additionalPurchases),\\n            \\\"need more shipyards or infrastructure\\\"\\n        );\\n        require(\\n            inf.getTechnologyCount(id) >= landingShipRequiredTechnology,\\n            \\\"need more technology\\\"\\n        );\\n        uint256 purchasePrice = landingShipCost * amount;\\n        bool steel = bonus.viewSteel(id);\\n        if (steel) {\\n            purchasePrice = ((purchasePrice * 85) / 100);\\n        }\\n        uint256 balance = TreasuryContract(treasuryAddress).checkBalance(id);\\n        require(balance >= purchasePrice);\\n        idToNavy[id].landingShipCount += amount;\\n        navAct.increasePurchases(id, amount);\\n        TreasuryContract(treasuryAddress).spendBalance(id, purchasePrice);\\n        emit LandingShipPurchased(id, amount, purchasePrice);\\n    }\\n\\n    function decommissionLandingShip(uint256 amount, uint256 id) public {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        require(\\n            amount <= idToNavy[id].landingShipCount,\\n            \\\"not enough landing ships\\\"\\n        );\\n        idToNavy[id].landingShipCount -= amount;\\n        emit LandingShipDecommissioned(id, amount);\\n    }\\n\\n    ///@dev this is a public view function that will return the number of landing ships a nation owns\\n    ///@dev this function wll return the number of landing ships a nation owns\\n    ///@notice this functon will return the number of landing ships a nation owns\\n    ///@param id this is the nation id of the nation being queried\\n    ///@return uint256 this is the number of landing ships for a given nation\\n    function getLandingShipCount(uint256 id) public view returns (uint256) {\\n        uint256 landingShipAmount = idToNavy[id].landingShipCount;\\n        return landingShipAmount;\\n    }\\n\\n    ///@dev this is a public function callable only by the nation owner\\n    ///@dev this function will allow a nation owner to purchase a battleship vessel\\n    ///@notice this function will allow a nation owner to purchase a battleship vessel\\n    ///@param amount this is the number of battleship being purchased\\n    ///@param id this is the naton id of the nation purchasing vessels\\n    function buyBattleship(uint256 amount, uint256 id) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        (uint256 availablePurchases, ) = addNav.getAvailablePurchases(id);\\n        require(\\n            amount <= availablePurchases,\\n            \\\"purchase exceeds daily purchase limit\\\"\\n        );\\n        uint256 drydockAmount = ImprovementsContract1(\\n            improvementsContract1Address\\n        ).getDrydockCount(id);\\n        uint256 currentShips = getBattleshipCount(id);\\n        uint256 nationInfrastructure = inf.getInfrastructureCount(id);\\n        uint256 additionalPurchases = (nationInfrastructure /\\n            battleshipRequiredInfrastructure);\\n        require(\\n            (currentShips + amount) <= (drydockAmount + additionalPurchases),\\n            \\\"need more drydocks or infrastructure\\\"\\n        );\\n        require(\\n            inf.getTechnologyCount(id) >= battleshipRequiredTechnology,\\n            \\\"need more technology\\\"\\n        );\\n        uint256 purchasePrice = battleshipCost * amount;\\n        bool steel = bonus.viewSteel(id);\\n        if (steel) {\\n            purchasePrice = ((purchasePrice * 85) / 100);\\n        }\\n        uint256 balance = TreasuryContract(treasuryAddress).checkBalance(id);\\n        require(balance >= purchasePrice);\\n        idToNavy[id].battleshipCount += amount;\\n        navAct.increasePurchases(id, amount);\\n        TreasuryContract(treasuryAddress).spendBalance(id, purchasePrice);\\n        emit BattleshipPurchased(id, amount, purchasePrice);\\n    }\\n\\n    function decommissionBattleship(uint256 amount, uint256 id) public {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        require(\\n            amount <= idToNavy[id].battleshipCount,\\n            \\\"not enough battleships\\\"\\n        );\\n        idToNavy[id].battleshipCount -= amount;\\n        emit BattleshipDecommissioned(id, amount);\\n    }\\n\\n    ///@dev this is a public view function that will return the number of battleships a nation owns\\n    ///@dev this function wll return the number of battleships a nation owns\\n    ///@notice this functon will return the number of battleships a nation owns\\n    ///@param id this is the nation id of the nation being queried\\n    ///@return uint256 this is the number of battleships for a given nation\\n    function getBattleshipCount(uint256 id) public view returns (uint256) {\\n        uint256 battleshipAmount = idToNavy[id].battleshipCount;\\n        return battleshipAmount;\\n    }\\n\\n    ///@dev this is a public function callable only by the nation owner\\n    ///@dev this function will allow a nation owner to purchase a cruiser vessel\\n    ///@notice this function will allow a nation owner to purchase a cruiser vessel\\n    ///@param amount this is the number of cruisers being purchased\\n    ///@param id this is the naton id of the nation purchasing vessels\\n    function buyCruiser(uint256 amount, uint256 id) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        (uint256 availablePurchases, ) = addNav.getAvailablePurchases(id);\\n        require(\\n            amount <= availablePurchases,\\n            \\\"purchase exceeds daily purchase limit\\\"\\n        );\\n        uint256 drydockAmount = ImprovementsContract1(\\n            improvementsContract1Address\\n        ).getDrydockCount(id);\\n        uint256 currentShips = getCruiserCount(id);\\n        uint256 nationInfrastructure = inf.getInfrastructureCount(id);\\n        uint256 additionalPurchases = (nationInfrastructure /\\n            cruiserRequiredInfrastructure);\\n        require(\\n            (currentShips + amount) <= (drydockAmount + additionalPurchases),\\n            \\\"need more drydocks or infrastructure\\\"\\n        );\\n        require(\\n            inf.getTechnologyCount(id) >= cruiserRequiredTechnology,\\n            \\\"need more technology\\\"\\n        );\\n        uint256 purchasePrice = cruiserCost * amount;\\n        bool steel = bonus.viewSteel(id);\\n        if (steel) {\\n            purchasePrice = ((purchasePrice * 85) / 100);\\n        }\\n        uint256 balance = TreasuryContract(treasuryAddress).checkBalance(id);\\n        require(balance >= purchasePrice);\\n        idToNavy[id].cruiserCount += amount;\\n        navAct.increasePurchases(id, amount);\\n        TreasuryContract(treasuryAddress).spendBalance(id, purchasePrice);\\n        emit CruiserPurchased(id, amount, purchasePrice);\\n    }\\n\\n    function decommissionCruiser(uint256 amount, uint256 id) public {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        require(amount <= idToNavy[id].cruiserCount, \\\"not enough cruisers\\\");\\n        idToNavy[id].cruiserCount -= amount;\\n        emit CruiserDecommissioned(id, amount);\\n    }\\n\\n    ///@dev this is a public view function that will return the number of cruisers a nation owns\\n    ///@dev this function wll return the number of cruisers a nation owns\\n    ///@notice this functon will return the number of cruisers a nation owns\\n    ///@param id this is the nation id of the nation being queried\\n    ///@return uint256 this is the number of cruisers for a given nation\\n    function getCruiserCount(uint256 id) public view returns (uint256) {\\n        uint256 cruiserAmount = idToNavy[id].cruiserCount;\\n        return cruiserAmount;\\n    }\\n\\n    modifier onlyNukeContract() {\\n        require(msg.sender == nukes, \\\"only callable from nuke contract\\\");\\n        _;\\n    }\\n\\n    ///@dev this is a public function only callable from the nuke contract\\n    ///@dev this function will decrease the amount of ships that are vulnerable to nuclear attacks when a nation is attacked by a nuke strike\\n    ///@notice this function will decrease the amount of ships that are vulnerable to nuclear attacks when a nation is attacked by a nuke strike\\n    ///@notice vessels available to nuke strikes are corvettes, landing ships, cruisers and frigates\\n    ///@notice a nuke strike will reduce the number of these ships by 25% (12% with a fallout shelter system)\\n    ///@param defenderId this is the nation id of the nation being attacked\\n    function decreaseNavyFromNukeContract(\\n        uint256 defenderId\\n    ) public onlyNukeContract {\\n        uint256 percentage = 40;\\n        if (won1.getFalloutShelterSystem(defenderId)) {\\n            percentage = 20;\\n        }\\n\\n        Navy storage navy = idToNavy[defenderId];\\n\\n        uint256 corvetteCountToReduce = (navy.corvetteCount * percentage) / 100;\\n        uint256 landingShipCountToReduce = (navy.landingShipCount *\\n            percentage) / 100;\\n        uint256 cruiserCountToReduce = (navy.cruiserCount * percentage) / 100;\\n        uint256 currentFrigates = navy2.getFrigateCount(defenderId);\\n        uint256 frigateCountToReduce = (currentFrigates * percentage) / 100;\\n\\n        require(\\n            corvetteCountToReduce <= navy.corvetteCount,\\n            \\\"not enough corvettes\\\"\\n        );\\n        require(\\n            landingShipCountToReduce <= navy.landingShipCount,\\n            \\\"not enough landing ships\\\"\\n        );\\n        require(\\n            cruiserCountToReduce <= navy.cruiserCount,\\n            \\\"not enough cruisers\\\"\\n        );\\n        require(\\n            frigateCountToReduce <= navy2.getFrigateCount(defenderId),\\n            \\\"not enough frigates\\\"\\n        );\\n\\n        navy.corvetteCount -= corvetteCountToReduce;\\n        navy.landingShipCount -= landingShipCountToReduce;\\n        navy.cruiserCount -= cruiserCountToReduce;\\n        navy2.decreaseFrigateCount(defenderId, frigateCountToReduce);\\n\\n        emit NukeDamageToNavy(\\n            defenderId,\\n            corvetteCountToReduce,\\n            landingShipCountToReduce,\\n            cruiserCountToReduce,\\n            frigateCountToReduce\\n        );\\n    }\\n}\\n\\n///@title NavyContract\\n///@author OxSnosh\\n///@dev this contract inherits from openzeppelin's ownable contract\\n///@notice this contract will allow a user to purchase navy vessels\\ncontract NavyContract2 is Ownable, ReentrancyGuard {\\n    address public treasuryAddress;\\n    address public improvementsContract1Address;\\n    address public improvementsContract3Address;\\n    address public improvements4;\\n    address public resources;\\n    address public navyBattleAddress;\\n    address public military;\\n    address public nukes;\\n    address public wonders1;\\n    address public countryMinter;\\n    address public navalActions;\\n    address public additionalNavy;\\n    address public bonusResources;\\n    address public navy1Address;\\n    address public infrastructure;\\n    uint256 public frigateCost = 750000 * (10 ** 18);\\n    uint256 public frigateRequiredInfrastructure = 3500;\\n    uint256 public frigateRequiredTechnology = 400;\\n    uint256 public destroyerCost = 1000000 * (10 ** 18);\\n    uint256 public destroyerRequiredInfrastructure = 4000;\\n    uint256 public destroyerRequiredTechnology = 600;\\n    uint256 public submarineCost = 1500000 * (10 ** 18);\\n    uint256 public submarineRequiredInfrastructure = 4500;\\n    uint256 public submarineRequiredTechnology = 750;\\n    uint256 public aircraftCarrierCost = 2000000 * (10 ** 18);\\n    uint256 public aircraftCarrierRequiredInfrastructure = 5000;\\n    uint256 public aircraftCarrierRequiredTechnology = 1000;\\n\\n    struct Navy {\\n        bool initialized;\\n        uint256 frigateCount;\\n        uint256 destroyerCount;\\n        uint256 submarineCount;\\n        uint256 aircraftCarrierCount;\\n    }\\n\\n    mapping(uint256 => Navy) public idToNavy;\\n\\n    event FrigatePurchased(\\n        uint256 indexed id,\\n        uint256 indexed amount,\\n        uint256 indexed purchasePrice\\n    );\\n\\n    event DestroyerPurchased(\\n        uint256 indexed id,\\n        uint256 indexed amount,\\n        uint256 indexed purchasePrice\\n    );\\n\\n    event SubmarinePurchased(\\n        uint256 indexed id,\\n        uint256 indexed amount,\\n        uint256 indexed purchasePrice\\n    );\\n\\n    event AircraftCarrierPurchased(\\n        uint256 indexed id,\\n        uint256 indexed amount,\\n        uint256 indexed purchasePrice\\n    );\\n\\n    event FrigateDecommissioned(uint256 indexed id, uint256 indexed amount);\\n\\n    event DestroyerDecommissioned(uint256 indexed id, uint256 indexed amount);\\n\\n    event SubmarineDecommissioned(uint256 indexed id, uint256 indexed amount);\\n\\n    event AircraftCarrierDecommissioned(\\n        uint256 indexed id,\\n        uint256 indexed amount\\n    );\\n\\n    ResourcesContract res;\\n    MilitaryContract mil;\\n    ImprovementsContract4 imp4;\\n    NukeContract nuke;\\n    WondersContract1 won1;\\n    NavalActionsContract navAct;\\n    CountryMinter mint;\\n    AdditionalNavyContract addNav;\\n    BonusResourcesContract bonus;\\n    NavyContract navy1;\\n    InfrastructureContract inf;\\n\\n    modifier onlyCountryMinter() {\\n        require(\\n            msg.sender == countryMinter,\\n            \\\"function only callable from countryMinter\\\"\\n        );\\n        _;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings(\\n        address _treasuryAddress,\\n        address _improvementsContract1Address,\\n        address _improvementsContract3Address,\\n        address _improvements4,\\n        address _resources,\\n        address _military,\\n        address _nukes,\\n        address _wonders1,\\n        address _navalActions,\\n        address _additionalNavy\\n    ) public onlyOwner {\\n        treasuryAddress = _treasuryAddress;\\n        improvementsContract1Address = _improvementsContract1Address;\\n        improvementsContract3Address = _improvementsContract3Address;\\n        improvements4 = _improvements4;\\n        imp4 = ImprovementsContract4(_improvements4);\\n        resources = _resources;\\n        res = ResourcesContract(_resources);\\n        military = _military;\\n        mil = MilitaryContract(_military);\\n        nukes = _nukes;\\n        nuke = NukeContract(_nukes);\\n        wonders1 = _wonders1;\\n        won1 = WondersContract1(_wonders1);\\n        navalActions = _navalActions;\\n        navAct = NavalActionsContract(_navalActions);\\n        additionalNavy = _additionalNavy;\\n        addNav = AdditionalNavyContract(_additionalNavy);\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings2(\\n        address _countryMinter,\\n        address _bonusResources,\\n        address _navy1,\\n        address _infrastructure\\n    ) public onlyOwner {\\n        countryMinter = _countryMinter;\\n        mint = CountryMinter(_countryMinter);\\n        bonusResources = _bonusResources;\\n        bonus = BonusResourcesContract(_bonusResources);\\n        navy1Address = _navy1;\\n        navy1 = NavyContract(_navy1);\\n        infrastructure = _infrastructure;\\n        inf = InfrastructureContract(_infrastructure);\\n    }\\n\\n    ///@dev this is a public function only callable from the countryMinter contract\\n    ///@dev this function will allow a nation owner to buy navy vessels\\n    ///@notice this function will allow a nation owner to buy navy vessels\\n    ///@param id this is the nation id of the nation being minted\\n    function generateNavy2(uint256 id) public onlyCountryMinter {\\n        require(\\n            !idToNavy[id].initialized,\\n            \\\"navy already initialized for this nation\\\"\\n        );\\n        Navy memory newNavy = Navy(true, 0, 0, 0, 0);\\n        idToNavy[id] = newNavy;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateFrigateSpecs(\\n        uint256 newPrice,\\n        uint256 newRequiredInf,\\n        uint256 newRequiredTech\\n    ) public onlyOwner {\\n        frigateCost = newPrice;\\n        frigateRequiredInfrastructure = newRequiredInf;\\n        frigateRequiredTechnology = newRequiredTech;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateDestroyerSpecs(\\n        uint256 newPrice,\\n        uint256 newRequiredInf,\\n        uint256 newRequiredTech\\n    ) public onlyOwner {\\n        destroyerCost = newPrice;\\n        destroyerRequiredInfrastructure = newRequiredInf;\\n        destroyerRequiredTechnology = newRequiredTech;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateSubmarineSpecs(\\n        uint256 newPrice,\\n        uint256 newRequiredInf,\\n        uint256 newRequiredTech\\n    ) public onlyOwner {\\n        submarineCost = newPrice;\\n        submarineRequiredInfrastructure = newRequiredInf;\\n        submarineRequiredTechnology = newRequiredTech;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateAircraftCarrierSpecs(\\n        uint256 newPrice,\\n        uint256 newRequiredInf,\\n        uint256 newRequiredTech\\n    ) public onlyOwner {\\n        aircraftCarrierCost = newPrice;\\n        aircraftCarrierRequiredInfrastructure = newRequiredInf;\\n        aircraftCarrierRequiredTechnology = newRequiredTech;\\n    }\\n\\n    ///@dev this is a public function callable only by the nation owner\\n    ///@dev this function will allow a nation owner to purchase a frigates vessel\\n    ///@notice this function will allow a nation owner to purchase a frigates vessel\\n    ///@param amount this is the number of frigates being purchased\\n    ///@param id this is the naton id of the nation purchasing vessels\\n    function buyFrigate(uint256 amount, uint256 id) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        (uint256 availablePurchases, ) = addNav.getAvailablePurchases(id);\\n        require(\\n            amount <= availablePurchases,\\n            \\\"purchase exceeds daily purchase limit\\\"\\n        );\\n        uint256 shipyardAmount = ImprovementsContract3(\\n            improvementsContract3Address\\n        ).getShipyardCount(id);\\n        uint256 currentShips = getFrigateCount(id);\\n        uint256 nationInfrastructure = inf.getInfrastructureCount(id);\\n        uint256 additionalPurchases = (nationInfrastructure /\\n            frigateRequiredInfrastructure);\\n        require(\\n            (currentShips + amount) <= (shipyardAmount + additionalPurchases),\\n            \\\"need more shipyards or infrastructure\\\"\\n        );\\n        require(\\n            inf.getTechnologyCount(id) >= frigateRequiredTechnology,\\n            \\\"need more technology\\\"\\n        );\\n        uint256 purchasePrice = frigateCost * amount;\\n        bool steel = bonus.viewSteel(id);\\n        if (steel) {\\n            purchasePrice = ((purchasePrice * 85) / 100);\\n        }\\n        bool microchips = bonus.viewMicrochips(id);\\n        if (microchips) {\\n            purchasePrice = ((purchasePrice * 90) / 100);\\n        }\\n        uint256 balance = TreasuryContract(treasuryAddress).checkBalance(id);\\n        require(balance >= purchasePrice);\\n        idToNavy[id].frigateCount += amount;\\n        navAct.increasePurchases(id, amount);\\n        TreasuryContract(treasuryAddress).spendBalance(id, purchasePrice);\\n        emit FrigatePurchased(id, amount, purchasePrice);\\n    }\\n\\n    function decommissionFrigate(uint256 amount, uint256 id) public {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        require(amount <= idToNavy[id].frigateCount, \\\"not enough frigates\\\");\\n        idToNavy[id].frigateCount -= amount;\\n        emit FrigateDecommissioned(id, amount);\\n    }\\n\\n    ///@dev this is a public view function that will return the number of frigates a nation owns\\n    ///@dev this function wll return the number of frigates a nation owns\\n    ///@notice this functon will return the number of frigates a nation owns\\n    ///@param id this is the nation id of the nation being queried\\n    ///@return uint256 this is the number of frigates for a given nation\\n    function getFrigateCount(uint256 id) public view returns (uint256) {\\n        uint256 frigateAmount = idToNavy[id].frigateCount;\\n        return frigateAmount;\\n    }\\n\\n    modifier onlyAdditionalNavyContract() {\\n        require(\\n            msg.sender == additionalNavy,\\n            \\\"function only callable from additional navy contract\\\"\\n        );\\n        _;\\n    }\\n\\n    function decreaseFrigateCount(\\n        uint256 id,\\n        uint256 amount\\n    ) public onlyAdditionalNavyContract {\\n        require(amount <= idToNavy[id].frigateCount, \\\"not enough frigates\\\");\\n        idToNavy[id].frigateCount -= amount;\\n    }\\n\\n    ///@dev this is a public function callable only by the nation owner\\n    ///@dev this function will allow a nation owner to purchase a destroyer vessel\\n    ///@notice this function will allow a nation owner to purchase a destroyer vessel\\n    ///@param amount this is the number of destroyers being purchased\\n    ///@param id this is the naton id of the nation purchasing vessels\\n    function buyDestroyer(uint256 amount, uint256 id) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        (uint256 availablePurchases, ) = addNav.getAvailablePurchases(id);\\n        require(\\n            amount <= availablePurchases,\\n            \\\"purchase exceeds daily purchase limit\\\"\\n        );\\n        uint256 drydockAmount = ImprovementsContract1(\\n            improvementsContract1Address\\n        ).getDrydockCount(id);\\n        uint256 currentShips = getDestroyerCount(id);\\n        uint256 nationInfrastructure = inf.getInfrastructureCount(id);\\n        uint256 additionalPurchases = (nationInfrastructure /\\n            destroyerRequiredInfrastructure);\\n        require(\\n            (currentShips + amount) <= (drydockAmount + additionalPurchases),\\n            \\\"need more drydocks or infrastructure\\\"\\n        );\\n        require(\\n            inf.getTechnologyCount(id) >= destroyerRequiredTechnology,\\n            \\\"need more technology\\\"\\n        );\\n        uint256 purchasePrice = destroyerCost * amount;\\n        bool steel = bonus.viewSteel(id);\\n        if (steel) {\\n            purchasePrice = ((purchasePrice * 85) / 100);\\n        }\\n        bool microchips = bonus.viewMicrochips(id);\\n        if (microchips) {\\n            purchasePrice = ((purchasePrice * 90) / 100);\\n        }\\n        uint256 balance = TreasuryContract(treasuryAddress).checkBalance(id);\\n        require(balance >= purchasePrice);\\n        idToNavy[id].destroyerCount += amount;\\n        navAct.increasePurchases(id, amount);\\n        TreasuryContract(treasuryAddress).spendBalance(id, purchasePrice);\\n        emit DestroyerPurchased(id, amount, purchasePrice);\\n    }\\n\\n    function decommissionDestroyer(uint256 amount, uint256 id) public {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        require(amount <= idToNavy[id].destroyerCount, \\\"not enough destroyers\\\");\\n        idToNavy[id].destroyerCount -= amount;\\n        emit DestroyerDecommissioned(id, amount);\\n    }\\n\\n    ///@dev this is a public view function that will return the number of destroyers a nation owns\\n    ///@dev this function wll return the number of destroyers a nation owns\\n    ///@notice this functon will return the number of destroyers a nation owns\\n    ///@param id this is the nation id of the nation being queried\\n    ///@return uint256 this is the number of destroyers for a given nation\\n    function getDestroyerCount(uint256 id) public view returns (uint256) {\\n        uint256 destroyerAmount = idToNavy[id].destroyerCount;\\n        return destroyerAmount;\\n    }\\n\\n    function decreaseDestroyerCount(\\n        uint256 id,\\n        uint256 amount\\n    ) public onlyAdditionalNavyContract {\\n        require(amount <= idToNavy[id].destroyerCount, \\\"not enough destroyers\\\");\\n        idToNavy[id].destroyerCount -= amount;\\n    }\\n\\n    ///@dev this is a public function callable only by the nation owner\\n    ///@dev this function will allow a nation owner to purchase a submarine vessel\\n    ///@notice this function will allow a nation owner to purchase a submarine vessel\\n    ///@param amount this is the number of submarines being purchased\\n    ///@param id this is the naton id of the nation purchasing vessels\\n    function buySubmarine(uint256 amount, uint256 id) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        (uint256 availablePurchases, ) = addNav.getAvailablePurchases(id);\\n        require(\\n            amount <= availablePurchases,\\n            \\\"purchase exceeds daily purchase limit\\\"\\n        );\\n        uint256 shipyardAmount = ImprovementsContract3(\\n            improvementsContract3Address\\n        ).getShipyardCount(id);\\n        uint256 currentShips = getSubmarineCount(id);\\n        uint256 nationInfrastructure = inf.getInfrastructureCount(id);\\n        uint256 additionalPurchases = (nationInfrastructure /\\n            submarineRequiredInfrastructure);\\n        require(\\n            (currentShips + amount) <= (shipyardAmount + additionalPurchases),\\n            \\\"need more shipyards or infrastructure\\\"\\n        );\\n        require(\\n            inf.getTechnologyCount(id) >= submarineRequiredTechnology,\\n            \\\"need more technology\\\"\\n        );\\n        uint256 purchasePrice = submarineCost * amount;\\n        bool steel = bonus.viewSteel(id);\\n        if (steel) {\\n            purchasePrice = ((purchasePrice * 85) / 100);\\n        }\\n        bool microchips = bonus.viewMicrochips(id);\\n        if (microchips) {\\n            purchasePrice = ((purchasePrice * 90) / 100);\\n        }\\n        uint256 balance = TreasuryContract(treasuryAddress).checkBalance(id);\\n        require(balance >= purchasePrice);\\n        idToNavy[id].submarineCount += amount;\\n        navAct.increasePurchases(id, amount);\\n        TreasuryContract(treasuryAddress).spendBalance(id, purchasePrice);\\n        emit SubmarinePurchased(id, amount, purchasePrice);\\n    }\\n\\n    function decommissionSubmarine(uint256 amount, uint256 id) public {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        require(amount <= idToNavy[id].submarineCount, \\\"not enough submarines\\\");\\n        idToNavy[id].submarineCount -= amount;\\n        emit SubmarineDecommissioned(id, amount);\\n    }\\n\\n    ///@dev this is a public view function that will return the number of submarines a nation owns\\n    ///@dev this function wll return the number of submarines ttes a nation owns\\n    ///@notice this functon will return the number of submarines a nation owns\\n    ///@param id this is the nation id of the nation being queried\\n    ///@return uint256 this is the number of submarines for a given nation\\n    function getSubmarineCount(uint256 id) public view returns (uint256) {\\n        uint256 submarineAmount = idToNavy[id].submarineCount;\\n        return submarineAmount;\\n    }\\n\\n    function decreaseSubmarineCount(\\n        uint256 id,\\n        uint256 amount\\n    ) public onlyAdditionalNavyContract {\\n        require(amount <= idToNavy[id].submarineCount, \\\"not enough submarines\\\");\\n        idToNavy[id].submarineCount -= amount;\\n    }\\n\\n    ///@dev this is a public function callable only by the nation owner\\n    ///@dev this function will allow a nation owner to purchase a aircraft carrier vessel\\n    ///@notice this function will allow a nation owner to purchase a aircraft carrier vessel\\n    ///@param amount this is the number of aircraft carriers being purchased\\n    ///@param id this is the naton id of the nation purchasing vessels\\n    function buyAircraftCarrier(uint256 amount, uint256 id) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        (uint256 availablePurchases, ) = addNav.getAvailablePurchases(id);\\n        require(\\n            amount <= availablePurchases,\\n            \\\"purchase exceeds daily purchase limit\\\"\\n        );\\n        uint256 shipyardAmount = ImprovementsContract3(\\n            improvementsContract3Address\\n        ).getShipyardCount(id);\\n        uint256 currentShips = getAircraftCarrierCount(id);\\n        uint256 nationInfrastructure = inf.getInfrastructureCount(id);\\n        uint256 additionalPurchases = (nationInfrastructure /\\n            aircraftCarrierRequiredInfrastructure);\\n        require(\\n            (currentShips + amount) <= (shipyardAmount + additionalPurchases),\\n            \\\"need more shipyards or infrastructure\\\"\\n        );\\n        require(\\n            inf.getTechnologyCount(id) >= aircraftCarrierRequiredTechnology,\\n            \\\"need more technology\\\"\\n        );\\n        uint256 purchasePrice = aircraftCarrierCost * amount;\\n        bool steel = bonus.viewSteel(id);\\n        if (steel) {\\n            purchasePrice = ((purchasePrice * 85) / 100);\\n        }\\n        bool microchips = bonus.viewMicrochips(id);\\n        if (microchips) {\\n            purchasePrice = ((purchasePrice * 90) / 100);\\n        }\\n        uint256 balance = TreasuryContract(treasuryAddress).checkBalance(id);\\n        require(balance >= purchasePrice);\\n        idToNavy[id].aircraftCarrierCount += amount;\\n        navAct.increasePurchases(id, amount);\\n        TreasuryContract(treasuryAddress).spendBalance(id, purchasePrice);\\n        emit AircraftCarrierPurchased(id, amount, purchasePrice);\\n    }\\n\\n    function decommissionAircraftCarrier(uint256 amount, uint256 id) public {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        require(\\n            amount <= idToNavy[id].aircraftCarrierCount,\\n            \\\"not enough aircraft carriers\\\"\\n        );\\n        idToNavy[id].aircraftCarrierCount -= amount;\\n        emit AircraftCarrierDecommissioned(id, amount);\\n    }\\n\\n    ///@dev this is a public view function that will return the number of aircraft carriers a nation owns\\n    ///@dev this function wll return the number of aircraft carriers a nation owns\\n    ///@notice this functon will return the number of aircraft carriers a nation owns\\n    ///@param id this is the nation id of the nation being queried\\n    ///@return uint256 this is the number of aircraft carriers for a given nation\\n    function getAircraftCarrierCount(uint256 id) public view returns (uint256) {\\n        uint256 aircraftCarrierAmount = idToNavy[id].aircraftCarrierCount;\\n        return aircraftCarrierAmount;\\n    }\\n\\n    function decreaseAircraftCarrierCount(\\n        uint256 id,\\n        uint256 amount\\n    ) public onlyAdditionalNavyContract {\\n        require(\\n            amount <= idToNavy[id].aircraftCarrierCount,\\n            \\\"not enough aircraft carriers\\\"\\n        );\\n        idToNavy[id].aircraftCarrierCount -= amount;\\n    }\\n}\\n\\n///@title AdditionalNavyContract\\n///@author OxSnosh\\n///@dev this contract inherits from the openzeppelin ownabl contract\\n///@notice this contract will keep track of additional information about a nations navy\\ncontract AdditionalNavyContract is Ownable {\\n    address public navy;\\n    address public navalActions;\\n    address public military;\\n    address public wonders1;\\n    address public improvements4;\\n    address public navy2;\\n    address public blockade;\\n    address public breakBlockade;\\n    address public navalAttack;\\n\\n    NavyContract nav;\\n    NavalActionsContract navAct;\\n    MilitaryContract mil;\\n    WondersContract1 won1;\\n    ImprovementsContract4 imp4;\\n    NavyContract2 nav2;\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings(\\n        address _navy,\\n        address _navalActions,\\n        address _military,\\n        address _wonders1,\\n        address _improvements4,\\n        address _navy2,\\n        address _blockade,\\n        address _breakBlockade,\\n        address _navalAttack\\n    ) public onlyOwner {\\n        navy = _navy;\\n        nav = NavyContract(_navy);\\n        navalActions = _navalActions;\\n        navAct = NavalActionsContract(_navalActions);\\n        military = _military;\\n        mil = MilitaryContract(_military);\\n        wonders1 = _wonders1;\\n        won1 = WondersContract1(_wonders1);\\n        improvements4 = _improvements4;\\n        imp4 = ImprovementsContract4(_improvements4);\\n        navy2 = _navy2;\\n        nav2 = NavyContract2(_navy2);\\n        blockade = _blockade;\\n        breakBlockade = _breakBlockade;\\n        navalAttack = _navalAttack;\\n    }\\n\\n    ///@dev this is a public view function\\n    ///@dev this function will return a nations available daily navy vessel purchases\\n    ///@notice this function will return a nations available daily navy vessel purchases\\n    ///@param id this is the nation id of the nation being queried\\n    ///@return uint256 is the number of available navy vessel purchases for the day for that nation\\n    function getAvailablePurchases(\\n        uint256 id\\n    ) public view returns (uint256, uint256) {\\n        uint256 purchasesToday = navAct.getPurchasesToday(id);\\n        uint256 maxDailyPurchases;\\n        (bool isWar, ) = mil.getWarPeacePreference(id);\\n        bool foreignNavalBase = won1.getForeignNavalBase(id);\\n        if (isWar) {\\n            maxDailyPurchases = foreignNavalBase ? 7 : 5;\\n        } else {\\n            maxDailyPurchases = foreignNavalBase ? 4 : 2;\\n        }\\n        uint256 navalConstructionYards = imp4.getNavalConstructionYardCount(id);\\n        if (navalConstructionYards > 0) {\\n            maxDailyPurchases += navalConstructionYards;\\n        }\\n        uint256 availablePurchases = (maxDailyPurchases - purchasesToday);\\n        return (availablePurchases, maxDailyPurchases);\\n    }\\n\\n    ///@dev this is a public view function that will return the number of blockade capable ships a nation has\\n    ///@notice this function will return the number of blockade capable ships a nation has\\n    ///@notice blockade capable ships include battleships, cruisers, frigates and submarines\\n    ///@param id this is the nation id of the nation being queried\\n    ///@return uint256 this is the number of blockade capable ships for a given nation\\n    function getBlockadeCapableShips(uint256 id) public view returns (uint256) {\\n        uint256 battleships = nav.getBattleshipCount(id);\\n        uint256 cruisers = nav.getCruiserCount(id);\\n        uint256 frigates = nav2.getFrigateCount(id);\\n        uint256 subs = nav2.getSubmarineCount(id);\\n        uint256 blockadeCapableShips = (battleships +\\n            cruisers +\\n            frigates +\\n            subs);\\n        return blockadeCapableShips;\\n    }\\n\\n    ///@dev this is a public view function that will return the number of ships a nation has that can break a blockade\\n    ///@notice this function will return the number of ships a nation has that can break a blockade\\n    ///@notice blockade capable ships include battleships, cruisers, frigates and destroyers\\n    ///@param id this is the nation id of the nation being queried\\n    ///@return uint256 this is the number of ships that can break a blockade for a given nation\\n    function getBreakBlockadeCapableShips(\\n        uint256 id\\n    ) public view returns (uint256) {\\n        uint256 battleships = nav.getBattleshipCount(id);\\n        uint256 cruisers = nav.getCruiserCount(id);\\n        uint256 frigates = nav2.getFrigateCount(id);\\n        uint256 destroyers = nav2.getDestroyerCount(id);\\n        uint256 breakBlockadeCapableShips = (battleships +\\n            cruisers +\\n            frigates +\\n            destroyers);\\n        return breakBlockadeCapableShips;\\n    }\\n\\n    ///@dev this is a public view function that returns the number of navy vessels that a nations drydocks support\\n    ///@notice this function will return the number of ships that a nations drydocks support\\n    ///@notice a nation cannot delete a drydock if it supports a vessel\\n    ///@notice drydocks support corvettes, battleships, cruisers and destroyers\\n    ///@param countryId is the nation id of the nation being queried\\n    ///@return count is the number of vessel supported by the drydocks\\n    function getVesselCountForDrydock(\\n        uint256 countryId\\n    ) public view returns (uint256 count) {\\n        uint256 corvetteAmount = nav.getCorvetteCount(countryId);\\n        uint256 battleshipAmount = nav.getBattleshipCount(countryId);\\n        uint256 cruiserAmount = nav.getCruiserCount(countryId);\\n        uint256 destroyerAmount = nav2.getDestroyerCount(countryId);\\n        uint256 shipCount = (corvetteAmount +\\n            battleshipAmount +\\n            cruiserAmount +\\n            destroyerAmount);\\n        return shipCount;\\n    }\\n\\n    ///@dev this is a public view function that returns the number of navy vessels that a nations shipyards support\\n    ///@notice this function will return the number of ships that a nations shipyards support\\n    ///@notice a nation cannot delete a shipyard if it supports a vessel\\n    ///@notice shipyards support landing ships, frigates, submarines and aircraft carriers\\n    ///@param countryId is the nation id of the nation being queried\\n    ///@return count is the number of vessel supported by the shipyards\\n    function getVesselCountForShipyard(\\n        uint256 countryId\\n    ) public view returns (uint256 count) {\\n        uint256 landingShipAmount = nav.getLandingShipCount(countryId);\\n        uint256 frigateAmount = nav2.getFrigateCount(countryId);\\n        uint256 submarineAmount = nav2.getSubmarineCount(countryId);\\n        uint256 aircraftCarrierAmount = nav2.getAircraftCarrierCount(countryId);\\n        uint256 shipCount = (landingShipAmount +\\n            frigateAmount +\\n            submarineAmount +\\n            aircraftCarrierAmount);\\n        return shipCount;\\n    }\\n\\n    modifier onlyBattle() {\\n        require(\\n            msg.sender == navalAttack ||\\n                msg.sender == blockade ||\\n                msg.sender == breakBlockade,\\n            \\\"function only callable from battle contract\\\"\\n        );\\n        _;\\n    }\\n\\n    function decrementLosses(\\n        uint256[] memory defenderLosses,\\n        uint256 defenderId,\\n        uint256[] memory attackerLosses,\\n        uint256 attackerId\\n    ) public onlyBattle {\\n        for (uint256 i; i < defenderLosses.length; i++) {\\n            if (defenderLosses[i] == 1) {\\n                require(\\n                    nav.getCorvetteCount(defenderId) > 0,\\n                    \\\"underflow: corvette\\\"\\n                );\\n                nav.decreaseShipCount(defenderId, 1);\\n            } else if (defenderLosses[i] == 2) {\\n                require(\\n                    nav.getLandingShipCount(defenderId) > 0,\\n                    \\\"underflow: landing ship\\\"\\n                );\\n                nav.decreaseShipCount(defenderId, 2);\\n            } else if (defenderLosses[i] == 3) {\\n                require(\\n                    nav.getBattleshipCount(defenderId) > 0,\\n                    \\\"underflow: battleship\\\"\\n                );\\n                nav.decreaseShipCount(defenderId, 3);\\n            } else if (defenderLosses[i] == 4) {\\n                require(\\n                    nav.getCruiserCount(defenderId) > 0,\\n                    \\\"underflow: cruiser\\\"\\n                );\\n                nav.decreaseShipCount(defenderId, 4);\\n            } else if (defenderLosses[i] == 5) {\\n                require(\\n                    nav2.getFrigateCount(defenderId) > 0,\\n                    \\\"underflow: frigate\\\"\\n                );\\n                nav2.decreaseFrigateCount(defenderId, 1);\\n            } else if (defenderLosses[i] == 6) {\\n                require(\\n                    nav2.getDestroyerCount(defenderId) > 0,\\n                    \\\"underflow: destroyer\\\"\\n                );\\n                nav2.decreaseDestroyerCount(defenderId, 1);\\n            } else if (defenderLosses[i] == 7) {\\n                require(\\n                    nav2.getSubmarineCount(defenderId) > 0,\\n                    \\\"underflow: submarine\\\"\\n                );\\n                nav2.decreaseSubmarineCount(defenderId, 1);\\n            } else if (defenderLosses[i] == 8) {\\n                require(\\n                    nav2.getAircraftCarrierCount(defenderId) > 0,\\n                    \\\"underflow: aircraft carrier\\\"\\n                );\\n                nav2.decreaseAircraftCarrierCount(defenderId, 1);\\n            }\\n        }\\n\\n        for (uint256 i; i < attackerLosses.length; i++) {\\n            if (attackerLosses[i] == 1) {\\n                require(\\n                    nav.getCorvetteCount(attackerId) > 0,\\n                    \\\"underflow: corvette\\\"\\n                );\\n                nav.decreaseShipCount(attackerId, 1);\\n            } else if (attackerLosses[i] == 2) {\\n                require(\\n                    nav.getLandingShipCount(attackerId) > 0,\\n                    \\\"underflow: landing ship\\\"\\n                );\\n                nav.decreaseShipCount(attackerId, 2);\\n            } else if (attackerLosses[i] == 3) {\\n                require(\\n                    nav.getBattleshipCount(attackerId) > 0,\\n                    \\\"underflow: battleship\\\"\\n                );\\n                nav.decreaseShipCount(attackerId, 3);\\n            } else if (attackerLosses[i] == 4) {\\n                require(\\n                    nav.getCruiserCount(attackerId) > 0,\\n                    \\\"underflow: cruiser\\\"\\n                );\\n                nav.decreaseShipCount(attackerId, 4);\\n            } else if (attackerLosses[i] == 5) {\\n                require(\\n                    nav2.getFrigateCount(attackerId) > 0,\\n                    \\\"underflow: frigate\\\"\\n                );\\n                nav2.decreaseFrigateCount(attackerId, 1);\\n            } else if (attackerLosses[i] == 6) {\\n                require(\\n                    nav2.getDestroyerCount(attackerId) > 0,\\n                    \\\"underflow: destroyer\\\"\\n                );\\n                nav2.decreaseDestroyerCount(attackerId, 1);\\n            } else if (attackerLosses[i] == 7) {\\n                require(\\n                    nav2.getSubmarineCount(attackerId) > 0,\\n                    \\\"underflow: submarine\\\"\\n                );\\n                nav2.decreaseSubmarineCount(attackerId, 1);\\n            } else if (attackerLosses[i] == 8) {\\n                require(\\n                    nav2.getAircraftCarrierCount(attackerId) > 0,\\n                    \\\"underflow: aircraft carrier\\\"\\n                );\\n                nav2.decreaseAircraftCarrierCount(attackerId, 1);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xecc06ba9da925c559d03f0156bc6d052c8e22b54751017c9e409f5112daa0f6e\",\"license\":\"BUSL-1.1\"},\"contracts/NavyBattle.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"./CountryMinter.sol\\\";\\nimport \\\"./Navy.sol\\\";\\nimport \\\"./War.sol\\\";\\nimport \\\"./Improvements.sol\\\";\\nimport \\\"./KeeperFile.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n///@title NavalBlocadeContract\\n///@author OxSnosh\\n///@dev this contract inherits from the openzeppelin ownable contract\\n///@dev this contract inherits from the chainlink VRF contract\\ncontract NavalBlockadeContract is Ownable, VRFConsumerBaseV2, ReentrancyGuard {\\n    uint256 public blockadeId;\\n    address public navy;\\n    address public additionalNavy;\\n    address public navalAction;\\n    address public warContract;\\n    address public countryMinter;\\n    address public keeper;\\n    address public breakBlockadeAddress;\\n    address public billsContract;\\n\\n    //Chainlik Variables\\n    uint256[] private s_randomWords;\\n    VRFCoordinatorV2Interface public i_vrfCoordinator;\\n    uint64 private immutable i_subscriptionId;\\n    bytes32 private immutable i_gasLane;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private constant NUM_WORDS = 1;\\n\\n    WarContract war;\\n    CountryMinter mint;\\n    NavyContract nav;\\n    NavalActionsContract navAct;\\n    AdditionalNavyContract addNav;\\n    KeeperContract keep;\\n\\n    struct Blockade {\\n        uint256 blockadeId;\\n        uint256 blockaderId;\\n        uint256 blockadedId;\\n        uint256 blockadePercentageReduction;\\n        uint256 blockadeDay;\\n        bool blockadeActive;\\n    }\\n\\n    event BlockadeCompleted(\\n        uint256[] attackerLosses,\\n        uint256[] defenderLosses,\\n        uint256 battleId\\n    );\\n\\n    mapping(uint256 => Blockade) public blockadeIdToBlockade;\\n    mapping(uint256 => uint256[]) public idToActiveBlockadesFor;\\n    mapping(uint256 => uint256[]) public idToActiveBlockadesAgainst;\\n    mapping(uint256 => uint256) s_requestIdToRequestIndex;\\n    mapping(uint256 => uint256[]) public s_requestIndexToRandomWords;\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint64 subscriptionId,\\n        bytes32 gasLane, // keyHash\\n        uint32 callbackGasLimit\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n    }\\n\\n    function updateVRFCoordinator(\\n        address vrfCoordinatorV2\\n    ) public onlyOwner {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n    }\\n\\n    function settings(\\n        address _navy,\\n        address _additionalNavy,\\n        address _navalAction,\\n        address _war,\\n        address _countryMinter,\\n        address _keeper,\\n        address _breakBlockadeAddress,\\n        address _billsContract\\n    ) public onlyOwner {\\n        navy = _navy;\\n        nav = NavyContract(_navy);\\n        additionalNavy = _additionalNavy;\\n        addNav = AdditionalNavyContract(_additionalNavy);\\n        navalAction = _navalAction;\\n        navAct = NavalActionsContract(_navalAction);\\n        warContract = _war;\\n        war = WarContract(_war);\\n        countryMinter = _countryMinter;\\n        mint = CountryMinter(_countryMinter);\\n        keeper = _keeper;\\n        keep = KeeperContract(_keeper);\\n        breakBlockadeAddress = _breakBlockadeAddress;\\n        billsContract = _billsContract;\\n    }\\n\\n    ///@dev this is a public function callable only from the nation owner\\n    ///@dev this function allows a nation to blockade another nation they are at war with\\n    ///@notice this function allows a nation to blockade another nation they are at war with\\n    ///@param attackerId is the id of the attacking nation\\n    ///@param defenderId is the nation id of the defending nation\\n    ///@param warId is the war id of the active war between the 2 nations\\n    function blockade(\\n        uint256 attackerId,\\n        uint256 defenderId,\\n        uint256 warId\\n    ) public nonReentrant {\\n        bool requirementsMet = checkRequirements(attackerId, defenderId, warId);\\n        require(requirementsMet, \\\"requrements not met\\\");\\n        uint256 slotsUsed = navAct.getActionSlotsUsed(attackerId);\\n        require((slotsUsed + 1) <= 3, \\\"max slots used\\\");\\n        uint256 activeBlockadesAgainstCount = idToActiveBlockadesAgainst[\\n            attackerId\\n        ].length;\\n        require(\\n            activeBlockadesAgainstCount == 0,\\n            \\\"you cannot blockade while being blockaded\\\"\\n        );\\n        uint256 attackerShips = addNav.getBlockadeCapableShips(attackerId);\\n        require(attackerShips >= 5, \\\"not enough blockade capable ships\\\");\\n        uint256 defenderShips = addNav.getBreakBlockadeCapableShips(defenderId);\\n        require(\\n            defenderShips == 0,\\n            \\\"defender has ships that can break blockade\\\"\\n        );\\n        bool attackerAlreadyBlockaded = checkIfAttackerAlreadyBlockaded(\\n            attackerId,\\n            defenderId\\n        );\\n        require(\\n            attackerAlreadyBlockaded == false,\\n            \\\"attacker already blockaded this nation\\\"\\n        );\\n        uint256 day = keep.getGameDay();\\n        Blockade memory newBlockade = Blockade(\\n            blockadeId,\\n            attackerId,\\n            defenderId,\\n            1,\\n            day,\\n            true\\n        );\\n        blockadeIdToBlockade[blockadeId] = newBlockade;\\n        navAct.increaseAction(attackerId);\\n        navAct.toggleBlockaded(defenderId);\\n        uint256[]\\n            storage newActiveBlockadesAgainst = idToActiveBlockadesAgainst[\\n                defenderId\\n            ];\\n        newActiveBlockadesAgainst.push(blockadeId);\\n        uint256[] storage newActiveBlockadesFor = idToActiveBlockadesFor[\\n            attackerId\\n        ];\\n        newActiveBlockadesFor.push(blockadeId);\\n        war.cancelPeaceOffersUponAttack(warId);\\n        fulfillRequest(blockadeId);\\n        blockadeId++;\\n    }\\n\\n    function checkRequirements(\\n        uint256 attackerId,\\n        uint256 defenderId,\\n        uint256 warId\\n    ) internal view returns (bool) {\\n        bool isOwner = mint.checkOwnership(attackerId, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        bool blockadedAlready = navAct.getBlockadedToday(defenderId);\\n        require(blockadedAlready == false, \\\"nation already blockaded today\\\");\\n        bool warActive = war.isWarActive(warId);\\n        require(warActive, \\\"war !active\\\");\\n        uint256[] memory activeBlockadesAgainst = idToActiveBlockadesAgainst[\\n            defenderId\\n        ];\\n        require(\\n            activeBlockadesAgainst.length < 12,\\n            \\\"nation already has max blockades\\\"\\n        );\\n        bool requirementsMet = false;\\n        if (isOwner && !blockadedAlready && warActive) {\\n            requirementsMet = true;\\n        }\\n        return requirementsMet;\\n    }\\n\\n    function checkIfAttackerAlreadyBlockaded(\\n        uint256 attackerId,\\n        uint256 defenderId\\n    ) internal view returns (bool) {\\n        uint256[] memory activeBlockadeArray = idToActiveBlockadesAgainst[\\n            defenderId\\n        ];\\n        for (uint256 i = 0; i < activeBlockadeArray.length; i++) {\\n            uint256 idOfActiveBlockade = activeBlockadeArray[i];\\n            uint256 idOfAttackerOfActiveBlockade = blockadeIdToBlockade[\\n                idOfActiveBlockade\\n            ].blockaderId;\\n            if (idOfAttackerOfActiveBlockade == attackerId) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    mapping(uint256 => bool) public pendingRequests;\\n    mapping(uint256 => uint256) public pendingRequestTimestamp;\\n    uint256 public constant RETRY_TIMEOUT = 5 minutes;\\n\\n    function retryFulfillRequest(uint256 battleId) public {\\n        require(pendingRequests[battleId], \\\"No pending request\\\");\\n        require(\\n            block.timestamp > pendingRequestTimestamp[battleId] + RETRY_TIMEOUT,\\n            \\\"Retry not allowed yet\\\"\\n        );\\n\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n\\n        s_requestIdToRequestIndex[requestId] = battleId;\\n        pendingRequests[battleId] = true;\\n        pendingRequestTimestamp[battleId] = block.timestamp;\\n        emit RandomnessRequested(requestId, battleId, block.timestamp);\\n    }\\n\\n    event RandomnessRequested(uint256 requestId, uint256 id, uint256 timestamp);\\n\\n    function fulfillRequest(uint256 battleId) internal {\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        s_requestIdToRequestIndex[requestId] = battleId;\\n        pendingRequests[battleId] = true;\\n        pendingRequestTimestamp[battleId] = block.timestamp;\\n        emit RandomnessRequested(requestId, battleId, block.timestamp);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 requestId,\\n        uint256[] memory randomWords\\n    ) internal override {\\n        require(\\n            pendingRequests[s_requestIdToRequestIndex[requestId]],\\n            \\\"No pending request for this ID\\\"\\n        );\\n\\n        uint256 battleId = s_requestIdToRequestIndex[requestId];\\n\\n        delete pendingRequests[battleId];\\n        delete pendingRequestTimestamp[battleId];\\n\\n        s_requestIndexToRandomWords[battleId] = randomWords;\\n        s_randomWords = randomWords;\\n        uint256 blockadePercentage = ((s_randomWords[0] % 5) + 1);\\n        blockadeIdToBlockade[battleId]\\n            .blockadePercentageReduction = blockadePercentage;\\n    }\\n\\n    function getActiveBlockadesAgainst(\\n        uint256 countryId\\n    ) public view returns (uint256[] memory) {\\n        uint256[] memory activeBlockadesToReturn = idToActiveBlockadesAgainst[\\n            countryId\\n        ];\\n        return (activeBlockadesToReturn);\\n    }\\n\\n    function getBlockadePercentageReduction(\\n        uint256 countryId\\n    ) public view returns (uint256) {\\n        uint256[] memory activeBlockadesAgainst = idToActiveBlockadesAgainst[\\n            countryId\\n        ];\\n        uint256 percentageReduction;\\n        for (uint256 i = 0; i < activeBlockadesAgainst.length; i++) {\\n            uint256 _blockadeId = activeBlockadesAgainst[i];\\n            uint256 blockadePercentage = blockadeIdToBlockade[_blockadeId]\\n                .blockadePercentageReduction;\\n            percentageReduction += blockadePercentage;\\n        }\\n        return percentageReduction;\\n    }\\n\\n    modifier onlyBreakBlockade() {\\n        require(\\n            msg.sender == breakBlockadeAddress,\\n            \\\"function only callable from the break blockade contract\\\"\\n        );\\n        _;\\n    }\\n\\n    event BlockadeBroken(uint256 blockadedCountry, uint256 blockadeId);\\n\\n    function checkIfBlockadeCapable(\\n        uint256 countryId\\n    ) external onlyBreakBlockade {\\n        uint256 blockadeCapableShips = addNav.getBlockadeCapableShips(\\n            countryId\\n        );\\n\\n        if (blockadeCapableShips == 0) {\\n            uint256[] storage blockadesFor = idToActiveBlockadesFor[countryId];\\n\\n            while (blockadesFor.length > 0) {\\n                uint256 lastIndex = blockadesFor.length - 1;\\n                uint256 _blockadeId = blockadesFor[lastIndex];\\n                Blockade storage _blockade = blockadeIdToBlockade[_blockadeId];\\n                _blockade.blockadeActive = false;\\n\\n                uint256 blockadedCountry = _blockade.blockadedId;\\n                uint256[] storage blockadesAgainst = idToActiveBlockadesAgainst[\\n                    blockadedCountry\\n                ];\\n\\n                for (uint256 j = 0; j < blockadesAgainst.length; j++) {\\n                    if (blockadesAgainst[j] == _blockadeId) {\\n                        blockadesAgainst[j] = blockadesAgainst[\\n                            blockadesAgainst.length - 1\\n                        ];\\n                        blockadesAgainst.pop();\\n                        emit BlockadeBroken(blockadedCountry, _blockadeId);\\n                        break;\\n                    }\\n                }\\n\\n                blockadesFor.pop();\\n            }\\n        }\\n    }\\n\\n    function breakBlockade(\\n        uint256 blockaderId,\\n        uint256 breakerId\\n    ) external onlyBreakBlockade {\\n        uint256[] storage blockadesAgainst = idToActiveBlockadesAgainst[\\n            breakerId\\n        ];\\n        for (uint256 i = 0; i < blockadesAgainst.length; i++) {\\n            uint256 _blockadeId = blockadesAgainst[i];\\n            if (blockadeIdToBlockade[_blockadeId].blockaderId == blockaderId) {\\n                blockadesAgainst[i] = blockadesAgainst[\\n                    blockadesAgainst.length - 1\\n                ];\\n                blockadesAgainst.pop();\\n                emit BlockadeBroken(breakerId, _blockadeId);\\n                break;\\n            }\\n        }\\n\\n        uint256[] storage blockadesFor = idToActiveBlockadesFor[blockaderId];\\n        for (uint256 j = 0; j < blockadesFor.length; j++) {\\n            uint256 _blockadeId = blockadesFor[j];\\n            if (blockadeIdToBlockade[_blockadeId].blockadedId == breakerId) {\\n                blockadesFor[j] = blockadesFor[blockadesFor.length - 1];\\n                blockadesFor.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    modifier onlyBills() {\\n        require(\\n            msg.sender == billsContract,\\n            \\\"Only callable from the Bills contract\\\"\\n        );\\n        _;\\n    }\\n\\n    function removeAllBlockadesAgainst(uint256 countryId) external onlyBills {\\n        uint256[] storage blockadesAgainst = idToActiveBlockadesAgainst[\\n            countryId\\n        ];\\n\\n        while (blockadesAgainst.length > 0) {\\n            uint256 lastIndex = blockadesAgainst.length - 1;\\n            uint256 _blockadeId = blockadesAgainst[lastIndex];\\n            Blockade storage _blockade = blockadeIdToBlockade[_blockadeId];\\n            _blockade.blockadeActive = false;\\n\\n            uint256 blockaderId = _blockade.blockaderId;\\n            uint256[] storage blockadesFor = idToActiveBlockadesFor[\\n                blockaderId\\n            ];\\n\\n            for (uint256 j = 0; j < blockadesFor.length; j++) {\\n                if (blockadesFor[j] == _blockadeId) {\\n                    blockadesFor[j] = blockadesFor[blockadesFor.length - 1];\\n                    blockadesFor.pop();\\n                    break;\\n                }\\n            }\\n\\n            emit BlockadeBroken(countryId, _blockadeId);\\n            blockadesAgainst.pop();\\n        }\\n    }\\n}\\n\\n///@title BreakBlocadeContract\\n///@author OxSnosh\\n///@dev this contract inherits from the openzeppelin ownable contract\\n///@dev this contract inherits from the chainlink VRF contract\\ncontract BreakBlocadeContract is Ownable, VRFConsumerBaseV2, ReentrancyGuard {\\n    uint256 public breakBlockadeId;\\n    address public countryMinter;\\n    address public navalBlockade;\\n    address public navy;\\n    address public warAddress;\\n    address public improvements4;\\n    address public navalActions;\\n    address public navy2;\\n    address public additionalNavy;\\n\\n    uint256 battleshipStrength = 5;\\n    uint256 cruiserStrength = 6;\\n    uint256 frigateStrength = 8;\\n    uint256 destroyerStrength = 11;\\n    uint256 submarineStrength = 12;\\n    uint256 battleshipTargetSize = 11;\\n    uint256 cruiserTargetSize = 10;\\n    uint256 frigateTargetSize = 8;\\n    uint256 destroyerTargetSize = 5;\\n    uint256 submarineTargetSize = 4;\\n\\n    //Chainlik Variables\\n    uint256[] private s_randomWords;\\n    VRFCoordinatorV2Interface public i_vrfCoordinator;\\n    uint64 private immutable i_subscriptionId;\\n    bytes32 private immutable i_gasLane;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private constant NUM_WORDS = 6;\\n\\n    CountryMinter mint;\\n    NavalBlockadeContract navBlock;\\n    NavyContract nav;\\n    WarContract war;\\n    ImprovementsContract4 imp4;\\n    NavalActionsContract navAct;\\n    NavyContract2 nav2;\\n    AdditionalNavyContract addNav;\\n\\n    struct BreakBlockade {\\n        uint256 battleshipCount;\\n        uint256 cruiserCount;\\n        uint256 frigateCount;\\n        uint256 destroyerCount;\\n        uint256 breakerStrength;\\n        uint256 warId;\\n        uint256 breakerId;\\n    }\\n\\n    struct DefendBlockade {\\n        uint256 battleshipCount;\\n        uint256 cruiserCount;\\n        uint256 frigateCount;\\n        uint256 submarineCount;\\n        uint256 defenderStrength;\\n        uint256 warId;\\n        uint256 defenderId;\\n    }\\n\\n    mapping(uint256 => BreakBlockade) breakBlockadeIdToBreakBlockade;\\n    mapping(uint256 => DefendBlockade) breakBlockadeIdToDefendBlockade;\\n    mapping(uint256 => uint256[]) battleIdToBreakBlockadeChanceArray;\\n    mapping(uint256 => uint256[]) battleIdToBreakBlockadeTypeArray;\\n    mapping(uint256 => uint256) battleIdToBreakBlockadeCumulativeSumOdds;\\n    mapping(uint256 => uint256[]) battleIdToBreakBlockadeLosses;\\n    mapping(uint256 => uint256[]) battleIdToDefendBlockadeChanceArray;\\n    mapping(uint256 => uint256[]) battleIdToDefendBlockadeTypeArray;\\n    mapping(uint256 => uint256) battleIdToDefendBlockadeCumulativeSumOdds;\\n    mapping(uint256 => uint256[]) battleIdToDefendBlockadeLosses;\\n    mapping(uint256 => uint256) s_requestIdToRequestIndex;\\n    mapping(uint256 => uint256[]) public s_requestIndexToRandomWords;\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint64 subscriptionId,\\n        bytes32 gasLane, // keyHash\\n        uint32 callbackGasLimit\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n    }\\n\\n    function updateVRFCoordinator(\\n        address vrfCoordinatorV2\\n    ) public onlyOwner {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n    }\\n\\n    function settings(\\n        address _countryMinter,\\n        address _navalBlockade,\\n        address _navy,\\n        address _warAddress,\\n        address _improvements4,\\n        address _navalActions,\\n        address _navy2,\\n        address _additionalNavy\\n    ) public onlyOwner {\\n        countryMinter = _countryMinter;\\n        mint = CountryMinter(_countryMinter);\\n        navalBlockade = _navalBlockade;\\n        navBlock = NavalBlockadeContract(_navalBlockade);\\n        navy = _navy;\\n        nav = NavyContract(_navy);\\n        warAddress = _warAddress;\\n        war = WarContract(_warAddress);\\n        improvements4 = _improvements4;\\n        imp4 = ImprovementsContract4(_improvements4);\\n        navalActions = _navalActions;\\n        navAct = NavalActionsContract(_navalActions);\\n        navy2 = _navy2;\\n        nav2 = NavyContract2(_navy2);\\n        additionalNavy = _additionalNavy;\\n        addNav = AdditionalNavyContract(_additionalNavy);\\n    }\\n\\n    ///@dev this is a public function callable only from the nation owner\\n    ///@dev this function allows a nation to break a blockade another nation imposed on them\\n    ///@notice this function allows a nation to break a blockade another nation imposed on them\\n    ///@param warId is the war id of the active war between the 2 nations\\n    ///@param attackerId is the id of the attacking nation\\n    ///@param blockaderId is the nation id of the defending nation\\n    function breakBlockade(\\n        uint256 warId,\\n        uint256 attackerId,\\n        uint256 blockaderId\\n    ) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(attackerId, msg.sender);\\n        require(isOwner, \\\"caller not nation owner\\\");\\n        bool warActive = war.isWarActive(warId);\\n        require(warActive, \\\"war !active\\\");\\n        uint256 slotsUsed = navAct.getActionSlotsUsed(attackerId);\\n        require((slotsUsed + 1) <= 3, \\\"max slots used\\\");\\n        uint256[] memory attackerBlockades = navBlock.getActiveBlockadesAgainst(\\n            attackerId\\n        );\\n        bool isBlockader = false;\\n        for (uint256 i; i < attackerBlockades.length; i++) {\\n            if (attackerBlockades[i] == blockaderId) {\\n                isBlockader = true;\\n                break;\\n            }\\n        }\\n        require(isBlockader, \\\"!blockaded by this nation\\\");\\n        navAct.increaseAction(attackerId);\\n        generateBreakBlockadeStruct(warId, attackerId, breakBlockadeId);\\n        generateDefendBlockadeStruct(warId, blockaderId, breakBlockadeId);\\n        generateBreakBlockadeChanceArray(breakBlockadeId);\\n        generateDefendBlockadeChanceArray(breakBlockadeId);\\n        war.cancelPeaceOffersUponAttack(warId);\\n        fulfillRequest(breakBlockadeId);\\n        breakBlockadeId++;\\n    }\\n\\n    function generateBreakBlockadeStruct(\\n        uint256 warId,\\n        uint256 attackerId,\\n        uint256 breakBlockId\\n    ) internal {\\n        uint256 battleships = nav.getBattleshipCount(attackerId);\\n        uint256 cruisers = nav.getCruiserCount(attackerId);\\n        uint256 frigates = nav2.getFrigateCount(attackerId);\\n        uint256 destroyers = nav2.getDestroyerCount(attackerId);\\n        BreakBlockade storage newBreakBlockade = breakBlockadeIdToBreakBlockade[\\n            breakBlockId\\n        ];\\n        newBreakBlockade.battleshipCount = battleships;\\n        newBreakBlockade.cruiserCount = cruisers;\\n        newBreakBlockade.frigateCount = frigates;\\n        newBreakBlockade.destroyerCount = destroyers;\\n        newBreakBlockade.warId = warId;\\n        newBreakBlockade.breakerId = attackerId;\\n        uint256 strength = getBreakerStrength(attackerId);\\n        newBreakBlockade.breakerStrength = strength;\\n    }\\n\\n    function generateDefendBlockadeStruct(\\n        uint256 warId,\\n        uint256 defenderId,\\n        uint256 breakBlockId\\n    ) internal {\\n        uint256 battleships = nav.getBattleshipCount(defenderId);\\n        uint256 cruisers = nav.getCruiserCount(defenderId);\\n        uint256 frigates = nav2.getFrigateCount(defenderId);\\n        uint256 submarines = nav2.getSubmarineCount(defenderId);\\n        DefendBlockade\\n            storage newDefendBlockade = breakBlockadeIdToDefendBlockade[\\n                breakBlockId\\n            ];\\n        newDefendBlockade.battleshipCount = battleships;\\n        newDefendBlockade.cruiserCount = cruisers;\\n        newDefendBlockade.frigateCount = frigates;\\n        newDefendBlockade.submarineCount = submarines;\\n        newDefendBlockade.warId = warId;\\n        newDefendBlockade.defenderId = defenderId;\\n        uint256 strength = getDefenderStrength(defenderId);\\n        newDefendBlockade.defenderStrength = strength;\\n    }\\n\\n    function generateBreakBlockadeChanceArray(uint256 breakBlockId) internal {\\n        uint256[] storage chances = battleIdToBreakBlockadeChanceArray[\\n            breakBlockId\\n        ];\\n        uint256[] storage types = battleIdToBreakBlockadeTypeArray[\\n            breakBlockId\\n        ];\\n        uint256 cumulativeSum;\\n        //battleship\\n        if (breakBlockadeIdToBreakBlockade[breakBlockId].battleshipCount > 0) {\\n            uint256 battleshipOdds = (breakBlockadeIdToBreakBlockade[\\n                breakBlockId\\n            ].battleshipCount * battleshipTargetSize);\\n            uint256 battleshipOddsToPush = (battleshipOdds + cumulativeSum);\\n            chances.push(battleshipOddsToPush);\\n            types.push(3);\\n            cumulativeSum = battleshipOddsToPush;\\n        }\\n        //cruiser\\n        if (breakBlockadeIdToBreakBlockade[breakBlockId].cruiserCount > 0) {\\n            uint256 cruiserOdds = (breakBlockadeIdToBreakBlockade[breakBlockId]\\n                .cruiserCount * cruiserTargetSize);\\n            uint256 cruiserOddsToPush = (cruiserOdds + cumulativeSum);\\n            chances.push(cruiserOddsToPush);\\n            types.push(4);\\n            cumulativeSum = cruiserOddsToPush;\\n        }\\n        //frigate\\n        if (breakBlockadeIdToBreakBlockade[breakBlockId].frigateCount > 0) {\\n            uint256 frigateOdds = (breakBlockadeIdToBreakBlockade[breakBlockId]\\n                .frigateCount * frigateTargetSize);\\n            uint256 frigateOddsToPush = (frigateOdds + cumulativeSum);\\n            chances.push(frigateOddsToPush);\\n            types.push(5);\\n            cumulativeSum = frigateOddsToPush;\\n        }\\n        //destroyer\\n        if (breakBlockadeIdToBreakBlockade[breakBlockId].destroyerCount > 0) {\\n            uint256 destroyerOdds = (breakBlockadeIdToBreakBlockade[\\n                breakBlockId\\n            ].destroyerCount * destroyerTargetSize);\\n            uint256 destroyerOddsToPush = (destroyerOdds + cumulativeSum);\\n            chances.push(destroyerOddsToPush);\\n            types.push(6);\\n            cumulativeSum = destroyerOddsToPush;\\n        }\\n        battleIdToBreakBlockadeChanceArray[breakBlockId] = chances;\\n        battleIdToBreakBlockadeTypeArray[breakBlockId] = types;\\n        battleIdToBreakBlockadeCumulativeSumOdds[breakBlockId] = cumulativeSum;\\n    }\\n\\n    function generateDefendBlockadeChanceArray(uint256 breakBlockId) internal {\\n        uint256[] storage chances = battleIdToDefendBlockadeChanceArray[\\n            breakBlockId\\n        ];\\n        uint256[] storage types = battleIdToDefendBlockadeTypeArray[\\n            breakBlockId\\n        ];\\n        uint256 cumulativeSum;\\n        //battleship\\n        if (breakBlockadeIdToDefendBlockade[breakBlockId].battleshipCount > 0) {\\n            uint256 battleshipOdds = (breakBlockadeIdToDefendBlockade[\\n                breakBlockId\\n            ].battleshipCount * battleshipTargetSize);\\n            uint256 battleshipOddsToPush = (battleshipOdds + cumulativeSum);\\n            chances.push(battleshipOddsToPush);\\n            types.push(3);\\n            cumulativeSum = battleshipOddsToPush;\\n        }\\n        //cruiser\\n        if (breakBlockadeIdToDefendBlockade[breakBlockId].cruiserCount > 0) {\\n            uint256 cruiserOdds = (breakBlockadeIdToDefendBlockade[breakBlockId]\\n                .cruiserCount * cruiserTargetSize);\\n            uint256 cruiserOddsToPush = (cruiserOdds + cumulativeSum);\\n            chances.push(cruiserOddsToPush);\\n            types.push(4);\\n            cumulativeSum = cruiserOddsToPush;\\n        }\\n        //frigate\\n        if (breakBlockadeIdToDefendBlockade[breakBlockId].frigateCount > 0) {\\n            uint256 frigateOdds = (breakBlockadeIdToDefendBlockade[breakBlockId]\\n                .frigateCount * frigateTargetSize);\\n            uint256 frigateOddsToPush = (frigateOdds + cumulativeSum);\\n            chances.push(frigateOddsToPush);\\n            types.push(5);\\n            cumulativeSum = frigateOddsToPush;\\n        }\\n        //submarine\\n        if (breakBlockadeIdToDefendBlockade[breakBlockId].submarineCount > 0) {\\n            uint256 submarineOdds = (breakBlockadeIdToDefendBlockade[\\n                breakBlockId\\n            ].submarineCount * destroyerTargetSize);\\n            uint256 submarineOddsToPush = (submarineOdds + cumulativeSum);\\n            chances.push(submarineOddsToPush);\\n            types.push(7);\\n            cumulativeSum = submarineOddsToPush;\\n        }\\n        battleIdToDefendBlockadeChanceArray[breakBlockId] = chances;\\n        battleIdToDefendBlockadeTypeArray[breakBlockId] = types;\\n        battleIdToDefendBlockadeCumulativeSumOdds[breakBlockId] = cumulativeSum;\\n    }\\n\\n    function getBreakerStrength(\\n        uint256 battleId\\n    ) public view returns (uint256) {\\n        uint256 _battleshipStrength = breakBlockadeIdToBreakBlockade[battleId]\\n            .battleshipCount * battleshipStrength;\\n        uint256 _cruiserStrength = breakBlockadeIdToBreakBlockade[battleId]\\n            .cruiserCount * cruiserStrength;\\n        uint256 _frigateStrength = breakBlockadeIdToBreakBlockade[battleId]\\n            .frigateCount * frigateStrength;\\n        uint256 _destroyerStrength = breakBlockadeIdToBreakBlockade[battleId]\\n            .destroyerCount * destroyerStrength;\\n        uint256 strength = (_battleshipStrength +\\n            _cruiserStrength +\\n            _frigateStrength +\\n            _destroyerStrength);\\n        uint256 breakerId = breakBlockadeIdToBreakBlockade[battleId].breakerId;\\n        uint256 navalAcademyCount = imp4.getNavalAcademyCount(breakerId);\\n        if (navalAcademyCount > 0) {\\n            uint256 breakerShipCount = getBreakerShipCount(breakerId);\\n            strength += (breakerShipCount * navalAcademyCount);\\n        }\\n        return strength;\\n    }\\n\\n    function getDefenderStrength(\\n        uint256 battleId\\n    ) public view returns (uint256) {\\n        uint256 _battleshipStrength = breakBlockadeIdToDefendBlockade[battleId]\\n            .battleshipCount * battleshipStrength;\\n        uint256 _cruiserStrength = breakBlockadeIdToDefendBlockade[battleId]\\n            .cruiserCount * cruiserStrength;\\n        uint256 _frigateStrength = breakBlockadeIdToDefendBlockade[battleId]\\n            .frigateCount * frigateStrength;\\n        uint256 _submarineStrength = breakBlockadeIdToDefendBlockade[battleId]\\n            .submarineCount * submarineStrength;\\n        uint256 strength = (_battleshipStrength +\\n            _cruiserStrength +\\n            _frigateStrength +\\n            _submarineStrength);\\n        uint256 defenderId = breakBlockadeIdToDefendBlockade[battleId]\\n            .defenderId;\\n        uint256 navalAcademyCount = imp4.getNavalAcademyCount(defenderId);\\n        if (navalAcademyCount > 0) {\\n            uint256 defenderShipCount = getDefenderShipCount(defenderId);\\n            strength += (defenderShipCount * navalAcademyCount);\\n        }\\n        return strength;\\n    }\\n\\n    mapping(uint256 => bool) public pendingRequests;\\n    mapping(uint256 => uint256) public pendingRequestTimestamp;\\n    uint256 public constant RETRY_TIMEOUT = 5 minutes;\\n\\n    function retryFulfillRequest(uint256 battleId) public {\\n        require(pendingRequests[battleId], \\\"No pending request\\\");\\n        require(\\n            block.timestamp > pendingRequestTimestamp[battleId] + RETRY_TIMEOUT,\\n            \\\"Retry not allowed yet\\\"\\n        );\\n\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n\\n        s_requestIdToRequestIndex[requestId] = battleId;\\n        pendingRequests[battleId] = true;\\n        pendingRequestTimestamp[battleId] = block.timestamp;\\n        emit RandomnessRequested(requestId, battleId, block.timestamp);\\n    }\\n\\n    event RandomnessRequested(uint256 requestId, uint256 id, uint256 timestamp);\\n\\n    function fulfillRequest(uint256 battleId) internal {\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        s_requestIdToRequestIndex[requestId] = battleId;\\n        pendingRequests[battleId] = true;\\n        pendingRequestTimestamp[battleId] = block.timestamp;\\n        emit RandomnessRequested(requestId, battleId, block.timestamp);\\n    }\\n\\n    event BreakBlockadeRequested(\\n        uint256 requestId,\\n        uint256 requestNumber,\\n        uint256[] randomWords,\\n        uint256[] attackerChances,\\n        uint256[] attackerTypes,\\n        uint256[] defenderChances,\\n        uint256[] defenderTypes\\n    );\\n\\n    function fulfillRandomWords(\\n        uint256 requestId,\\n        uint256[] memory randomWords\\n    ) internal override {\\n        require(\\n            pendingRequests[s_requestIdToRequestIndex[requestId]],\\n            \\\"Request not pending\\\"\\n        );\\n        uint256 battleId = s_requestIdToRequestIndex[requestId];\\n        delete pendingRequests[battleId];\\n        delete pendingRequestTimestamp[battleId];\\n        s_requestIndexToRandomWords[battleId] = randomWords;\\n        uint256[] memory attackerChances = battleIdToBreakBlockadeChanceArray[\\n            battleId\\n        ];\\n        uint256[] memory attackerTypes = battleIdToBreakBlockadeTypeArray[\\n            battleId\\n        ];\\n        uint256[] memory defenderChances = battleIdToDefendBlockadeChanceArray[\\n            battleId\\n        ];\\n        uint256[] memory defenderTypes = battleIdToDefendBlockadeTypeArray[\\n            battleId\\n        ];\\n        emit BreakBlockadeRequested(\\n            requestId,\\n            battleId,\\n            randomWords,\\n            attackerChances,\\n            attackerTypes,\\n            defenderChances,\\n            defenderTypes\\n        );\\n    }\\n\\n    event BreakBlockadeComlpete(\\n        uint256[] attackerLosses,\\n        uint256 breakerId,\\n        uint256[] defenderLosses,\\n        uint256 defenderId,\\n        uint256 battleId\\n    );\\n\\n    address public oracle = 0xdB3892b0FD38D73B65a9AD2fC3920B74B2B71dfb;\\n\\n    modifier onlyOracle() {\\n        require(msg.sender == oracle, \\\"!ORACLE\\\");\\n        _;\\n    }\\n\\n    function setOracle(address _oracleAddress) public onlyOwner {\\n        oracle = _oracleAddress;\\n    }\\n\\n    function completeBattleSequence(\\n        uint256[] memory _attackerLosses,\\n        uint256[] memory _defenderLosses,\\n        uint256 battleId\\n    ) public onlyOracle nonReentrant {\\n        uint256 _defenderId = breakBlockadeIdToDefendBlockade[battleId]\\n            .defenderId;\\n        uint256 _breakerId = breakBlockadeIdToBreakBlockade[battleId].breakerId;\\n        addNav.decrementLosses(\\n            _defenderLosses,\\n            _defenderId,\\n            _attackerLosses,\\n            _breakerId\\n        );\\n        uint256 blockaderShips = getDefenderShipCount(_defenderId);\\n        if (blockaderShips == 0) {\\n            navBlock.breakBlockade(_defenderId, _breakerId);\\n            navBlock.checkIfBlockadeCapable(_defenderId);\\n        }\\n        emit BreakBlockadeComlpete(\\n            _attackerLosses,\\n            _breakerId,\\n            _defenderLosses,\\n            _defenderId,\\n            battleId\\n        );\\n    }\\n\\n    function getBreakerShipCount(\\n        uint256 countryId\\n    ) internal view returns (uint256) {\\n        uint256 battleshipCount = nav.getBattleshipCount(countryId);\\n        uint256 cruiserCount = nav.getCruiserCount(countryId);\\n        uint256 frigateCount = nav2.getFrigateCount(countryId);\\n        uint256 destroyerCount = nav2.getDestroyerCount(countryId);\\n        uint256 count = (battleshipCount +\\n            cruiserCount +\\n            frigateCount +\\n            destroyerCount);\\n        return count;\\n    }\\n\\n    function getDefenderShipCount(\\n        uint256 countryId\\n    ) internal view returns (uint256) {\\n        uint256 battleshipCount = nav.getBattleshipCount(countryId);\\n        uint256 cruiserCount = nav.getCruiserCount(countryId);\\n        uint256 frigateCount = nav2.getFrigateCount(countryId);\\n        uint256 submarineCount = nav2.getSubmarineCount(countryId);\\n        uint256 count = (battleshipCount +\\n            cruiserCount +\\n            frigateCount +\\n            submarineCount);\\n        return count;\\n    }\\n}\\n\\n///@title NavalAttackContract\\n///@author OxSnosh\\n///@dev this contract inherits from the openzeppelin ownable contract\\n///@dev this contract inherits from the chainlink VRF contract\\ncontract NavalAttackContract is Ownable, VRFConsumerBaseV2, ReentrancyGuard {\\n    address public navy;\\n    uint256 public navyBattleId;\\n    address public navyBlockade;\\n    address public warAddress;\\n    address public improvements4;\\n    address public navalActions;\\n    address public navy2;\\n    address public additionalNavy;\\n    address public countryMinter;\\n\\n    uint256 corvetteStrength = 1;\\n    uint256 landingShipStrength = 3;\\n    uint256 battleshipStrength = 5;\\n    uint256 cruiserStrength = 6;\\n    uint256 frigateStrength = 8;\\n    uint256 destroyerStrength = 11;\\n    uint256 submarineStrength = 12;\\n    uint256 aircraftCarrierStrength = 15;\\n    uint256 corvetteTargetSize = 15;\\n    uint256 landingShipTargetSize = 13;\\n    uint256 battleshipTargetSize = 11;\\n    uint256 cruiserTargetSize = 10;\\n    uint256 frigateTargetSize = 8;\\n    uint256 destroyerTargetSize = 5;\\n    uint256 submarineTargetSize = 4;\\n    uint256 aircraftCarrierTargetSize = 1;\\n\\n    //Chainlik Variables\\n    // uint256[] private s_randomWords;\\n    VRFCoordinatorV2Interface public i_vrfCoordinator;\\n    uint64 private immutable i_subscriptionId;\\n    bytes32 private immutable i_gasLane;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private constant NUM_WORDS = 6;\\n\\n    NavyContract nav;\\n    NavalBlockadeContract navBlock;\\n    WarContract war;\\n    ImprovementsContract4 imp4;\\n    NavalActionsContract navAct;\\n    NavyContract2 nav2;\\n    AdditionalNavyContract addNav;\\n    CountryMinter mint;\\n\\n    struct NavyForces {\\n        uint256 corvetteCount;\\n        uint256 landingShipCount;\\n        uint256 battleshipCount;\\n        uint256 cruiserCount;\\n        uint256 frigateCount;\\n        uint256 destroyerCount;\\n        uint256 submarineCount;\\n        uint256 aircraftCarrierCount;\\n        uint256 startingStrength;\\n        uint256 warId;\\n        uint256 countryId;\\n    }\\n\\n    mapping(uint256 => NavyForces) idToAttackerNavy;\\n    mapping(uint256 => NavyForces) idToDefenderNavy;\\n    mapping(uint256 => uint256[]) battleIdToAttackerChanceArray;\\n    mapping(uint256 => uint256[]) battleIdToAttackerTypeArray;\\n    mapping(uint256 => uint256) battleIdToAttackerCumulativeSumOdds;\\n    mapping(uint256 => uint256[]) battleIdToAttackerLosses;\\n    mapping(uint256 => uint256[]) battleIdToDefenderChanceArray;\\n    mapping(uint256 => uint256[]) battleIdToDefenderTypeArray;\\n    mapping(uint256 => uint256) battleIdToDefenderCumulativeSumOdds;\\n    mapping(uint256 => uint256[]) battleIdToDefenderLosses;\\n    mapping(uint256 => uint256) s_requestIdToRequestIndex;\\n    mapping(uint256 => uint256[]) public s_requestIndexToRandomWords;\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint64 subscriptionId,\\n        bytes32 gasLane, // keyHash\\n        uint32 callbackGasLimit\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n    }\\n\\n    function updateVRFCoordinator(\\n        address vrfCoordinatorV2\\n    ) public onlyOwner {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n    }\\n\\n    function settings(\\n        address _navy,\\n        address _war,\\n        address _improvements4,\\n        address _navalActions,\\n        address _navy2,\\n        address _additionalNavy,\\n        address _countryMinter\\n    ) public onlyOwner {\\n        navy = _navy;\\n        nav = NavyContract(_navy);\\n        warAddress = _war;\\n        war = WarContract(_war);\\n        improvements4 = _improvements4;\\n        imp4 = ImprovementsContract4(_improvements4);\\n        navalActions = _navalActions;\\n        navAct = NavalActionsContract(_navalActions);\\n        navy2 = _navy2;\\n        nav2 = NavyContract2(_navy2);\\n        additionalNavy = _additionalNavy;\\n        addNav = AdditionalNavyContract(_additionalNavy);\\n        countryMinter = _countryMinter;\\n        mint = CountryMinter(_countryMinter);\\n    }\\n\\n    ///@dev this is a public function callable only from the nation owner\\n    ///@dev this function allows a nation to attack the navy of another nation\\n    ///@notice this function allows a nation to attack the navy of another nation\\n    ///@param warId is the war id of the active war between the 2 nations\\n    ///@param attackerId is the id of the attacking nation\\n    ///@param defenderId is the nation id of the defending nation\\n    function navalAttack(\\n        uint256 warId,\\n        uint256 attackerId,\\n        uint256 defenderId\\n    ) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(attackerId, msg.sender);\\n        require(isOwner, \\\"caller not nation owner\\\");\\n        bool isActiveWar = war.isWarActive(warId);\\n        require(isActiveWar, \\\"!active war\\\");\\n        uint256 slotsUsed = navAct.getActionSlotsUsed(attackerId);\\n        require((slotsUsed + 1) <= 3, \\\"max slots used\\\");\\n        (uint256 warOffense, uint256 warDefense) = war.getInvolvedParties(\\n            warId\\n        );\\n        require(\\n            warOffense == attackerId || warOffense == defenderId,\\n            \\\"invalid parameters\\\"\\n        );\\n        require(\\n            warDefense == attackerId || warDefense == defenderId,\\n            \\\"invalid parameters\\\"\\n        );\\n        generateAttackerNavyStruct(warId, navyBattleId, attackerId);\\n        generateDefenderNavyStruct(warId, navyBattleId, defenderId);\\n        generateAttackerChanceArray(navyBattleId);\\n        generateDefenderChanceArray(navyBattleId);\\n        war.cancelPeaceOffersUponAttack(warId);\\n        fulfillRequest(navyBattleId);\\n        navAct.increaseAction(attackerId);\\n        navyBattleId++;\\n    }\\n\\n    function generateAttackerNavyStruct(\\n        uint256 warId,\\n        uint256 battleId,\\n        uint256 countryId\\n    ) internal {\\n        uint256 corvetteCount = nav.getCorvetteCount(countryId);\\n        uint256 landingShipCount = nav.getLandingShipCount(countryId);\\n        uint256 battleshipCount = nav.getBattleshipCount(countryId);\\n        uint256 cruiserCount = nav.getCruiserCount(countryId);\\n        uint256 frigateCount = nav2.getFrigateCount(countryId);\\n        uint256 destroyerCount = nav2.getDestroyerCount(countryId);\\n        uint256 submarineCount = nav2.getSubmarineCount(countryId);\\n        uint256 aircraftCarrierCount = nav2.getAircraftCarrierCount(countryId);\\n        NavyForces storage newNavyForces = idToAttackerNavy[battleId];\\n        newNavyForces.corvetteCount = corvetteCount;\\n        newNavyForces.landingShipCount = landingShipCount;\\n        newNavyForces.battleshipCount = battleshipCount;\\n        newNavyForces.cruiserCount = cruiserCount;\\n        newNavyForces.frigateCount = frigateCount;\\n        newNavyForces.destroyerCount = destroyerCount;\\n        newNavyForces.submarineCount = submarineCount;\\n        newNavyForces.aircraftCarrierCount = aircraftCarrierCount;\\n        uint256 strengthAttacker = getAttackerStrength(navyBattleId);\\n        newNavyForces.startingStrength = strengthAttacker;\\n        newNavyForces.warId = warId;\\n        newNavyForces.countryId = countryId;\\n    }\\n\\n    function generateDefenderNavyStruct(\\n        uint256 warId,\\n        uint256 attackId,\\n        uint256 countryId\\n    ) internal {\\n        uint256 corvetteCount = nav.getCorvetteCount(countryId);\\n        uint256 landingShipCount = nav.getLandingShipCount(countryId);\\n        uint256 battleshipCount = nav.getBattleshipCount(countryId);\\n        uint256 cruiserCount = nav.getCruiserCount(countryId);\\n        uint256 frigateCount = nav2.getFrigateCount(countryId);\\n        uint256 destroyerCount = nav2.getDestroyerCount(countryId);\\n        uint256 submarineCount = nav2.getSubmarineCount(countryId);\\n        uint256 aircraftCarrierCount = nav2.getAircraftCarrierCount(countryId);\\n        NavyForces storage newNavyForces = idToDefenderNavy[attackId];\\n        newNavyForces.corvetteCount = corvetteCount;\\n        newNavyForces.landingShipCount = landingShipCount;\\n        newNavyForces.battleshipCount = battleshipCount;\\n        newNavyForces.cruiserCount = cruiserCount;\\n        newNavyForces.frigateCount = frigateCount;\\n        newNavyForces.destroyerCount = destroyerCount;\\n        newNavyForces.submarineCount = submarineCount;\\n        newNavyForces.aircraftCarrierCount = aircraftCarrierCount;\\n        uint256 defenderStrength = getDefenderStrength(navyBattleId);\\n        newNavyForces.startingStrength = defenderStrength;\\n        newNavyForces.warId = warId;\\n        newNavyForces.countryId = countryId;\\n    }\\n\\n    function generateAttackerChanceArray(uint256 battleId) internal {\\n        uint256[] storage chances = battleIdToAttackerChanceArray[battleId];\\n        uint256[] storage types = battleIdToAttackerTypeArray[battleId];\\n        uint256 cumulativeSum;\\n        //corvette\\n        if (idToAttackerNavy[battleId].corvetteCount > 0) {\\n            uint256 corvetteOdds = (idToAttackerNavy[battleId].corvetteCount *\\n                corvetteTargetSize);\\n            chances.push(corvetteOdds);\\n            types.push(1);\\n            cumulativeSum = corvetteOdds;\\n        }\\n        //landing ship\\n        if (idToAttackerNavy[battleId].landingShipCount > 0) {\\n            uint256 landingShipOdds = (idToAttackerNavy[battleId]\\n                .landingShipCount * landingShipTargetSize);\\n            uint256 landingShipOddsToPush = (landingShipOdds + cumulativeSum);\\n            chances.push(landingShipOddsToPush);\\n            types.push(2);\\n            cumulativeSum = landingShipOddsToPush;\\n        }\\n        //battleship\\n        if (idToAttackerNavy[battleId].battleshipCount > 0) {\\n            uint256 battleshipOdds = (idToAttackerNavy[battleId]\\n                .battleshipCount * battleshipTargetSize);\\n            uint256 battleshipOddsToPush = (battleshipOdds + cumulativeSum);\\n            chances.push(battleshipOddsToPush);\\n            types.push(3);\\n            cumulativeSum = battleshipOddsToPush;\\n        }\\n        //cruiser\\n        if (idToAttackerNavy[battleId].cruiserCount > 0) {\\n            uint256 cruiserOdds = (idToAttackerNavy[battleId].cruiserCount *\\n                cruiserTargetSize);\\n            uint256 cruiserOddsToPush = (cruiserOdds + cumulativeSum);\\n            chances.push(cruiserOddsToPush);\\n            types.push(4);\\n            cumulativeSum = cruiserOddsToPush;\\n        }\\n        //frigate\\n        if (idToAttackerNavy[battleId].frigateCount > 0) {\\n            uint256 frigateOdds = (idToAttackerNavy[battleId].frigateCount *\\n                frigateTargetSize);\\n            uint256 frigateOddsToPush = (frigateOdds + cumulativeSum);\\n            chances.push(frigateOddsToPush);\\n            types.push(5);\\n            cumulativeSum = frigateOddsToPush;\\n        }\\n        //destroyer\\n        if (idToAttackerNavy[battleId].destroyerCount > 0) {\\n            uint256 destroyerOdds = (idToAttackerNavy[battleId].destroyerCount *\\n                destroyerTargetSize);\\n            uint256 destroyerOddsToPush = (destroyerOdds + cumulativeSum);\\n            chances.push(destroyerOddsToPush);\\n            types.push(6);\\n            cumulativeSum = destroyerOddsToPush;\\n        }\\n        //submarine\\n        if (idToAttackerNavy[battleId].submarineCount > 0) {\\n            uint256 submarineOdds = (idToAttackerNavy[battleId].submarineCount *\\n                submarineTargetSize);\\n            uint256 submarineOddsToPush = (submarineOdds + cumulativeSum);\\n            chances.push(submarineOddsToPush);\\n            types.push(7);\\n            cumulativeSum = submarineOddsToPush;\\n        }\\n        //aircraft carrier\\n        if (idToAttackerNavy[battleId].aircraftCarrierCount > 0) {\\n            uint256 aircraftCarrierOdds = (idToAttackerNavy[battleId]\\n                .aircraftCarrierCount * aircraftCarrierTargetSize);\\n            uint256 aircraftCarrierOddsToPush = (aircraftCarrierOdds +\\n                cumulativeSum);\\n            chances.push(aircraftCarrierOddsToPush);\\n            types.push(8);\\n            cumulativeSum = aircraftCarrierOddsToPush;\\n        }\\n        battleIdToAttackerChanceArray[battleId] = chances;\\n        battleIdToAttackerTypeArray[battleId] = types;\\n        battleIdToAttackerCumulativeSumOdds[battleId] = cumulativeSum;\\n    }\\n\\n    function generateDefenderChanceArray(uint256 battleId) internal {\\n        uint256[] storage chances = battleIdToDefenderChanceArray[battleId];\\n        uint256[] storage types = battleIdToDefenderTypeArray[battleId];\\n        uint256 cumulativeSum;\\n        //corvette\\n        if (idToDefenderNavy[battleId].corvetteCount > 0) {\\n            uint256 corvetteOdds = (idToDefenderNavy[battleId].corvetteCount *\\n                corvetteTargetSize);\\n            chances.push(corvetteOdds);\\n            types.push(1);\\n            cumulativeSum += corvetteOdds;\\n        }\\n        //landing ship\\n        if (idToDefenderNavy[battleId].landingShipCount > 0) {\\n            uint256 landingShipOdds = (idToDefenderNavy[battleId]\\n                .landingShipCount * landingShipTargetSize);\\n            uint256 landingShipOddsToPush = (landingShipOdds + cumulativeSum);\\n            chances.push(landingShipOddsToPush);\\n            types.push(2);\\n            cumulativeSum = landingShipOddsToPush;\\n        }\\n        //battleship\\n        if (idToDefenderNavy[battleId].battleshipCount > 0) {\\n            uint256 battleshipOdds = (idToDefenderNavy[battleId]\\n                .battleshipCount * battleshipTargetSize);\\n            uint256 battleshipOddsToPush = (battleshipOdds + cumulativeSum);\\n            chances.push(battleshipOddsToPush);\\n            types.push(3);\\n            cumulativeSum = battleshipOddsToPush;\\n        }\\n        //cruiser\\n        if (idToDefenderNavy[battleId].cruiserCount > 0) {\\n            uint256 cruiserOdds = (idToDefenderNavy[battleId].cruiserCount *\\n                cruiserTargetSize);\\n            uint256 cruiserOddsToPush = (cruiserOdds + cumulativeSum);\\n            chances.push(cruiserOddsToPush);\\n            types.push(4);\\n            cumulativeSum = cruiserOddsToPush;\\n        }\\n        //frigate\\n        if (idToDefenderNavy[battleId].frigateCount > 0) {\\n            uint256 frigateOdds = (idToDefenderNavy[battleId].frigateCount *\\n                frigateTargetSize);\\n            uint256 frigateOddsToPush = (frigateOdds + cumulativeSum);\\n            chances.push(frigateOddsToPush);\\n            types.push(5);\\n            cumulativeSum = frigateOddsToPush;\\n        }\\n        //destroyer\\n        if (idToDefenderNavy[battleId].destroyerCount > 0) {\\n            uint256 destroyerOdds = (idToDefenderNavy[battleId].destroyerCount *\\n                destroyerTargetSize);\\n            uint256 destroyerOddsToPush = (destroyerOdds + cumulativeSum);\\n            chances.push(destroyerOddsToPush);\\n            types.push(6);\\n            cumulativeSum = destroyerOddsToPush;\\n        }\\n        //submarine\\n        if (idToDefenderNavy[battleId].submarineCount > 0) {\\n            uint256 submarineOdds = (idToDefenderNavy[battleId].submarineCount *\\n                submarineTargetSize);\\n            uint256 submarineOddsToPush = (submarineOdds + cumulativeSum);\\n            chances.push(submarineOddsToPush);\\n            types.push(7);\\n            cumulativeSum = submarineOddsToPush;\\n        }\\n        //aircraft carrier\\n        if (idToDefenderNavy[battleId].aircraftCarrierCount > 0) {\\n            uint256 aircraftCarrierOdds = (idToDefenderNavy[battleId]\\n                .aircraftCarrierCount * aircraftCarrierTargetSize);\\n            uint256 aircraftCarrierOddsToPush = (aircraftCarrierOdds +\\n                cumulativeSum);\\n            chances.push(aircraftCarrierOddsToPush);\\n            types.push(8);\\n            cumulativeSum = aircraftCarrierOddsToPush;\\n        }\\n        battleIdToDefenderChanceArray[battleId] = chances;\\n        battleIdToDefenderTypeArray[battleId] = types;\\n        battleIdToDefenderCumulativeSumOdds[battleId] = cumulativeSum;\\n    }\\n\\n    function getAttackerStrength(\\n        uint256 battleId\\n    ) public view returns (uint256) {\\n        uint256 _corvetteStrength = idToAttackerNavy[battleId].corvetteCount *\\n            corvetteStrength;\\n        uint256 _landingShipStrength = idToAttackerNavy[battleId]\\n            .landingShipCount * landingShipStrength;\\n        uint256 _battleshipStrength = idToAttackerNavy[battleId]\\n            .battleshipCount * battleshipStrength;\\n        uint256 _cruiserStrength = idToAttackerNavy[battleId].cruiserCount *\\n            cruiserStrength;\\n        uint256 _frigateStrength = idToAttackerNavy[battleId].frigateCount *\\n            frigateStrength;\\n        uint256 _destroyerStrength = idToAttackerNavy[battleId].destroyerCount *\\n            destroyerStrength;\\n        uint256 _submarineStrength = idToAttackerNavy[battleId].submarineCount *\\n            submarineStrength;\\n        uint256 _aircraftCarrierStrength = idToAttackerNavy[battleId]\\n            .aircraftCarrierCount * aircraftCarrierStrength;\\n        uint256 strength = (_corvetteStrength +\\n            _landingShipStrength +\\n            _battleshipStrength +\\n            _cruiserStrength +\\n            _frigateStrength +\\n            _destroyerStrength +\\n            _submarineStrength +\\n            _aircraftCarrierStrength);\\n        uint256 attackerId = idToAttackerNavy[battleId].countryId;\\n        uint256 navalAcademyCount = imp4.getNavalAcademyCount(attackerId);\\n        if (navalAcademyCount > 0) {\\n            uint256 shipCount = getShipCount(attackerId);\\n            strength += (shipCount * navalAcademyCount);\\n        }\\n        return strength;\\n    }\\n\\n    function getDefenderStrength(\\n        uint256 battleId\\n    ) public view returns (uint256) {\\n        uint256 _corvetteStrength = idToDefenderNavy[battleId].corvetteCount *\\n            corvetteStrength;\\n        uint256 _landingShipStrength = idToDefenderNavy[battleId]\\n            .landingShipCount * landingShipStrength;\\n        uint256 _battleshipStrength = idToDefenderNavy[battleId]\\n            .battleshipCount * battleshipStrength;\\n        uint256 _cruiserStrength = idToDefenderNavy[battleId].cruiserCount *\\n            cruiserStrength;\\n        uint256 _frigateStrength = idToDefenderNavy[battleId].frigateCount *\\n            frigateStrength;\\n        uint256 _destroyerStrength = idToDefenderNavy[battleId].destroyerCount *\\n            destroyerStrength;\\n        uint256 _submarineStrength = idToDefenderNavy[battleId].submarineCount *\\n            submarineStrength;\\n        uint256 _aircraftCarrierStrength = idToDefenderNavy[battleId]\\n            .aircraftCarrierCount * aircraftCarrierStrength;\\n        uint256 strength = (_corvetteStrength +\\n            _landingShipStrength +\\n            _battleshipStrength +\\n            _cruiserStrength +\\n            _frigateStrength +\\n            _destroyerStrength +\\n            _submarineStrength +\\n            _aircraftCarrierStrength);\\n        uint256 defenderId = idToDefenderNavy[battleId].countryId;\\n        uint256 navalAcademyCount = imp4.getNavalAcademyCount(defenderId);\\n        if (navalAcademyCount > 0) {\\n            uint256 shipCount = getShipCount(defenderId);\\n            strength += (shipCount * navalAcademyCount);\\n        }\\n        return strength;\\n    }\\n\\n    mapping(uint256 => bool) public pendingRequests;\\n    mapping(uint256 => uint256) public pendingRequestTimestamp;\\n    uint256 public constant RETRY_TIMEOUT = 5 minutes;\\n\\n    function retryFulfillRequest(uint256 battleId) public {\\n        require(pendingRequests[battleId], \\\"No pending request\\\");\\n        require(\\n            block.timestamp > pendingRequestTimestamp[battleId] + RETRY_TIMEOUT,\\n            \\\"Retry not allowed yet\\\"\\n        );\\n\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n\\n        s_requestIdToRequestIndex[requestId] = battleId;\\n        pendingRequests[battleId] = true;\\n        pendingRequestTimestamp[battleId] = block.timestamp;\\n        emit RandomnessRequested(requestId, battleId, block.timestamp);\\n    }\\n\\n    event RandomnessRequested(uint256 requestId, uint256 id, uint256 timestamp);\\n\\n    function fulfillRequest(uint256 battleId) internal {\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        s_requestIdToRequestIndex[requestId] = battleId;\\n        pendingRequests[battleId] = true;\\n        pendingRequestTimestamp[battleId] = block.timestamp;\\n        emit RandomnessRequested(requestId, battleId, block.timestamp);\\n    }\\n\\n    event NavalAttackRequested(\\n        uint256 requestId,\\n        uint256 battleId,\\n        uint256[] randomWords,\\n        uint256[] attackerChances,\\n        uint256[] attackerTypes,\\n        uint256[] defenderChances,\\n        uint256[] defenderTypes,\\n        uint256 losses\\n    );\\n\\n    function fulfillRandomWords(\\n        uint256 requestId,\\n        uint256[] memory randomWords\\n    ) internal override {\\n        require(\\n            pendingRequests[s_requestIdToRequestIndex[requestId]],\\n            \\\"Request not pending\\\"\\n        );\\n        uint256 battleId = s_requestIdToRequestIndex[requestId];\\n        delete pendingRequests[battleId];\\n        delete pendingRequestTimestamp[battleId];\\n        s_requestIndexToRandomWords[battleId] = randomWords;\\n        uint256 numberBetweenZeroAndTwo = (randomWords[0] % 2);\\n        uint256 losses = getLosses(battleId, numberBetweenZeroAndTwo);\\n        uint256[] memory attackerChances = battleIdToAttackerChanceArray[\\n            battleId\\n        ];\\n        uint256[] memory attackerTypes = battleIdToAttackerTypeArray[battleId];\\n        uint256[] memory defenderChances = battleIdToDefenderChanceArray[\\n            battleId\\n        ];\\n        uint256[] memory defenderTypes = battleIdToDefenderTypeArray[battleId];\\n        emit NavalAttackRequested(\\n            requestId,\\n            battleId,\\n            randomWords,\\n            attackerChances,\\n            attackerTypes,\\n            defenderChances,\\n            defenderTypes,\\n            losses\\n        );\\n    }\\n\\n    event NavalAttackComplete(\\n        uint256[] attackerLosses,\\n        uint256[] defenderLosses,\\n        uint256 battleId\\n    );\\n\\n    address public oracle = 0xdB3892b0FD38D73B65a9AD2fC3920B74B2B71dfb;\\n\\n    modifier onlyOracle() {\\n        require(msg.sender == oracle, \\\"!ORACLE\\\");\\n        _;\\n    }\\n\\n    function setOracle(address _oracleAddress) public onlyOwner {\\n        oracle = _oracleAddress;\\n    }\\n\\n    mapping(uint256 => bool) public battleResolved;\\n\\n    function completeNavalAttack(\\n        uint256[] memory _attackerLosses,\\n        uint256[] memory _defenderLosses,\\n        uint256 battleId\\n    ) public nonReentrant onlyOracle {\\n        require(!battleResolved[battleId], \\\"Already resolved\\\");\\n        emit NavalAttackComplete(_attackerLosses, _defenderLosses, battleId);\\n        uint256 defenderId = idToDefenderNavy[battleId].countryId;\\n        uint256 attackerId = idToAttackerNavy[battleId].countryId;\\n        uint256 warId = idToAttackerNavy[battleId].warId;\\n        addNav.decrementLosses(\\n            _defenderLosses,\\n            defenderId,\\n            _attackerLosses,\\n            attackerId\\n        );\\n        war.addNavyCasualties(warId, defenderId, _defenderLosses.length);\\n        war.addNavyCasualties(warId, attackerId, _attackerLosses.length);\\n        navBlock.checkIfBlockadeCapable(defenderId);\\n        battleResolved[battleId] = true;\\n    }\\n\\n    function getLosses(\\n        uint256 battleId,\\n        uint256 numberBetweenZeroAndTwo\\n    ) public view returns (uint256) {\\n        uint256 attackerId = idToAttackerNavy[battleId].countryId;\\n        uint256 attackerCount = getShipCount(attackerId);\\n        uint256 defenderId = idToDefenderNavy[battleId].countryId;\\n        uint256 defenderCount = getShipCount(defenderId);\\n        uint256 totalShips = (attackerCount + defenderCount);\\n        uint256 losses;\\n        if (totalShips < 4) {\\n            losses = 1;\\n        } else if (totalShips <= 10) {\\n            losses = (1 + numberBetweenZeroAndTwo);\\n        } else if (totalShips <= 30) {\\n            losses = (2 + numberBetweenZeroAndTwo);\\n        } else if (totalShips <= 50) {\\n            losses = (3 + numberBetweenZeroAndTwo);\\n        } else if (totalShips <= 70) {\\n            losses = (4 + numberBetweenZeroAndTwo);\\n        } else if (totalShips <= 100) {\\n            losses = (5 + numberBetweenZeroAndTwo);\\n        } else {\\n            losses = (6 + numberBetweenZeroAndTwo);\\n        }\\n        return losses;\\n    }\\n\\n    function getShipCount(uint256 countryId) internal view returns (uint256) {\\n        uint256 corvetteCount = nav.getCorvetteCount(countryId);\\n        uint256 landingShipCount = nav.getLandingShipCount(countryId);\\n        uint256 battleshipCount = nav.getBattleshipCount(countryId);\\n        uint256 cruiserCount = nav.getCruiserCount(countryId);\\n        uint256 frigateCount = nav2.getFrigateCount(countryId);\\n        uint256 destroyerCount = nav2.getDestroyerCount(countryId);\\n        uint256 submarineCount = nav2.getSubmarineCount(countryId);\\n        uint256 aircraftCarrierCount = nav2.getAircraftCarrierCount(countryId);\\n        uint256 count = (corvetteCount +\\n            landingShipCount +\\n            battleshipCount +\\n            cruiserCount +\\n            frigateCount +\\n            destroyerCount +\\n            submarineCount +\\n            aircraftCarrierCount);\\n        return count;\\n    }\\n}\\n\",\"keccak256\":\"0x9104bdfe475f751ef9d468787220f72acef585532a7e5c83c264595370a83931\",\"license\":\"BUSL-1.1\"},\"contracts/Nuke.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"./CountryMinter.sol\\\";\\nimport \\\"./War.sol\\\";\\nimport \\\"./Wonders.sol\\\";\\nimport \\\"./Infrastructure.sol\\\";\\nimport \\\"./Forces.sol\\\";\\nimport \\\"./Navy.sol\\\";\\nimport \\\"./Improvements.sol\\\";\\nimport \\\"./KeeperFile.sol\\\";\\nimport \\\"./CountryParameters.sol\\\";\\nimport \\\"./Missiles.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n///@title NukeContract\\n///@author OxSnosh\\n///@dev this contract inherits from chainlink VRF\\n///@dev this contract inherits from openzeppelin ownable\\n///@notice this contract will allow a nation to launch a nuclear missile at anoter nation\\ncontract NukeContract is Ownable, VRFConsumerBaseV2 {\\n    uint256 nukeAttackId;\\n    address countryMinter;\\n    address warAddress;\\n    address wonders1;\\n    address wonders4;\\n    address improvements3;\\n    address improvements4;\\n    address infrastructure;\\n    address forces;\\n    address navy;\\n    address missiles;\\n    address keeper;\\n    address parameters;\\n    uint256 mod = 50;\\n\\n    //Chainlik Variables\\n    uint256[] private s_randomWords;\\n    VRFCoordinatorV2Interface public i_vrfCoordinator;\\n    uint64 private immutable i_subscriptionId;\\n    bytes32 private immutable i_gasLane;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private constant NUM_WORDS = 1;\\n\\n    CountryMinter mint;\\n    WarContract war;\\n    WondersContract1 won1;\\n    WondersContract4 won4;\\n    ImprovementsContract3 imp3;\\n    ImprovementsContract4 imp4;\\n    InfrastructureContract inf;\\n    ForcesContract force;\\n    NavyContract nav;\\n    MissilesContract mis;\\n    CountryParametersContract param;\\n    KeeperContract keep;\\n\\n    struct NukeAttack {\\n        uint256 warId;\\n        uint256 attackerId;\\n        uint256 defenderId;\\n        uint256 attackType;\\n    }\\n\\n    mapping(uint256 => NukeAttack) nukeAttackIdToNukeAttack;\\n    mapping(uint256 => uint256) s_requestIdToRequestIndex;\\n    mapping(uint256 => uint256[]) public s_requestIndexToRandomWords;\\n    mapping(uint256 => uint256) public gameDayToNukesLanded;\\n    mapping(uint256 => mapping(uint256 => bool))\\n        public nationIdToDayToNukeLanded;\\n\\n    event NukeLaunched(\\n        uint256 indexed id,\\n        uint256 indexed attackerId,\\n        uint256 indexed defenderId,\\n        uint256 warId,\\n        uint256 attackType\\n    );\\n\\n    event NukeAttackEvent(\\n        uint256 indexed id,\\n        uint256 indexed attackerId,\\n        uint256 indexed defenderId,\\n        uint256 warId,\\n        bool landed\\n    );\\n\\n    ///@dev this function contains the variable necessary for chainlink randomness\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint64 subscriptionId,\\n        bytes32 gasLane, // keyHash\\n        uint32 callbackGasLimit\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n    }\\n\\n    function updateVRFCoordinator(\\n        address vrfCoordinatorV2\\n    ) public onlyOwner {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings(\\n        address _countryMinter,\\n        address _warAddress,\\n        address _wonders1,\\n        address _wonders4,\\n        address _improvements3,\\n        address _improvements4,\\n        address _infrastructure,\\n        address _forces,\\n        address _navy,\\n        address _missiles,\\n        address _keeper\\n    ) public onlyOwner {\\n        countryMinter = _countryMinter;\\n        mint = CountryMinter(_countryMinter);\\n        warAddress = _warAddress;\\n        war = WarContract(_warAddress);\\n        wonders1 = _wonders1;\\n        won1 = WondersContract1(_wonders1);\\n        wonders4 = _wonders4;\\n        won4 = WondersContract4(_wonders4);\\n        improvements3 = _improvements3;\\n        imp3 = ImprovementsContract3(_improvements3);\\n        improvements4 = _improvements4;\\n        imp4 = ImprovementsContract4(_improvements4);\\n        infrastructure = _infrastructure;\\n        inf = InfrastructureContract(_infrastructure);\\n        forces = _forces;\\n        force = ForcesContract(_forces);\\n        navy = _navy;\\n        nav = NavyContract(_navy);\\n        missiles = _missiles;\\n        mis = MissilesContract(_missiles);\\n        keeper = _keeper;\\n        keep = KeeperContract(_keeper);\\n    }\\n\\n    function settings2(address _parameters) public onlyOwner {\\n        parameters = _parameters;\\n        param = CountryParametersContract(_parameters);\\n    }\\n\\n    ///@dev this is a public function callable only by the attacking nation owner\\n    ///@dev this function will launch a nuke strike against another nation, nations are required to be at war\\n    ///@notice this function will launch a nuke strike against another nation, nations are required to be at war\\n    ///@notice a nuke cannot be launched until a war is one day old\\n    ///@param attackType determines if the attack is a standard attack or an attack targeting infrastructure, land or technology\\n    ///@notice attack type will be 1 for a standard attack, 2 for an infrastructre attack, 3 for a land attack and 4 for a technology attack\\n    ///@notice if an attacking nation does not have a emp wonder, than the attack type will need to be a standard attack\\n    ///@param warId will be the war id of the active war between the 2 nations\\n    ///@param attackerId will be the id of the attacking nation (launching the nuke)\\n    ///@param defenderId will be the id of the defending nation\\n    function launchNuke(\\n        uint256 warId,\\n        uint256 attackerId,\\n        uint256 defenderId,\\n        uint256 attackType\\n    ) public {\\n        bool isOwner = mint.checkOwnership(attackerId, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        bool isActive = war.isWarActive(warId);\\n        require(isActive, \\\"war not active\\\");\\n        (uint256 offenseId, uint256 defenseId) = war.getInvolvedParties(warId);\\n        require(\\n            attackerId == offenseId || attackerId == defenseId,\\n            \\\"attacker not involved in this war\\\"\\n        );\\n        require(\\n            defenderId == offenseId || defenderId == defenseId,\\n            \\\"defender not involved in this war\\\"\\n        );\\n        (uint256 daysLeft, ) = war.getDaysLeft(warId);\\n        require(daysLeft < 6, \\\"not at war long enough to launch a nuke\\\");\\n        uint256 count = mis.getNukeCount(attackerId);\\n        require(count >= 1, \\\"need to own a nuke\\\");\\n        uint256 day = keep.getGameDay();\\n        require(\\n            nationIdToDayToNukeLanded[defenderId][day] == false,\\n            \\\"defender already nuked this day\\\"\\n        );\\n        completeNukeLaunch(warId, attackerId, defenderId, attackType);\\n    }\\n\\n    function completeNukeLaunch(\\n        uint256 warId,\\n        uint256 attackerId,\\n        uint256 defenderId,\\n        uint256 attackType\\n    ) internal {\\n        bool emp = won1.getEmpWeaponization(attackerId);\\n        if (!emp) {\\n            require(\\n                attackType == 1,\\n                \\\"can only launch a standard attack without emp\\\"\\n            );\\n        } else {\\n            require(attackType <= 4, \\\"invalid attack type\\\");\\n        }\\n        uint256 tech = inf.getTechnologyCount(attackerId);\\n        if (attackType == 2 || attackType == 3 || attackType == 4) {\\n            require(\\n                tech >= 5000,\\n                \\\"emp attacks require a nation to have 5,000 tech\\\"\\n            );\\n        }\\n        NukeAttack memory newAttack = NukeAttack(\\n            warId,\\n            attackerId,\\n            defenderId,\\n            attackType\\n        );\\n        nukeAttackIdToNukeAttack[nukeAttackId] = newAttack;\\n        war.cancelPeaceOffersUponAttack(warId);\\n        fulfillRequest(nukeAttackId);\\n        emit NukeLaunched(\\n            nukeAttackId,\\n            attackerId,\\n            defenderId,\\n            warId,\\n            attackType\\n        );\\n        nukeAttackId++;\\n    }\\n\\n    ///@dev this function will be called by the launchNuke() function\\n    ///@dev this function will send a randomness request to the chainlink VRF contract\\n    function fulfillRequest(uint256 id) internal {\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        s_requestIdToRequestIndex[requestId] = id;\\n    }\\n\\n    ///@dev this function will be called by the chainlink VRF contract in response to a randomness request\\n    ///@dev the random numbers will be used to determine if the nuke strike was a success or not\\n    ///@notice a nations default odds of a successful nuke strike are 50%\\n    ///@notice if a defender has a strategic defense initiative the odds of a successful strike go down 20%\\n    ///@notice if the attacker has sattelites, the odds of a succesful strike go up 5% per sattelite\\n    ///@notice if a defender has a missile defense, the odds of a sucessful strike go down 5% per missile defense\\n    ///@param requestId will be the request id passed in from the fulfillRequest() function\\n    ///@param randomWords is the randomly generate number for the calculation of a successful nuke strike\\n    function fulfillRandomWords(\\n        uint256 requestId,\\n        uint256[] memory randomWords\\n    ) internal override {\\n        console.log(\\\"request ID from fullfill\\\", requestId);\\n        uint256 requestNumber = s_requestIdToRequestIndex[requestId];\\n        console.log(\\\"requestNumber\\\", requestNumber);\\n        s_requestIndexToRandomWords[requestNumber] = randomWords;\\n        s_randomWords = randomWords;\\n        uint256 attackerId = nukeAttackIdToNukeAttack[requestNumber].attackerId;\\n        uint256 defenderId = nukeAttackIdToNukeAttack[requestNumber].defenderId;\\n        console.log(\\\"attackerId\\\", attackerId);\\n        console.log(\\\"defenderId\\\", defenderId);\\n        uint256 thwartOdds = getThwartOdds(attackerId, defenderId);\\n        console.log(\\\"thwartOdds\\\", thwartOdds);\\n        uint256 randomNukeSuccessNumber = ((s_randomWords[0] % 100) + 1);\\n        console.log(\\\"randomNukeSuccessNumber\\\", randomNukeSuccessNumber);\\n        if (randomNukeSuccessNumber > thwartOdds) {\\n            console.log(\\\"Nuke attaq success\\\");\\n            inflictNukeDamage(requestNumber);\\n            mis.decreaseNukeCountFromNukeContract(attackerId);\\n            param.inflictAnarchy(defenderId);\\n            uint256 gameDay = keep.getGameDay();\\n            gameDayToNukesLanded[gameDay]++;\\n            emit NukeAttackEvent(\\n                requestNumber,\\n                attackerId,\\n                defenderId,\\n                nukeAttackIdToNukeAttack[requestNumber].warId,\\n                true\\n            );\\n            uint256 day = keep.getGameDay();\\n            nationIdToDayToNukeLanded[defenderId][day] = true;\\n            console.log(\\\"did this run?\\\", nationIdToDayToNukeLanded[defenderId][day]);\\n            console.log(defenderId, day);\\n        } else {\\n            console.log(\\\"Nuke attaq thwarted\\\");\\n            mis.decreaseNukeCountFromNukeContract(attackerId);\\n            emit NukeAttackEvent(\\n                requestNumber,\\n                attackerId,\\n                defenderId,\\n                nukeAttackIdToNukeAttack[requestNumber].warId,\\n                false\\n            );\\n        }\\n    }\\n\\n    function getThwartOdds(\\n        uint256 attackerId,\\n        uint256 defenderId\\n    ) public view returns (uint256) {\\n        uint256 thwartOdds = 50;\\n        bool strategicDefenseInitiative = won4.getStrategicDefenseInitiative(\\n            defenderId\\n        );\\n        uint256 defenderMissileDefenses = imp4.getMissileDefenseCount(\\n            defenderId\\n        );\\n        uint256 attackerSattelites = imp3.getSatelliteCount(attackerId);\\n        if (strategicDefenseInitiative) {\\n            thwartOdds += 20;\\n        }\\n        if (defenderMissileDefenses > 0) {\\n            thwartOdds += (defenderMissileDefenses * 5);\\n        }\\n        if (attackerSattelites > 0) {\\n            thwartOdds -= (attackerSattelites * 5);\\n        }\\n        return thwartOdds;\\n    }\\n\\n    ///@dev this is an internal function that will be called in the event of a succesful nuke strike\\n    ///@notice this function will take the attack tyoe and direct the type of damage to inflict\\n    ///@param attackId this is the type of attack that was launched that will determine if the attack was a standard attack or an infrastructure, land or tech attack\\n    function inflictNukeDamage(uint256 attackId) internal {\\n        uint256 attackType = nukeAttackIdToNukeAttack[attackId].attackType;\\n        if (attackType == 1) {\\n            standardAttack(attackId);\\n        } else if (attackType == 2) {\\n            infrastructureAttack(attackId);\\n        } else if (attackType == 3) {\\n            landAttack(attackId);\\n        } else if (attackType == 4) {\\n            technologyAttack(attackId);\\n        }\\n    }\\n\\n    ///@dev this is the function that will be called in the event of a standard attack\\n    ///@notice a standard nuke attack will decrease land, infrastructure and tech by 35%\\n    function standardAttack(uint256 attackId) internal {\\n        uint256 defenderId = nukeAttackIdToNukeAttack[attackId].defenderId;\\n        uint256 attackerId = nukeAttackIdToNukeAttack[attackId].attackerId;\\n        force.decreaseDefendingSoldierCountFromNukeAttack(defenderId);\\n        force.decreaseDefendingTankCountFromNukeContract(defenderId);\\n        nav.decreaseNavyFromNukeContract(defenderId);\\n        inf.decreaseLandCountFromNukeContract(defenderId, 35, 1);\\n        inf.decreaseInfrastructureCountFromNukeContract(\\n            defenderId,\\n            attackerId,\\n            35,\\n            1\\n        );\\n        inf.decreaseTechCountFromNukeContract(defenderId, 35, 1);\\n        mis.decreaseCruiseMissileCountFromNukeContract(defenderId);\\n    }\\n\\n    ///@dev this is the function that will be called in the event of a infrastructure attack\\n    ///@notice an infrastructure nuke attack will decrease infrastructure by 45% and land and tech by 25%\\n    function infrastructureAttack(uint256 attackId) internal {\\n        uint256 defenderId = nukeAttackIdToNukeAttack[attackId].defenderId;\\n        uint256 attackerId = nukeAttackIdToNukeAttack[attackId].attackerId;\\n        force.decreaseDefendingSoldierCountFromNukeAttack(defenderId);\\n        force.decreaseDefendingTankCountFromNukeContract(defenderId);\\n        nav.decreaseNavyFromNukeContract(defenderId);\\n        inf.decreaseLandCountFromNukeContract(defenderId, 25, 2);\\n        inf.decreaseInfrastructureCountFromNukeContract(\\n            defenderId,\\n            attackerId,\\n            45,\\n            2\\n        );\\n        inf.decreaseTechCountFromNukeContract(defenderId, 25, 2);\\n        mis.decreaseCruiseMissileCountFromNukeContract(defenderId);\\n    }\\n\\n    ///@dev this is the function that will be called in the event of a land attack\\n    ///@notice a land nuke attack will decrease land by 45% and infrastructe and tech by 25%\\n    function landAttack(uint256 attackId) internal {\\n        uint256 defenderId = nukeAttackIdToNukeAttack[attackId].defenderId;\\n        uint256 attackerId = nukeAttackIdToNukeAttack[attackId].attackerId;\\n        force.decreaseDefendingSoldierCountFromNukeAttack(defenderId);\\n        force.decreaseDefendingTankCountFromNukeContract(defenderId);\\n        nav.decreaseNavyFromNukeContract(defenderId);\\n        inf.decreaseLandCountFromNukeContract(defenderId, 45, 3);\\n        inf.decreaseInfrastructureCountFromNukeContract(\\n            defenderId,\\n            attackerId,\\n            25,\\n            3\\n        );\\n        inf.decreaseTechCountFromNukeContract(defenderId, 25, 3);\\n        mis.decreaseCruiseMissileCountFromNukeContract(defenderId);\\n    }\\n\\n    ///@dev this is the function that will be called in the event of a tech attack\\n    ///@notice a tech nuke attack will decrease tech by 45% and infrastructe and land by 25%\\n    function technologyAttack(uint256 attackId) internal {\\n        uint256 defenderId = nukeAttackIdToNukeAttack[attackId].defenderId;\\n        uint256 attackerId = nukeAttackIdToNukeAttack[attackId].attackerId;\\n        force.decreaseDefendingSoldierCountFromNukeAttack(defenderId);\\n        force.decreaseDefendingTankCountFromNukeContract(defenderId);\\n        nav.decreaseNavyFromNukeContract(defenderId);\\n        inf.decreaseLandCountFromNukeContract(defenderId, 25, 4);\\n        inf.decreaseInfrastructureCountFromNukeContract(\\n            defenderId,\\n            attackerId,\\n            25,\\n            4\\n        );\\n        inf.decreaseTechCountFromNukeContract(defenderId, 45, 4);\\n        mis.decreaseCruiseMissileCountFromNukeContract(defenderId);\\n    }\\n\\n    ///@dev this function is a public view function that will return the number of nukes launched in the game in the last 7 days\\n    ///@dev this function will be used to calculate global radiation levels (next function)\\n    function calculateNukesLandedLastSevenDays() public view returns (uint256) {\\n        uint256 sum = 0;\\n        uint256 gameDay = keep.getGameDay();\\n        uint256 daysToIterate;\\n        if (gameDay < 7) {\\n            daysToIterate = gameDay;\\n        } else {\\n            daysToIterate = 7;\\n        }\\n        for (uint256 i = 0; i < daysToIterate; i++) {\\n            sum += gameDayToNukesLanded[gameDay - i];\\n        }\\n        return sum;\\n    }\\n\\n    ///@dev this is a public view function that will return the global radiation levels that will be used in a nations environment calculation\\n    ///@notice this function will return the global radiation levels for the game\\n    ///@notice global radiation is calulates by miltiplying nukes landed in the last 7 days by a modifier (default 300) and dividing by the number of countries\\n    ///@return uint256 is the global radiation level\\n    function getGlobalRadiation() public view returns (uint256) {\\n        uint256 countries = mint.getCountryCount();\\n        if (countries == 0) {\\n            countries = 1;\\n        }\\n        uint256 nukesLanded = calculateNukesLandedLastSevenDays();\\n        uint256 globalRadiation = ((nukesLanded * mod) / countries);\\n        return globalRadiation;\\n    }\\n\\n    ///@dev this is a function callable by the owner of the contract that will allow the caller to update the modifier for the global radiation level\\n    ///@notice this function will allow the owner of the contract to adjust the modifier for the global radiation level\\n    ///@param newModifier is the new modifier for the global radiation level\\n    function updateGlobalRadiationModifier(\\n        uint256 newModifier\\n    ) public onlyOwner {\\n        mod = newModifier;\\n    }\\n}\\n\",\"keccak256\":\"0xe0598e9bd781b1ca5aa83ddad8c9f1d2ba63d45938d998aa0c0d4a179e881d24\",\"license\":\"BUSL-1.1\"},\"contracts/Resources.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"./Infrastructure.sol\\\";\\nimport \\\"./Improvements.sol\\\";\\nimport \\\"./CountryMinter.sol\\\";\\nimport \\\"./CountryParameters.sol\\\";\\nimport \\\"./Senate.sol\\\";\\nimport \\\"./Crime.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n///@title ResourcesContract\\n///@author OxSnosh\\n///@notice this contract will keep track of a nations resources and trades\\n///@dev this contract inherits from chainlink VRF\\n///@dev this contract inherits from oepnzeppelin ownable\\ncontract ResourcesContract is VRFConsumerBaseV2, Ownable {\\n    uint256[] private s_randomWords;\\n    address public infrastructure;\\n    address public improvements2;\\n    address public countryMinter;\\n    address public senate;\\n    address public techMkt;\\n\\n    CountryMinter mint;\\n    BonusResourcesContract bonus;\\n    CountryParametersContract params;\\n    SenateContract sen;\\n\\n    //Chainlik Variables\\n    VRFCoordinatorV2Interface public i_vrfCoordinator;\\n    uint64 private immutable i_subscriptionId;\\n    bytes32 private immutable i_gasLane;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private constant NUM_WORDS = 2;\\n\\n    struct Resources1 {\\n        bool initialized;\\n        bool aluminium;\\n        //Aluminum\\n        //Increases soldier efficiency +20%,\\n        //lowers infrastructure purchase cost -7%, and\\n        //lowers aircraft purchase costs -8%.\\n        bool cattle;\\n        //Cattle\\n        //Increases number of citizens +5%\\n        //and lowers land purchase cost -10%.\\n        bool coal;\\n        //Coal\\n        //Increases the purchased land area of a nation by 15%,\\n        //increases soldier efficiency +8%,\\n        //and lowers infrastructure purchase cost -4%.\\n        bool fish;\\n        //Fish\\n        //Increases number of citizens +8%\\n        //and lowers land purchase cost -5%.\\n        bool furs;\\n        //Furs\\n        //Increases citizen's daily income +$3.50\\n        bool gems;\\n        //Gems\\n        //Increases citizen's daily income +$1.50\\n        //and increases population happiness +3.\\n        bool gold;\\n        //Gold\\n        //Increases citizen's daily income +$3.00\\n        //and lowers technology cost by 5%.\\n        bool iron;\\n        //Iron\\n        //Lowers soldier purchase cost -$3.00,\\n        //lowers infrastructure upkeep costs -10%,\\n        //lowers infrastructure purchase costs -5%,\\n        //and lowers tank upkeep costs -5%.\\n        bool lead;\\n        //Lead\\n        //Lowers cruise missile and nuclear weapon purchase cost and upkeep cost -20%,\\n        //lowers aircraft upkeep cost -25%,\\n        //lowers tank purchase and upkeep costs -8%,\\n        //lowers soldier upkeep cost -15%,\\n        //reduces environment penalties for owning nuclear weapons by 50%,\\n        //and lowers all navy vessel upkeep cost -20%.\\n        bool lumber;\\n        //Lumber\\n        //Lowers infrastructure purchase cost -6%\\n        //and lowers infrastructure upkeep costs -8%.\\n        bool marble;\\n        //Marble\\n        //Lowers infrastructure purchase cost -10%.\\n    }\\n\\n    struct Resources2 {\\n        bool oil;\\n        //Oil\\n        //Lowers soldier purchase cost -$3.00,\\n        //increases population happiness +2,\\n        //increases soldier efficiency +10%,\\n        //lowers tank upkeep cost -5%,\\n        //lowers aircraft purchase cost -4%,\\n        //and lowers all navy vessel upkeep cost -10%.\\n        bool pigs;\\n        //Pigs\\n        //Lowers soldier upkeep cost -$0.50,\\n        //increases soldier efficiency +15%,\\n        //and increases number of citizens +4%.\\n        bool rubber;\\n        //Rubber\\n        //Increases purchased land area of a nation by 20%,\\n        //lowers land purchase cost -10%,\\n        //triples the value of land when selling (from $100 to $300),\\n        //lowers infrastructure purchase cost -3%,\\n        //and lowers aircraft purchase cost -4%.\\n        bool silver;\\n        //Silver\\n        //Increases citizen's daily income +$2.00\\n        //and increases population happiness +2.\\n        bool spices;\\n        //Spices\\n        //Increases the purchased land area of a nation by 8%\\n        //and increases population happiness +2.\\n        bool sugar;\\n        //Sugar\\n        //Increases number of citizens +3%,\\n        //and increases population happiness +1.\\n        bool uranium;\\n        //Uranium\\n        //Reduces infrastructure upkeep cost -3%.\\n        //Allow nations to develop nuclear weapons\\n        //If a nation owns nuclear weapons but does not have uranium the cost to maintain nukes\\n        //is doubled.\\n        //Lowers Submarine and Aircraft Carrier navy vessel purchase and upkeep cost -5%.\\n        bool water;\\n        //Water\\n        //Increases number of citizens per mile before population unhappiness by 50,\\n        //increases population happiness +3,\\n        //and improves a nation's environment by 1.\\n        bool wheat;\\n        //Wheat\\n        //Increases number of citizens +8%.\\n        bool wine;\\n        //Wine\\n        //Increases population happiness +3.\\n    }\\n\\n    mapping(uint256 => Resources1) public idToResources1;\\n    mapping(uint256 => Resources2) public idToResources2;\\n    mapping(uint256 => uint256[]) public idToPlayerResources;\\n    mapping(uint256 => uint256[]) public idToRandomResourceSelection;\\n    mapping(uint256 => uint256[]) public idToTradingPartners;\\n    mapping(uint256 => uint256[]) public idToProposedTradingPartners;\\n    mapping(uint256 => uint256) s_requestIdToRequestIndex;\\n    mapping(uint256 => uint256[]) public s_requestIndexToRandomWords;\\n\\n    event TradeProposed(\\n        uint256 indexed requestorId,\\n        uint256 indexed recipientId\\n    );\\n    event TradeAccepted(\\n        uint256 indexed requestorId,\\n        uint256 indexed recipientId\\n    );\\n    event TradeProposalCancelled(\\n        uint256 indexed requestorId,\\n        uint256 indexed recipientId\\n    );\\n    event TradeCancelled(\\n        uint256 indexed requestorId,\\n        uint256 indexed recipientId\\n    );\\n\\n    modifier onlyCountryMinter() {\\n        require(\\n            msg.sender == countryMinter,\\n            \\\"this function is only callable from the country minter contract\\\"\\n        );\\n        _;\\n    }\\n\\n    ///@dev constructor function will accept variables for chainlink randomness\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint64 subscriptionId,\\n        bytes32 gasLane, // keyHash\\n        uint32 callbackGasLimit\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n    }\\n\\n    function updateVRFCoordinator(\\n        address vrfCoordinatorV2\\n    ) public onlyOwner {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings(\\n        address _infrastructure,\\n        address _improvements2,\\n        address _countryMinter,\\n        address _bonusResources,\\n        address _senate,\\n        address _technologyMarket,\\n        address _parameters\\n    ) public onlyOwner {\\n        infrastructure = _infrastructure;\\n        improvements2 = _improvements2;\\n        countryMinter = _countryMinter;\\n        mint = CountryMinter(_countryMinter);\\n        bonus = BonusResourcesContract(_bonusResources);\\n        senate = _senate;\\n        sen = SenateContract(_senate);\\n        techMkt = _technologyMarket;\\n        params = CountryParametersContract(_parameters);\\n    }\\n\\n    ///@dev this is a public function that is only callable from the country minter contract when a nation is minted\\n    ///@dev this function will allow a nation to store the resources they have access to\\n    ///@notice this function will allow a nation to store the resources they have access to\\n    ///@dev this function will call the chainlink vrf contract to assign the minted nation two resources randomly\\n    ///@param id is the nation id of the nation being minted\\n    function generateResources(uint256 id) external onlyCountryMinter {\\n        require(\\n            idToResources1[id].initialized == false,\\n            \\\"this nation already has resources\\\"\\n        );\\n        Resources1 memory newResources1 = Resources1(\\n            true,\\n            false,\\n            false,\\n            false,\\n            false,\\n            false,\\n            false,\\n            false,\\n            false,\\n            false,\\n            false,\\n            false\\n        );\\n        Resources2 memory newResources2 = Resources2(\\n            false,\\n            false,\\n            false,\\n            false,\\n            false,\\n            false,\\n            false,\\n            false,\\n            false,\\n            false\\n        );\\n        idToResources1[id] = newResources1;\\n        idToResources2[id] = newResources2;\\n        fulfillRequest(id);\\n    }\\n\\n    ///@dev this is the function that will call the chainlink vrf contract to return random numbers\\n    ///@dev this is an internal function that can only be called from within this contract\\n    function fulfillRequest(uint256 id) internal {\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        s_requestIdToRequestIndex[requestId] = id;\\n    }\\n\\n    ///@dev this is the function that the chainlink vrf contract will call when it answers\\n    ///@param requestId this is the id of the request sent to the vrf contract\\n    ///@param randomWords is the random numbers being returned after being generated off chain\\n    ///@dev this function will assign a nation 2 random resources and assure that they are 2 different resources\\n    function fulfillRandomWords(\\n        uint256 requestId,\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 requestNumber = s_requestIdToRequestIndex[requestId];\\n        s_requestIndexToRandomWords[requestNumber] = randomWords;\\n        s_randomWords = s_requestIndexToRandomWords[requestNumber];\\n        uint256 randomResource1 = (s_randomWords[0] % 20);\\n        uint256 randomResource2 = (s_randomWords[1] % 20);\\n        if (randomResource1 == randomResource2 && randomResource2 == 20) {\\n            randomResource2 = 0;\\n        }\\n        if (randomResource1 == randomResource2) {\\n            randomResource2 = randomResource2 + 1;\\n        }\\n        uint256[2] memory playerResources = [randomResource1, randomResource2];\\n        idToPlayerResources[requestNumber] = playerResources;\\n        setResources(requestNumber);\\n    }\\n\\n    ///@dev this is a function that is callable only from the owner of the contract\\n    ///@dev this function was used in testing of the smart contract and should be deleted before deployment\\n    function mockResourcesForTesting(\\n        uint256 countryId,\\n        uint256 resource1,\\n        uint256 resource2\\n    ) public onlyOwner {\\n        uint256[2] memory playerResources = [resource1, resource2];\\n        idToPlayerResources[countryId] = playerResources;\\n        setResources(countryId);\\n    }\\n\\n    ///@dev this function is an internal function that will be called when a nation is minted or adds or removes a trading partner\\n    ///@dev this will set the nations assigned resources to true and call the next funtion that will set all the resources of its trading partners to true\\n    ///@param id is the nation id of the nation whose resources ar ebeing reset after minting or adding/removing a trading partner\\n    function setResources(uint256 id) internal {\\n        idToResources1[id].aluminium = false;\\n        idToResources1[id].cattle = false;\\n        idToResources1[id].coal = false;\\n        idToResources1[id].fish = false;\\n        idToResources1[id].furs = false;\\n        idToResources1[id].gems = false;\\n        idToResources1[id].gold = false;\\n        idToResources1[id].iron = false;\\n        idToResources1[id].lead = false;\\n        idToResources1[id].lumber = false;\\n        idToResources1[id].marble = false;\\n        idToResources2[id].oil = false;\\n        idToResources2[id].pigs = false;\\n        idToResources2[id].rubber = false;\\n        idToResources2[id].silver = false;\\n        idToResources2[id].spices = false;\\n        idToResources2[id].sugar = false;\\n        idToResources2[id].uranium = false;\\n        idToResources2[id].water = false;\\n        idToResources2[id].wheat = false;\\n        idToResources2[id].wine = false;\\n        uint256 resource1 = idToPlayerResources[id][0];\\n        uint256 resource2 = idToPlayerResources[id][1];\\n        if (resource1 == 0 || resource2 == 0) {\\n            idToResources1[id].aluminium = true;\\n        }\\n        if (resource1 == 1 || resource2 == 1) {\\n            idToResources1[id].cattle = true;\\n        }\\n        if (resource1 == 2 || resource2 == 2) {\\n            idToResources1[id].coal = true;\\n        }\\n        if (resource1 == 3 || resource2 == 3) {\\n            idToResources1[id].fish = true;\\n        }\\n        if (resource1 == 4 || resource2 == 4) {\\n            idToResources1[id].furs = true;\\n        }\\n        if (resource1 == 5 || resource2 == 5) {\\n            idToResources1[id].gems = true;\\n        }\\n        if (resource1 == 6 || resource2 == 6) {\\n            idToResources1[id].gold = true;\\n        }\\n        if (resource1 == 7 || resource2 == 7) {\\n            idToResources1[id].iron = true;\\n        }\\n        if (resource1 == 8 || resource2 == 8) {\\n            idToResources1[id].lead = true;\\n        }\\n        if (resource1 == 9 || resource2 == 9) {\\n            idToResources1[id].lumber = true;\\n        }\\n        if (resource1 == 10 || resource2 == 10) {\\n            idToResources1[id].marble = true;\\n        }\\n        if (resource1 == 11 || resource2 == 11) {\\n            idToResources2[id].oil = true;\\n        }\\n        if (resource1 == 12 || resource2 == 12) {\\n            idToResources2[id].pigs = true;\\n        }\\n        if (resource1 == 13 || resource2 == 13) {\\n            idToResources2[id].rubber = true;\\n        }\\n        if (resource1 == 14 || resource2 == 14) {\\n            idToResources2[id].silver = true;\\n        }\\n        if (resource1 == 15 || resource2 == 15) {\\n            idToResources2[id].spices = true;\\n        }\\n        if (resource1 == 16 || resource2 == 16) {\\n            idToResources2[id].sugar = true;\\n        }\\n        if (resource1 == 17 || resource2 == 17) {\\n            idToResources2[id].uranium = true;\\n        }\\n        if (resource1 == 18 || resource2 == 18) {\\n            idToResources2[id].water = true;\\n        }\\n        if (resource1 == 19 || resource2 == 19) {\\n            idToResources2[id].wheat = true;\\n        }\\n        if (resource1 == 20 || resource2 == 20) {\\n            idToResources2[id].wine = true;\\n        }\\n        setTrades(id);\\n    }\\n\\n    ///@dev this function is internal and can only be called by this contract\\n    ///@dev this function will loop through a nations trading partners and set the resources partner nations to true\\n    ///@param id is the nation id of the nation reseting their resources\\n    ///@dev this function is called from the previous setResources() function\\n    function setTrades(uint256 id) internal {\\n        uint256[] memory activeTrades = idToTradingPartners[id];\\n        uint256 i;\\n        for (i = 0; i < activeTrades.length; i++) {\\n            uint256 tradingPartner = activeTrades[i];\\n            (\\n                uint256 resource1,\\n                uint256 resource2\\n            ) = getResourcesFromTradingPartner(tradingPartner);\\n            if (resource1 == 0 || resource2 == 0) {\\n                idToResources1[id].aluminium = true;\\n            }\\n            if (resource1 == 1 || resource2 == 1) {\\n                idToResources1[id].cattle = true;\\n            }\\n            if (resource1 == 2 || resource2 == 2) {\\n                idToResources1[id].coal = true;\\n            }\\n            if (resource1 == 3 || resource2 == 3) {\\n                idToResources1[id].fish = true;\\n            }\\n            if (resource1 == 4 || resource2 == 4) {\\n                idToResources1[id].furs = true;\\n            }\\n            if (resource1 == 5 || resource2 == 5) {\\n                idToResources1[id].gems = true;\\n            }\\n            if (resource1 == 6 || resource2 == 6) {\\n                idToResources1[id].gold = true;\\n            }\\n            if (resource1 == 7 || resource2 == 7) {\\n                idToResources1[id].iron = true;\\n            }\\n            if (resource1 == 8 || resource2 == 8) {\\n                idToResources1[id].lead = true;\\n            }\\n            if (resource1 == 9 || resource2 == 9) {\\n                idToResources1[id].lumber = true;\\n            }\\n            if (resource1 == 10 || resource2 == 10) {\\n                idToResources1[id].marble = true;\\n            }\\n            if (resource1 == 11 || resource2 == 11) {\\n                idToResources2[id].oil = true;\\n            }\\n            if (resource1 == 12 || resource2 == 12) {\\n                idToResources2[id].pigs = true;\\n            }\\n            if (resource1 == 13 || resource2 == 13) {\\n                idToResources2[id].rubber = true;\\n            }\\n            if (resource1 == 14 || resource2 == 14) {\\n                idToResources2[id].silver = true;\\n            }\\n            if (resource1 == 15 || resource2 == 15) {\\n                idToResources2[id].spices = true;\\n            }\\n            if (resource1 == 16 || resource2 == 16) {\\n                idToResources2[id].sugar = true;\\n            }\\n            if (resource1 == 17 || resource2 == 17) {\\n                idToResources2[id].uranium = true;\\n            }\\n            if (resource1 == 18 || resource2 == 18) {\\n                idToResources2[id].water = true;\\n            }\\n            if (resource1 == 19 || resource2 == 19) {\\n                idToResources2[id].wheat = true;\\n            }\\n            if (resource1 == 20 || resource2 == 20) {\\n                idToResources2[id].wine = true;\\n            }\\n        }\\n        bonus.setBonusResources(id);\\n    }\\n\\n    ///@dev this is a public function that can be called by any nation owner\\n    ///@dev this function allows a nation owner to propose a trade with another nation\\n    ///@notice this function allows a nation owner to propose a trade with another nation\\n    ///@param requestorId is the nation id of the nation requesting the trading partnership\\n    ///@param recipientId is the nation id of the nation receiving the trade proposal\\n    ///@notice once proposed the recipient nation will need to accept the trade\\n    ///@notice a requesting nation can only have 3 trades active in order to propose a trade (4 with a harbor)\\n    ///@notice a recipient nation can only have 4 trades active to accept a trade (5 with a harbor)\\n    function proposeTrade(uint256 requestorId, uint256 recipientId) public {\\n        bool isOwner = mint.checkOwnership(requestorId, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n\\n        require(requestorId != recipientId, \\\"!self\\\");\\n\\n        bool isAlreadyTrading = isActiveTrade(requestorId, recipientId);\\n        require(!isAlreadyTrading, \\\"trade already active\\\");\\n\\n        bool isPossibleRequestor = isTradePossibleForRequestor(requestorId);\\n        bool isPossibleRecipient = isTradePossibleForRecipient(recipientId);\\n        require(isPossibleRequestor == true, \\\"!possible\\\");\\n        require(isPossibleRecipient == true, \\\"!possible\\\");\\n\\n        bool sanctioned = sen.isSanctioned(requestorId, recipientId);\\n        require(sanctioned == false, \\\"trade is sanctioned\\\");\\n\\n        idToProposedTradingPartners[recipientId].push(requestorId);\\n        idToProposedTradingPartners[requestorId].push(recipientId);\\n\\n        emit TradeProposed(requestorId, recipientId);\\n    }\\n\\n    ///@dev this is a public function but is only callable from the nation owner\\n    ///@notice this function will allow a nation owner to cancel a proposed trande\\n    ///@param nationId this is the nation Id of the nation owner looking to cancel a proposed trade\\n    ///@param partnerId this is the nation Id of the proposed trading partner that is getting the proposed trade cancelled\\n    ///@dev this function will revert if the partnerId parameter is not a current proposed trade\\n    function cancelProposedTrade(uint256 nationId, uint256 partnerId) public {\\n        bool isOwner = mint.checkOwnership(nationId, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        uint256[] storage nationProposedTrades = idToProposedTradingPartners[\\n            nationId\\n        ];\\n        uint256[] storage partnerProposedTrades = idToProposedTradingPartners[\\n            partnerId\\n        ];\\n        for (uint i = 0; i < nationProposedTrades.length; i++) {\\n            if (nationProposedTrades[i] == partnerId) {\\n                nationProposedTrades[i] = nationProposedTrades[\\n                    nationProposedTrades.length - 1\\n                ];\\n                nationProposedTrades.pop();\\n                for (uint j = 0; j < partnerProposedTrades.length; j++) {\\n                    if (partnerProposedTrades[j] == nationId) {\\n                        partnerProposedTrades[j] = partnerProposedTrades[\\n                            partnerProposedTrades.length - 1\\n                        ];\\n                        partnerProposedTrades.pop();\\n                    }\\n                }\\n            } else {\\n                revert(\\\"No proposed trade with this partner\\\");\\n            }\\n        }\\n        emit TradeProposalCancelled(nationId, partnerId);\\n    }\\n\\n    ///@dev this is a public view function that will return a nations proposed trading partners\\n    ///@notice this function will return a nation's proposed trading partners\\n    ///@return uint256 is an array of the nation id's of a nations proposed trading partners\\n    ///@param id is the nation id of the nation being queried\\n    function getProposedTradingPartners(\\n        uint256 id\\n    ) public view returns (uint256[] memory) {\\n        return idToProposedTradingPartners[id];\\n    }\\n\\n    ///@dev a trade proposal will only go through if a proposal is possible for the requestor and recipient\\n    ///@dev this function is an internal function that will return a boolean true if the proposed trade is possible for the requestor\\n    ///@notice this function will return true if the trade is possible for the requestor\\n    ///@notice a requestor can have a maximum of 3 active and proposed trades (4 with a harbor) in order to propose a trade\\n    ///@return bool is true if the trade is possible for the requestor\\n    function isTradePossibleForRequestor(\\n        uint256 requestorId\\n    ) internal view returns (bool) {\\n        uint256[] memory requestorTradeAgreements = idToTradingPartners[\\n            requestorId\\n        ];\\n        uint256[]\\n            memory proposedTradesOfRequestor = idToProposedTradingPartners[\\n                requestorId\\n            ];\\n        uint256 requestorTradesActive = requestorTradeAgreements.length;\\n        uint256 requestorProposedTrades = proposedTradesOfRequestor.length;\\n        uint256 requestorTotalTrades = requestorTradesActive +\\n            requestorProposedTrades;\\n        uint256 requestorHarborAmount = ImprovementsContract2(improvements2)\\n            .getHarborCount(requestorId);\\n        uint256 requestorMaxTrades = 3;\\n        if (requestorHarborAmount > 0) {\\n            requestorMaxTrades = 4;\\n        }\\n        if (requestorMaxTrades >= (requestorTotalTrades + 1)) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    ///@dev a trade proposal will only go through if a proposal is possible for the requestor and recipient\\n    ///@dev this function is an internal function that will return a boolean true if the proposed trade is possible for the recipient\\n    ///@notice this function will return true if the trade is possible for the recipient\\n    ///@notice a recipient can have a maximum of 4 active and proposed trades (5 with a harbor) in order to have a trade proposed\\n    ///@return bool is true if the trade is possible for the recipient\\n    function isTradePossibleForRecipient(\\n        uint256 recipientId\\n    ) internal view returns (bool) {\\n        uint256[] memory recipientTradeAgreements = idToTradingPartners[\\n            recipientId\\n        ];\\n        uint256[]\\n            memory proposedTradesOfRecipient = idToProposedTradingPartners[\\n                recipientId\\n            ];\\n        uint256 recipientTradesActive = recipientTradeAgreements.length;\\n        uint256 recipientProposedTrades = proposedTradesOfRecipient.length;\\n        uint256 recipientTotalTrades = recipientTradesActive +\\n            recipientProposedTrades;\\n        uint256 recipientHarborAmount = ImprovementsContract2(improvements2)\\n            .getHarborCount(recipientId);\\n        uint256 recipientMaxTrades = 4;\\n        if (recipientHarborAmount > 0) {\\n            recipientMaxTrades = 5;\\n        }\\n        if (recipientMaxTrades >= (recipientTotalTrades + 1)) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    ///@dev this is a public function callable from the recipient of a trade proposal that will allow a nation to accept a trade proposal\\n    ///@notice this function will allow the recipient of a trade proposal to accept a trade proposal\\n    ///@param recipientId is the nation id of the recipient of the trade proposal\\n    ///@param requestorId is the nation id of the requestor of the trade proposal\\n    ///@notice once a trade proposal is accepted the requesting nations and recipient nations resources will be reset to reflect the additional resources\\n    function fulfillTradingPartner(\\n        uint256 recipientId,\\n        uint256 requestorId\\n    ) public {\\n        bool isOwner = mint.checkOwnership(recipientId, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        bool isProposed = isProposedTrade(recipientId, requestorId);\\n        require(isProposed == true, \\\"Not an active trade proposal\\\");\\n        uint256[]\\n            storage proposedTradesOfRequestor = idToProposedTradingPartners[\\n                requestorId\\n            ];\\n        bool sanctioned = sen.isSanctioned(recipientId, requestorId);\\n        require(sanctioned == false, \\\"trade is sanctioned\\\");\\n        for (uint256 i = 0; i < proposedTradesOfRequestor.length; i++) {\\n            if (proposedTradesOfRequestor[i] == recipientId) {\\n                proposedTradesOfRequestor[i] = proposedTradesOfRequestor[\\n                    proposedTradesOfRequestor.length - 1\\n                ];\\n                proposedTradesOfRequestor.pop();\\n            }\\n        }\\n        uint256[]\\n            storage proposedTradesOfRecipient = idToProposedTradingPartners[\\n                recipientId\\n            ];\\n        for (uint256 i = 0; i < proposedTradesOfRecipient.length; i++) {\\n            if (proposedTradesOfRecipient[i] == requestorId) {\\n                proposedTradesOfRecipient[i] = proposedTradesOfRecipient[\\n                    proposedTradesOfRecipient.length - 1\\n                ];\\n                proposedTradesOfRecipient.pop();\\n            }\\n        }\\n        uint256[] storage recipientTradeAgreements = idToTradingPartners[\\n            recipientId\\n        ];\\n        recipientTradeAgreements.push(requestorId);\\n        uint256[] storage requestorTradeAgreements = idToTradingPartners[\\n            requestorId\\n        ];\\n        requestorTradeAgreements.push(recipientId);\\n        setResources(recipientId);\\n        setResources(requestorId);\\n        emit TradeAccepted(requestorId, recipientId);\\n    }\\n\\n    ///@dev this is a public function callable by either member of an active trade that will remove the active trade\\n    ///@notice this function will allow a trade agreement to be terminated\\n    ///@param nationId is the nation id of the nation initializing the trade cancellation\\n    ///@param partnerId is the nation id of the partner nation in the trade agreement being cancelled\\n    function removeTradingPartner(uint256 nationId, uint256 partnerId) public {\\n        bool isOwner = mint.checkOwnership(nationId, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        bool isActive = isActiveTrade(nationId, partnerId);\\n        require(isActive == true, \\\"this is not an active trade\\\");\\n        for (uint256 i = 0; i < idToTradingPartners[nationId].length; i++) {\\n            if (idToTradingPartners[nationId][i] == partnerId) {\\n                idToTradingPartners[nationId][i] = idToTradingPartners[\\n                    nationId\\n                ][idToTradingPartners[nationId].length - 1];\\n                idToTradingPartners[nationId].pop();\\n            }\\n        }\\n        for (uint256 i = 0; i < idToTradingPartners[partnerId].length; i++) {\\n            if (idToTradingPartners[partnerId][i] == nationId) {\\n                idToTradingPartners[partnerId][i] = idToTradingPartners[\\n                    partnerId\\n                ][idToTradingPartners[partnerId].length - 1];\\n                idToTradingPartners[partnerId].pop();\\n            }\\n        }\\n        setResources(nationId);\\n        setResources(partnerId);\\n        emit TradeCancelled(nationId, partnerId);\\n    }\\n\\n    ///@dev this is a public view function that will take two trading partners in the parameters and return a boolean value\\n    ///@dev this function will return true if there is a proposed trade between the two nation id's being passed in\\n    ///@param recipientId is the nation id of the first nation being queried\\n    ///@param requestorId is the nation id of the second nation being queried\\n    ///@return isProposed will be true if there is an active proposal between the two nations\\n    function isProposedTrade(\\n        uint256 recipientId,\\n        uint256 requestorId\\n    ) public view returns (bool isProposed) {\\n        uint256[]\\n            memory proposedTradesOfRecipient = idToProposedTradingPartners[\\n                recipientId\\n            ];\\n        for (uint256 i = 0; i < proposedTradesOfRecipient.length; i++) {\\n            if (proposedTradesOfRecipient[i] == requestorId) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    ///@dev this is a public view function that will take two trading partners in the parameters and return a boolean value\\n    ///@dev this function will return true if there is an active trade between the two nation id's being passed in\\n    ///@param country1Id is the nation id of the first nation being queried\\n    ///@param country2Id is the nation id of the second nation being queried\\n    ///@return isActive will be true if there is an active trae between the two nations\\n    function isActiveTrade(\\n        uint256 country1Id,\\n        uint256 country2Id\\n    ) public view returns (bool isActive) {\\n        uint256[] memory activeTrades = idToTradingPartners[country1Id];\\n        for (uint256 i = 0; i < activeTrades.length; i++) {\\n            if (activeTrades[i] == country2Id) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    ///@dev this is a public view function that will return the 2 resources for a given nation\\n    ///@notice this function will return a given nations 2 randomly selected resources\\n    ///@param partnerId this is the nation id of the nation being queried\\n    ///@return uint256 is the numerical representation of the nations resources\\n    function getResourcesFromTradingPartner(\\n        uint256 partnerId\\n    ) public view returns (uint256, uint256) {\\n        uint256[] memory partnerResources = idToPlayerResources[partnerId];\\n        uint256 resource1 = partnerResources[0];\\n        uint256 resource2 = partnerResources[1];\\n        return (resource1, resource2);\\n    }\\n\\n    ///@dev this is a public view function that will retrun a boolean value of true if a nation has access to the aluminium resource\\n    ///@notice this function will return a boolean value of true if a nation has access to the aluminium resource\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool this value will be true if the nation has the aluminium resource\\n    function viewAluminium(uint256 id) public view returns (bool) {\\n        bool isAluminium = idToResources1[id].aluminium;\\n        return isAluminium;\\n    }\\n\\n    ///@dev this is a public view function that will retrun a boolean value of true if a nation has access to the cattle resource\\n    ///@notice this function will return a boolean value of true if a nation has access to the cattle resource\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool this value will be true if the nation has the cattle resource\\n    function viewCattle(uint256 id) public view returns (bool) {\\n        bool isCattle = idToResources1[id].cattle;\\n        return isCattle;\\n    }\\n\\n    ///@dev this is a public view function that will retrun a boolean value of true if a nation has access to the coal resource\\n    ///@notice this function will return a boolean value of true if a nation has access to the coal resource\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool this value will be true if the nation has the coal resource\\n    function viewCoal(uint256 id) public view returns (bool) {\\n        bool isCoal = idToResources1[id].coal;\\n        return isCoal;\\n    }\\n\\n    ///@dev this is a public view function that will retrun a boolean value of true if a nation has access to the fish resource\\n    ///@notice this function will return a boolean value of true if a nation has access to the fish resource\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool this value will be true if the nation has the fish resource\\n    function viewFish(uint256 id) public view returns (bool) {\\n        bool isFish = idToResources1[id].fish;\\n        return isFish;\\n    }\\n\\n    ///@dev this is a public view function that will retrun a boolean value of true if a nation has access to the furs resource\\n    ///@notice this function will return a boolean value of true if a nation has access to the furs resource\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool this value will be true if the nation has the furs resource\\n    function viewFurs(uint256 id) public view returns (bool) {\\n        bool isFurs = idToResources1[id].furs;\\n        return isFurs;\\n    }\\n\\n    ///@dev this is a public view function that will retrun a boolean value of true if a nation has access to the gems resource\\n    ///@notice this function will return a boolean value of true if a nation has access to the gems resource\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool this value will be true if the nation has the gems resource\\n    function viewGems(uint256 id) public view returns (bool) {\\n        bool isGems = idToResources1[id].gems;\\n        return isGems;\\n    }\\n\\n    ///@dev this is a public view function that will retrun a boolean value of true if a nation has access to the gold resource\\n    ///@notice this function will return a boolean value of true if a nation has access to the gold resource\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool this value will be true if the nation has the gold resource\\n    function viewGold(uint256 id) public view returns (bool) {\\n        bool isGold = idToResources1[id].gold;\\n        return isGold;\\n    }\\n\\n    ///@dev this is a public view function that will retrun a boolean value of true if a nation has access to the iron resource\\n    ///@notice this function will return a boolean value of true if a nation has access to the iron resource\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool this value will be true if the nation has the iron resource\\n    function viewIron(uint256 id) public view returns (bool) {\\n        bool isIron = idToResources1[id].iron;\\n        return isIron;\\n    }\\n\\n    ///@dev this is a public view function that will retrun a boolean value of true if a nation has access to the lead resource\\n    ///@notice this function will return a boolean value of true if a nation has access to the lead resource\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool this value will be true if the nation has the lead resource\\n    function viewLead(uint256 id) public view returns (bool) {\\n        bool isLead = idToResources1[id].lead;\\n        return isLead;\\n    }\\n\\n    ///@dev this is a public view function that will retrun a boolean value of true if a nation has access to the lumber resource\\n    ///@notice this function will return a boolean value of true if a nation has access to the lumber resource\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool this value will be true if the nation has the lumber resource\\n    function viewLumber(uint256 id) public view returns (bool) {\\n        bool isLumber = idToResources1[id].lumber;\\n        return isLumber;\\n    }\\n\\n    ///@dev this is a public view function that will retrun a boolean value of true if a nation has access to the marble resource\\n    ///@notice this function will return a boolean value of true if a nation has access to the marble resource\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool this value will be true if the nation has the marble resource\\n    function viewMarble(uint256 id) public view returns (bool) {\\n        bool isMarble = idToResources1[id].marble;\\n        return isMarble;\\n    }\\n\\n    ///@dev this is a public view function that will retrun a boolean value of true if a nation has access to the oil resource\\n    ///@notice this function will return a boolean value of true if a nation has access to the oil resource\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool this value will be true if the nation has the oil resource\\n    function viewOil(uint256 id) public view returns (bool) {\\n        bool isOil = idToResources2[id].oil;\\n        return isOil;\\n    }\\n\\n    ///@dev this is a public view function that will retrun a boolean value of true if a nation has access to the pigs resource\\n    ///@notice this function will return a boolean value of true if a nation has access to the pigs resource\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool this value will be true if the nation has the pigs resource\\n    function viewPigs(uint256 id) public view returns (bool) {\\n        bool isPigs = idToResources2[id].pigs;\\n        return isPigs;\\n    }\\n\\n    ///@dev this is a public view function that will retrun a boolean value of true if a nation has access to the rubber resource\\n    ///@notice this function will return a boolean value of true if a nation has access to the rubber resource\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool this value will be true if the nation has the rubber resource\\n    function viewRubber(uint256 id) public view returns (bool) {\\n        bool isRubber = idToResources2[id].rubber;\\n        return isRubber;\\n    }\\n\\n    ///@dev this is a public view function that will retrun a boolean value of true if a nation has access to the silver resource\\n    ///@notice this function will return a boolean value of true if a nation has access to the silver resource\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool this value will be true if the nation has the silver resource\\n    function viewSilver(uint256 id) public view returns (bool) {\\n        bool isSilver = idToResources2[id].silver;\\n        return isSilver;\\n    }\\n\\n    ///@dev this is a public view function that will retrun a boolean value of true if a nation has access to the spices resource\\n    ///@notice this function will return a boolean value of true if a nation has access to the spices resource\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool this value will be true if the nation has the spices resource\\n    function viewSpices(uint256 id) public view returns (bool) {\\n        bool isSpices = idToResources2[id].spices;\\n        return isSpices;\\n    }\\n\\n    ///@dev this is a public view function that will retrun a boolean value of true if a nation has access to the sugar resource\\n    ///@notice this function will return a boolean value of true if a nation has access to the sugar resource\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool this value will be true if the nation has the sugar resource\\n    function viewSugar(uint256 id) public view returns (bool) {\\n        bool isSugar = idToResources2[id].sugar;\\n        return isSugar;\\n    }\\n\\n    ///@dev this is a public view function that will retrun a boolean value of true if a nation has access to the uranium resource\\n    ///@notice this function will return a boolean value of true if a nation has access to the uranium resource\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool this value will be true if the nation has the uranium resource\\n    function viewUranium(uint256 id) public view returns (bool) {\\n        bool isUranium = idToResources2[id].uranium;\\n        return isUranium;\\n    }\\n\\n    ///@dev this is a public view function that will retrun a boolean value of true if a nation has access to the water resource\\n    ///@notice this function will return a boolean value of true if a nation has access to the water resource\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool this value will be true if the nation has the water resource\\n    function viewWater(uint256 id) public view returns (bool) {\\n        bool isWater = idToResources2[id].water;\\n        return isWater;\\n    }\\n\\n    ///@dev this is a public view function that will retrun a boolean value of true if a nation has access to the wheat resource\\n    ///@notice this function will return a boolean value of true if a nation has access to the wheat resource\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool this value will be true if the nation has the wheat resource\\n    function viewWheat(uint256 id) public view returns (bool) {\\n        bool isWheat = idToResources2[id].wheat;\\n        return isWheat;\\n    }\\n\\n    ///@dev this is a public view function that will retrun a boolean value of true if a nation has access to the wine resource\\n    ///@notice this function will return a boolean value of true if a nation has access to the wine resource\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool this value will be true if the nation has the wine resource\\n    function viewWine(uint256 id) public view returns (bool) {\\n        bool isWine = idToResources2[id].wine;\\n        return isWine;\\n    }\\n\\n    ///@dev this is a public view function that will return an array of a natons 2 resources\\n    ///@notice this function will return an array of a nations 2 selected resources\\n    ///@param id is the nation id of the nation being queried\\n    ///@return uint256 is an array of the players resources for the nation id passed into the function\\n    function getPlayerResources(\\n        uint256 id\\n    ) public view returns (uint256[] memory) {\\n        uint256[] memory resources = idToPlayerResources[id];\\n        return resources;\\n    }\\n\\n    ///@dev this is a public view function that will return an array with a nations trading partners\\n    ///@notice this function will return a given nation's trading partners\\n    ///@param id is the nation id of the nation being queried\\n    ///@return uint256 is an array of the nation id's of a nations trading pertners\\n    function getTradingPartners(\\n        uint256 id\\n    ) public view returns (uint256[] memory) {\\n        uint256[] memory partners = idToTradingPartners[id];\\n        return partners;\\n    }\\n\\n    modifier onlySenateContract() {\\n        require(\\n            msg.sender == senate,\\n            \\\"this function is only callable from the senate contract\\\"\\n        );\\n        _;\\n    }\\n\\n    function removeTradingPartnersFromSanction(\\n        uint256 idSanctioned,\\n        uint256 sanctionTeam\\n    ) public onlySenateContract {\\n        uint256[] memory partners = idToTradingPartners[idSanctioned];\\n\\n        for (uint256 i = 0; i < partners.length; i++) {\\n            uint256 partnerId = partners[i];\\n            uint256 partnerTeam = params.getTeam(partnerId);\\n            if (partnerTeam == sanctionTeam) {\\n                for (\\n                    uint256 j = 0;\\n                    j < idToTradingPartners[idSanctioned].length;\\n                    j++\\n                ) {\\n                    if (idToTradingPartners[idSanctioned][j] == partnerId) {\\n                        idToTradingPartners[idSanctioned][\\n                            j\\n                        ] = idToTradingPartners[idSanctioned][\\n                            idToTradingPartners[idSanctioned].length - 1\\n                        ];\\n                        idToTradingPartners[idSanctioned].pop();\\n                    }\\n                }\\n                for (\\n                    uint256 k = 0;\\n                    k < idToTradingPartners[partnerId].length;\\n                    k++\\n                ) {\\n                    if (idToTradingPartners[partnerId][k] == idSanctioned) {\\n                        idToTradingPartners[partnerId][k] = idToTradingPartners[\\n                            partnerId\\n                        ][idToTradingPartners[partnerId].length - 1];\\n                        idToTradingPartners[partnerId].pop();\\n                        setResources(partnerId);\\n                    }\\n                }\\n            }\\n        }\\n        setResources(idSanctioned);\\n    }\\n\\n    modifier onlyTechMarket() {\\n        require(\\n            msg.sender == techMkt,\\n            \\\"function only callable from tech market\\\"\\n        );\\n        _;\\n    }\\n\\n    function triggerForResources(uint256 id) external onlyTechMarket {\\n        setResources(id);\\n    }\\n}\\n\\n///@title BonusResourcesContract\\n///@author OxSnosh\\n///@notice this contract will keep track of a nations bonus resources\\n///@dev this contract inherits from oepnzeppelin ownable\\ncontract BonusResourcesContract is Ownable {\\n    address public infrastructure;\\n    address public improvements2;\\n    address public countryMinter;\\n    address public resources;\\n    address public crime;\\n\\n    CountryMinter mint;\\n    ResourcesContract res;\\n    CrimeContract crim;\\n\\n    struct BonusResources {\\n        bool initialized;\\n        bool beer;\\n        //beer\\n        //requires Water, Wheat, Lumber, Aluminium\\n        //Increases population happiness + 2.\\n        bool steel;\\n        //steel\\n        //reduces infrastructure cost -2%.\\n        //Lowers all vessel purchase costs -15%\\n        //requires Coal and Iron\\n        bool construction;\\n        //construction\\n        //Reduces infrastructure cost -5% and\\n        //raises the aircraft limit +10.\\n        //requires Lumber, Iron, Marble, Aluminium, tech > 5\\n        bool fastFood;\\n        //fast food\\n        //Increases population happiness + 2.\\n        //requires Cattle, Sugar, Spices, Pigs\\n        bool fineJewelry;\\n        //fine jewelry\\n        //Increases population happiness + 3.\\n        //requires Gold, Silver, Gems, Coal\\n        bool scholars;\\n        //scholars\\n        //increases population income +$3.00\\n        //requires literacy rate > 90%, lumber, lead\\n        bool asphalt;\\n        //asphalt\\n        //Lowers infrastructure upkeep cost -5%.\\n        //requires Construction, Oil, Rubber\\n        bool automobiles;\\n        //automobiles\\n        //Increases population happiness +3.\\n        //requires Asphalt, Steel\\n        bool affluentPopulation;\\n        //affluent population\\n        //Increases number of citizens +5%.\\n        //requires fineJewelry, Fish, Furs, Wine\\n        bool microchips;\\n        //microchips\\n        //reduces tech cost -8%\\n        //increases population happiness +2\\n        //lowers frigate, destroyer, submarine, aircraft carrier upkeep cost -10%\\n        //requires Gold, Lead, Oil, tech > 10\\n        bool radiationCleanup;\\n        //radiation cleanup\\n        //reduces nuclear anarchy effects by 1 day\\n        //Improves a nation's environment by 1\\n        //Reduces global radiation for your nation by 50%\\n        //requires Construction, Microchips, Steel and Technology > 15\\n    }\\n\\n    mapping(uint256 => BonusResources) public idToBonusResources;\\n\\n    modifier onlyCountryMinter() {\\n        require(\\n            msg.sender == countryMinter,\\n            \\\"this function is only callable from the country minter contract\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyResources() {\\n        require(\\n            msg.sender == resources,\\n            \\\"function only callable from resources contract\\\"\\n        );\\n        _;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings(\\n        address _infrastructure,\\n        address _countryMinter,\\n        address _resources,\\n        address _crime\\n    ) public onlyOwner {\\n        infrastructure = _infrastructure;\\n        countryMinter = _countryMinter;\\n        mint = CountryMinter(_countryMinter);\\n        resources = _resources;\\n        res = ResourcesContract(_resources);\\n        crime = _crime;\\n        crim = CrimeContract(_crime);\\n    }\\n\\n    ///@dev this is a public function that is only callable from the country minter contract when a nation is minted\\n    ///@dev this function will allow a nation to store the bonus resources they have access to\\n    ///@notice this function will allow a nation to store the bonus resources they have access to\\n    ///@param id is the nation id of the nation being minted\\n    function generateBonusResources(uint256 id) public onlyCountryMinter {\\n        require(\\n            idToBonusResources[id].initialized == false,\\n            \\\"bonus resources already initialized\\\"\\n        );\\n        BonusResources memory newBonusResources = BonusResources(\\n            true,\\n            false,\\n            false,\\n            false,\\n            false,\\n            false,\\n            false,\\n            false,\\n            false,\\n            false,\\n            false,\\n            false\\n        );\\n        idToBonusResources[id] = newBonusResources;\\n    }\\n\\n    ///@dev this is an internal function only callable from this contract\\n    ///@notice bonus resources are certain resources that you can get credit for only hen you have the correct mix of primary resources and parameters\\n    ///@param id is the nation id of the nation whose resources are being reset\\n    function setBonusResources(uint256 id) public onlyResources {\\n        idToBonusResources[id].affluentPopulation = false;\\n        idToBonusResources[id].asphalt = false;\\n        idToBonusResources[id].automobiles = false;\\n        idToBonusResources[id].beer = false;\\n        idToBonusResources[id].construction = false;\\n        idToBonusResources[id].fastFood = false;\\n        idToBonusResources[id].fineJewelry = false;\\n        idToBonusResources[id].microchips = false;\\n        idToBonusResources[id].radiationCleanup = false;\\n        idToBonusResources[id].scholars = false;\\n        idToBonusResources[id].steel = false;\\n        //check for beer (aluminium, luber, water, wheat)\\n        bool beer = checkBeer(id);\\n        if (beer) {\\n            idToBonusResources[id].beer = true;\\n        }\\n        //check for steel (coal, iron)\\n        bool steel = checkSteel(id);\\n        if (steel) {\\n            idToBonusResources[id].steel = true;\\n        }\\n        //construction (lumber, iron, marble, aluminum)\\n        bool construction = checkConstruction(id);\\n        if (construction) {\\n            idToBonusResources[id].construction = true;\\n        }\\n        //fast food (cattle sugar spices pigs)\\n        bool fastFood = checkFastFood(id);\\n        if (fastFood) {\\n            idToBonusResources[id].fastFood = true;\\n        }\\n        //fine jewelry (gold silver gems coal)\\n        bool fineJewelry = checkFineJewelry(id);\\n        if (fineJewelry) {\\n            idToBonusResources[id].fineJewelry = true;\\n        }\\n        //scholars (lumber, lead, literacy >90%)\\n        bool scholars = checkScholars(id);\\n        if (scholars) {\\n            idToBonusResources[id].scholars = true;\\n        }\\n        //asphalt (construction, oil, rubber)\\n        bool asphalt = checkAsphalt(id);\\n        if (asphalt) {\\n            idToBonusResources[id].asphalt = true;\\n        }\\n        //automobiles (asphalt, Steel)\\n        bool automobiles = checkAutomobiles(id);\\n        if (automobiles) {\\n            idToBonusResources[id].automobiles = true;\\n        }\\n        //affluent population (fine jewelry fish furs wine)\\n        bool affluentPopulation = checkAffluentPopulation(id);\\n        if (affluentPopulation) {\\n            idToBonusResources[id].affluentPopulation = true;\\n        }\\n        setAdditionalBonusResources(id);\\n    }\\n\\n    function setAdditionalBonusResources(uint256 id) internal {\\n        //microchips (Gold, Lead, Oil, tech > 10)\\n        uint256 techAmount = InfrastructureContract(infrastructure)\\n            .getTechnologyCount(id);\\n        bool microchips = checkMicrochips(id);\\n        if (techAmount >= 10 && microchips) {\\n            idToBonusResources[id].microchips = true;\\n        }\\n        //radiation cleanup (Construction, Microchips, Steel and Technology > 15)\\n        bool radiationCleanup = checkRadiationCleanup(id);\\n        if (techAmount >= 10 && radiationCleanup) {\\n            idToBonusResources[id].radiationCleanup = true;\\n        }\\n    }\\n\\n    function checkBeer(uint256 id) public view returns (bool) {\\n        bool aluminium = res.viewAluminium(id);\\n        bool lumber = res.viewLumber(id);\\n        bool water = res.viewWater(id);\\n        bool wheat = res.viewWheat(id);\\n        if (aluminium && lumber && water && wheat) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function checkSteel(uint256 id) public view returns (bool) {\\n        bool iron = res.viewIron(id);\\n        bool coal = res.viewCoal(id);\\n        if (iron && coal) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function checkConstruction(uint256 id) public view returns (bool) {\\n        bool aluminium = res.viewAluminium(id);\\n        bool iron = res.viewIron(id);\\n        bool lumber = res.viewLumber(id);\\n        bool marble = res.viewMarble(id);\\n        if (aluminium && iron && lumber && marble) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function checkFastFood(uint256 id) public view returns (bool) {\\n        bool cattle = res.viewCattle(id);\\n        bool sugar = res.viewSugar(id);\\n        bool spices = res.viewSpices(id);\\n        bool pigs = res.viewPigs(id);\\n        if (cattle && sugar && spices && pigs) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function checkFineJewelry(uint256 id) public view returns (bool) {\\n        bool gold = res.viewGold(id);\\n        bool silver = res.viewSilver(id);\\n        bool gems = res.viewGems(id);\\n        bool coal = res.viewCoal(id);\\n        if (gold && silver && gems && coal) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function checkScholars(uint256 id) public view returns (bool) {\\n        bool lumber = res.viewLumber(id);\\n        bool lead = res.viewLead(id);\\n        uint256 literacyPercentage = crim.getLiteracy(id);\\n        if (lumber && lead && literacyPercentage >= 90) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function checkAsphalt(uint256 id) public view returns (bool) {\\n        bool construction = idToBonusResources[id].construction;\\n        bool oil = res.viewOil(id);\\n        bool rubber = res.viewRubber(id);\\n        if (construction && oil && rubber) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function checkAutomobiles(uint256 id) public view returns (bool) {\\n        bool asphalt = idToBonusResources[id].asphalt;\\n        bool steel = idToBonusResources[id].steel;\\n        if (asphalt && steel) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function checkAffluentPopulation(uint256 id) public view returns (bool) {\\n        bool fineJewelry = idToBonusResources[id].fineJewelry;\\n        bool fish = res.viewFish(id);\\n        bool furs = res.viewFurs(id);\\n        bool wine = res.viewWine(id);\\n        if (fineJewelry && fish && furs && wine) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function checkMicrochips(uint256 id) public view returns (bool) {\\n        bool gold = res.viewGold(id);\\n        bool lead = res.viewLead(id);\\n        bool oil = res.viewOil(id);\\n        if (gold && lead && oil) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function checkRadiationCleanup(uint256 id) public view returns (bool) {\\n        bool construction = idToBonusResources[id].construction;\\n        bool microchips = idToBonusResources[id].microchips;\\n        bool steel = idToBonusResources[id].steel;\\n        if (construction && microchips && steel) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    ///@dev this is a public view function that will retrun a boolean value of true if a nation has access to the affluent population resource\\n    ///@notice this function will return a boolean value of true if a nation has access to the affluent population resource\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool this value will be true if the nation has the affluent population resource\\n    function viewAffluentPopulation(uint256 id) public view returns (bool) {\\n        bool isAffluentPopulation = idToBonusResources[id].affluentPopulation;\\n        return isAffluentPopulation;\\n    }\\n\\n    ///@dev this is a public view function that will retrun a boolean value of true if a nation has access to the asphalt resource\\n    ///@notice this function will return a boolean value of true if a nation has access to the asphalt resource\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool this value will be true if the nation has the asphalt resource\\n    function viewAsphalt(uint256 id) public view returns (bool) {\\n        bool isAsphalt = idToBonusResources[id].asphalt;\\n        return isAsphalt;\\n    }\\n\\n    ///@dev this is a public view function that will retrun a boolean value of true if a nation has access to the automobiles resource\\n    ///@notice this function will return a boolean value of true if a nation has access to the automobiles resource\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool this value will be true if the nation has the automobiles resource\\n    function viewAutomobiles(uint256 id) public view returns (bool) {\\n        bool isAutomobiles = idToBonusResources[id].automobiles;\\n        return isAutomobiles;\\n    }\\n\\n    ///@dev this is a public view function that will retrun a boolean value of true if a nation has access to the beer resource\\n    ///@notice this function will return a boolean value of true if a nation has access to the beer resource\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool this value will be true if the nation has the beer resource\\n    function viewBeer(uint256 id) public view returns (bool) {\\n        bool isBeer = idToBonusResources[id].beer;\\n        return isBeer;\\n    }\\n\\n    ///@dev this is a public view function that will retrun a boolean value of true if a nation has access to the construction resource\\n    ///@notice this function will return a boolean value of true if a nation has access to the construction resource\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool this value will be true if the nation has the construction resource\\n    function viewConstruction(uint256 id) public view returns (bool) {\\n        bool isConstruction = idToBonusResources[id].construction;\\n        return isConstruction;\\n    }\\n\\n    ///@dev this is a public view function that will retrun a boolean value of true if a nation has access to the fast food resource\\n    ///@notice this function will return a boolean value of true if a nation has access to the fast food resource\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool this value will be true if the nation has the fast food resource\\n    function viewFastFood(uint256 id) public view returns (bool) {\\n        bool isFastFood = idToBonusResources[id].fastFood;\\n        return isFastFood;\\n    }\\n\\n    ///@dev this is a public view function that will retrun a boolean value of true if a nation has access to the fine jewelry resource\\n    ///@notice this function will return a boolean value of true if a nation has access to the fine jewelry resource\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool this value will be true if the nation has the fine jewelry resource\\n    function viewFineJewelry(uint256 id) public view returns (bool) {\\n        bool isFineJewelry = idToBonusResources[id].fineJewelry;\\n        return isFineJewelry;\\n    }\\n\\n    ///@dev this is a public view function that will retrun a boolean value of true if a nation has access to the microships resource\\n    ///@notice this function will return a boolean value of true if a nation has access to the microships resource\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool this value will be true if the nation has the microchips resource\\n    function viewMicrochips(uint256 id) public view returns (bool) {\\n        bool isMicrochips = idToBonusResources[id].microchips;\\n        return isMicrochips;\\n    }\\n\\n    ///@dev this is a public view function that will retrun a boolean value of true if a nation has access to the radiation cleanup resource\\n    ///@notice this function will return a boolean value of true if a nation has access to the radiation cleanup resource\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool this value will be true if the nation has the radiation cleanup resource\\n    function viewRadiationCleanup(uint256 id) public view returns (bool) {\\n        bool isRadiationCleanup = idToBonusResources[id].radiationCleanup;\\n        return isRadiationCleanup;\\n    }\\n\\n    ///@dev this is a public view function that will retrun a boolean value of true if a nation has access to the scholars resource\\n    ///@notice this function will return a boolean value of true if a nation has access to the scholars resource\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool this value will be true if the nation has the scholars resource\\n    function viewScholars(uint256 id) public view returns (bool) {\\n        bool isScholars = idToBonusResources[id].scholars;\\n        return isScholars;\\n    }\\n\\n    ///@dev this is a public view function that will retrun a boolean value of true if a nation has access to the steel resource\\n    ///@notice this function will return a boolean value of true if a nation has access to the steel resource\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool this value will be true if the nation has the steel resource\\n    function viewSteel(uint256 id) public view returns (bool) {\\n        bool isSteel = idToBonusResources[id].steel;\\n        return isSteel;\\n    }\\n}\\n\",\"keccak256\":\"0x324bd4b50900170c6c047a48bed9932bf5a670d2969afe19ab49ac0635933d97\",\"license\":\"BUSL-1.1\"},\"contracts/Senate.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"./CountryParameters.sol\\\";\\nimport \\\"./Wonders.sol\\\";\\nimport \\\"./CountryMinter.sol\\\";\\nimport \\\"./KeeperFile.sol\\\";\\nimport \\\"./Resources.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n///@title SenateContract\\n///@author OxSnosh\\n///@notice this contract will allow nation owners to vote for team senators\\n///@notice team senators will be able to sanction nations from trading with trading partners on the same team\\n///@dev this contract inherits from the openzeppelin ownable contract\\ncontract SenateContract is Ownable {\\n\\n    uint256 public epoch = 1;\\n    uint256 public interval = 28;\\n    uint256 maximumSanctions = 200;\\n    \\n    uint256 public dayOfLastElection;\\n\\n    address public countryMinter;\\n    address public parameters;\\n    address public wonders3;\\n    address public keeper;\\n    address public resources;\\n\\n    WondersContract3 won3;\\n    CountryMinter mint;\\n    KeeperContract keep;\\n    CountryParametersContract params;\\n    ResourcesContract res;\\n\\n    struct Voter {\\n        bool initialized;\\n        uint256 lastVoteCast;\\n        bool senator;\\n        uint256 team;\\n        uint256 dayTeamJoined;\\n        mapping(uint256 => bool) sanctionsByTeam;\\n        mapping(uint256 => uint256) dayOfSanctionByTeam;\\n    }\\n\\n    event Vote(\\n        uint256 indexed voterId,\\n        uint256 indexed team,\\n        uint256 indexed voteCastFor,\\n        address voter\\n    );\\n\\n    event Sanction(\\n        uint256 indexed senatorId,\\n        uint256 indexed team,\\n        uint256 indexed sanctionedId\\n    );\\n\\n    event SanctionLifted(\\n        uint256 indexed senatorId,\\n        uint256 indexed team,\\n        uint256 indexed sanctionedId\\n    );\\n\\n    mapping(uint256 => Voter) public idToVoter;\\n    mapping(uint256 => uint256[]) public teamToCurrentSanctions;\\n    mapping(uint256 => mapping(uint256 => uint256[])) epochToTeamToSenatorVotes;\\n    mapping(uint256 => mapping(uint256 => uint256[])) epochToTeamToWinners;\\n\\n    ///@param _interval is in days\\n    function updateInterval(uint _interval) public onlyOwner {\\n        interval = _interval;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings(\\n        address _countryMinter,\\n        address _parameters,\\n        address _wonders3,\\n        address _keeper,\\n        address _resources\\n    ) public onlyOwner {\\n        countryMinter = _countryMinter;\\n        mint = CountryMinter(_countryMinter);\\n        parameters = _parameters;\\n        wonders3 = _wonders3;\\n        won3 = WondersContract3(_wonders3);\\n        keeper = _keeper;\\n        keep = KeeperContract(_keeper);\\n        resources = _resources;\\n        res = ResourcesContract(_resources);\\n    }\\n\\n    modifier onlyCountryMinter() {\\n        require(\\n            msg.sender == countryMinter,\\n            \\\"function only callable from countryminter\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyCountryParameters() {\\n        require(\\n            msg.sender == parameters,\\n            \\\"function only callable from country paraeters contract\\\"\\n        );\\n        _;\\n    }\\n\\n    function updateCountryMinter(address newAddress) public onlyOwner {\\n        countryMinter = newAddress;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateCountryParametersContract(\\n        address newAddress\\n    ) public onlyOwner {\\n        parameters = newAddress;\\n        params = CountryParametersContract(newAddress);\\n    }\\n\\n    ///@dev this function is only callable by the country minter contract when a nation is minted\\n    ///@notice this contract will allow set up a nations voting and senate capabilities upon minting\\n    ///@param id is the nation id of the nation being minted\\n    function generateVoter(uint256 id) public onlyCountryMinter {\\n        require(\\n            idToVoter[id].initialized == false,\\n            \\\"Voter already initialized\\\"\\n        );\\n        uint256 day = keep.getGameDay();\\n        Voter storage newVoter = idToVoter[id];\\n        newVoter.initialized = true;\\n        newVoter.lastVoteCast = 0;\\n        newVoter.senator = false;\\n        newVoter.team = 0;\\n        newVoter.dayTeamJoined = day;\\n    }\\n\\n    ///@dev this function is only callable from the country parameters contract\\n    ///@notice this function will reset a nations team and votes for senator when a nation changes teams\\n    ///@param id is the nation id of the nation that changed team\\n    ///@param newTeam is the id of the new team the given nation joined\\n    function updateTeam(\\n        uint256 id,\\n        uint256 newTeam\\n    ) public onlyCountryParameters {\\n        uint256 day = keep.getGameDay();\\n        idToVoter[id].team = newTeam;\\n        idToVoter[id].dayTeamJoined = day;\\n    }\\n\\n    ///@dev this is a public function callable only by the nation owner that will allow a nation to vote for a team senator\\n    ///@notice this function will allow a nation to vote for a team senator on their team\\n    ///@notice this function will emit a Vote event when a nation votes\\n    ///@notice you can only vote for a fellow team member\\n    ///@notice you can only vote once per epoch\\n    ///@param idVoter is the nation id of the nation casting the vote\\n    ///@param idOfSenateVote is the nation id of the nation being voted for senate\\n    function voteForSenator(uint256 idVoter, uint256 idOfSenateVote) public {\\n        bool isOwner = mint.checkOwnership(idVoter, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        require(idVoter != idOfSenateVote, \\\"cannot vote for yourself\\\");\\n\\n        uint256 gameDay = keep.getGameDay();\\n        uint256 dayLastVoted = idToVoter[idVoter].lastVoteCast;\\n\\n        require(\\n            dayLastVoted <= dayOfLastElection,\\n            \\\"you already voted this epoch\\\"\\n        );\\n        require(\\n            !hasVotedThisEpoch(idVoter),\\n            \\\"nation has already voted this epoch\\\"\\n        );\\n\\n        uint256 dayTeamJoined = idToVoter[idVoter].dayTeamJoined;\\n        if (gameDay >= 30) {\\n            require(\\n                (dayTeamJoined + 30) < gameDay,\\n                \\\"you must be on a team for 30 days before voting for a senator\\\"\\n            );\\n        }\\n\\n        uint256 voterTeam = idToVoter[idVoter].team;\\n        uint256 teamOfVote = idToVoter[idOfSenateVote].team;\\n        require(\\n            teamOfVote == voterTeam,\\n            \\\"you can only vote for a fellow team member\\\"\\n        );\\n        require(\\n            epochToTeamToSenatorVotes[epoch][voterTeam].length < 15000,\\n            \\\"Vote limit reached for this team in this epoch\\\"\\n        );\\n        epochToTeamToSenatorVotes[epoch][voterTeam].push(idOfSenateVote);\\n\\n        bool lobbyists = won3.getPoliticalLobbyists(idVoter);\\n        if (lobbyists) {\\n            epochToTeamToSenatorVotes[epoch][voterTeam].push(idOfSenateVote);\\n        }\\n\\n        idToVoter[idVoter].lastVoteCast = gameDay;\\n        recordVote(idVoter);\\n\\n        emit Vote(idVoter, voterTeam, idOfSenateVote, msg.sender);\\n    }\\n\\n    mapping(uint256 => uint256) private lastVoteEpoch;\\n\\n    function hasVotedThisEpoch(uint256 idVoter) internal view returns (bool) {\\n        return lastVoteEpoch[idVoter] == epoch;\\n    }\\n\\n    function recordVote(uint256 idVoter) internal {\\n        lastVoteEpoch[idVoter] = epoch;\\n    }\\n\\n    function checkUpkeep() external view returns (bool upkeepNeeded) {\\n        uint256 gameDay = keep.getGameDay();\\n        upkeepNeeded = (gameDay - dayOfLastElection) > interval;\\n        return (upkeepNeeded);\\n    }\\n\\n    function performUpkeep() external {\\n        require(this.checkUpkeep(), \\\"Upkeep not needed\\\");\\n        uint256 gameDay = keep.getGameDay();\\n        if ((gameDay - dayOfLastElection) > interval) {\\n            for (uint256 i = 0; i <= 8; i++) {\\n                runElections(i, epoch);\\n            }\\n            epoch++;\\n            dayOfLastElection = gameDay;\\n        }\\n    }\\n\\n    uint256 orderId;\\n\\n    struct Election {\\n        uint256 team;\\n        uint256 epoch;\\n        uint256[] teamVotes;\\n        uint256[] winners;\\n        bool completed;\\n    }\\n\\n    mapping (uint256 => Election) public elections;\\n\\n    event ElectionStarted(\\n        uint256 team,\\n        uint256 epoch,\\n        uint256[] teamVotes,\\n        uint256 orderId\\n    );\\n\\n    ///@dev this is a public function that will be called from an off chain source\\n    ///@notice this function is only callable from the keeper performUpkeep()\\n    ///@notice this function will make the nations who won the team 7 election senators\\n    ///@param team this is the team for which the election is being conducted\\n    ///@param _epoch this is the epoch for which the election is occuring\\n    function runElections(\\n        uint256 team,\\n        uint256 _epoch\\n    ) internal {\\n       uint256[] memory teamVotes = epochToTeamToSenatorVotes[_epoch][team];\\n       elections[orderId] = Election({\\n            team: team,\\n            epoch: _epoch,\\n            teamVotes: teamVotes,\\n            winners: new uint256[](0),\\n            completed: false\\n        });\\n        emit ElectionStarted(\\n            team,\\n            _epoch,\\n            teamVotes,\\n            orderId\\n        );\\n        orderId++;\\n    }\\n\\n    address public oracle = 0xdB3892b0FD38D73B65a9AD2fC3920B74B2B71dfb;\\n\\n    modifier onlyOracle() {\\n        require(msg.sender == oracle, \\\"!ORACLE\\\");\\n        _;\\n    }\\n\\n    function setOracle(address _oracle) public onlyOwner {\\n        oracle = _oracle;\\n    }\\n\\n    ///@dev this is a public function that will be called from an off chain source\\n    ///@notice this function is only callable from the keeper performUpkeep()\\n    ///@notice this function will be called when the election is complete\\n    ///@param _orderId is the request id of the election\\n    ///@param _winners is the winners of the election\\n    ///@notice this function will set the winners of the election as senators\\n    ///@notice this function will set the previous senators to false\\n    function completeElection(\\n        uint256 _orderId,\\n        uint256[] memory _winners\\n    ) public onlyOracle {\\n        require(\\n            elections[_orderId].completed == false, \\\"election already completed\\\"\\n        );\\n        uint256 team = elections[_orderId].team;\\n        uint256 _epoch = elections[_orderId].epoch;\\n        elections[_orderId].winners = _winners;\\n        elections[_orderId].completed = true;\\n        uint256[] memory currentSenators = epochToTeamToWinners[_epoch - 1][team];\\n        for (uint i = 0; i < currentSenators.length; i++) {\\n            idToVoter[currentSenators[i]].senator = false;\\n        }\\n        for (uint256 i = 0; i < _winners.length; i++) {\\n            idToVoter[_winners[i]].senator = true;\\n        }\\n        epochToTeamToWinners[_epoch][team] = _winners;\\n    }\\n\\n    ///@dev this is a public function that can only be called by the contract owner\\n    ///@param _maximumSanctions is the maximum number of sanctions a team can have at one time\\n    function updaateMaximumSanctions(\\n        uint256 _maximumSanctions\\n    ) public onlyOwner {\\n        maximumSanctions = _maximumSanctions;\\n    }\\n\\n    ///@dev this is a public function callable by a senator\\n    ///@notice this function will only work if the senator and the nation being sanctioned are on the same team\\n    ///@param idSenator is the id of the senator calling the function that will cast the vote to sanction\\n    ///@param idSanctioned is the nation id of the nation who the senator is voting to sanction\\n    function sanctionTeamMember(\\n        uint256 idSenator,\\n        uint256 idSanctioned\\n    ) public {\\n        bool owner = mint.checkOwnership(idSenator, msg.sender);\\n        require(owner, \\\"!nation owner\\\");\\n        require(idToVoter[idSenator].senator == true, \\\"!senator\\\");\\n        require(\\n            idToVoter[idSanctioned].senator == false,\\n            \\\"cannot sanction a senator\\\"\\n        );\\n        uint256 senatorTeam = idToVoter[idSenator].team;\\n        uint256 sanctionedTeam = idToVoter[idSanctioned].team;\\n        require(\\n            senatorTeam == sanctionedTeam,\\n            \\\"you can only sanction a fellow team member\\\"\\n        );\\n        uint256[] memory currentTeamSanctions = teamToCurrentSanctions[\\n            sanctionedTeam\\n        ];\\n        require(\\n            currentTeamSanctions.length < maximumSanctions,\\n            \\\"this team has reached the limit for sanctions\\\"\\n        );\\n        uint256 gameDay = keep.getGameDay();\\n        Voter storage sanctioned = idToVoter[idSanctioned];\\n        require(\\n            sanctioned.sanctionsByTeam[sanctionedTeam] == false,\\n            \\\"this nation is already sanctioned\\\"\\n        );\\n        sanctioned.sanctionsByTeam[sanctionedTeam] = true;\\n        sanctioned.dayOfSanctionByTeam[sanctionedTeam] = gameDay;\\n        teamToCurrentSanctions[sanctionedTeam].push(idSanctioned);\\n        res.removeTradingPartnersFromSanction(idSanctioned, sanctionedTeam);\\n        emit Sanction(idSenator, senatorTeam, idSanctioned);\\n    }\\n\\n    ///@dev this is a public function callable by a senator\\n    ///@notice this function will only work if the senator and the nation being sanctioned are on the same team\\n    ///@notice sanctions can only be lifted after 10 days\\n    ///@notice lifting a sanction only requires one vote from a senator\\n    ///@param idSenator is the id of the senator calling the function that will cast the vote to lift the sanction\\n    ///@param idSanctioned is the nation id of the nation who the senator is voting to lift the sanction on\\n    function liftSanctionVote(uint256 idSenator, uint256 idSanctioned) public {\\n        require(idToVoter[idSenator].senator == true, \\\"!senator\\\");\\n        uint256 senatorTeam = idToVoter[idSenator].team;\\n        uint256 sanctionedTeam = idToVoter[idSanctioned].team;\\n        require(\\n            senatorTeam == sanctionedTeam,\\n            \\\"you can only lift a sanction on a fellow team member\\\"\\n        );\\n        Voter storage sanctioned = idToVoter[idSanctioned];\\n        uint256 gameDay = keep.getGameDay();\\n        uint256 dayOfTeamSanction = sanctioned.dayOfSanctionByTeam[senatorTeam];\\n        require(\\n            (dayOfTeamSanction + 10) < gameDay,\\n            \\\"you must wait 10 days before lifting a sanction\\\"\\n        );\\n        require(\\n            sanctioned.sanctionsByTeam[sanctionedTeam] == true,\\n            \\\"this nation is not sanctioned\\\"\\n        );\\n        sanctioned.sanctionsByTeam[senatorTeam] = false;\\n        uint256[] storage currentTeamSanctions = teamToCurrentSanctions[\\n            sanctionedTeam\\n        ];\\n        for (uint256 i = 0; i < currentTeamSanctions.length; i++) {\\n            if (currentTeamSanctions[i] == idSanctioned) {\\n                currentTeamSanctions[i] = currentTeamSanctions[\\n                    currentTeamSanctions.length - 1\\n                ];\\n                currentTeamSanctions.pop();\\n            }\\n        }\\n        emit SanctionLifted(idSenator, senatorTeam, idSanctioned);\\n    }\\n\\n    ///@dev this is a public view function that will return if a nation is a senator\\n    ///@notice this function will return if a nation is a senator\\n    ///@param id this is the nation id of the nation being queried\\n    ///@return bool will be true if a nation is a senator\\n    function isSenator(uint256 id) public view returns (bool) {\\n        return idToVoter[id].senator;\\n    }\\n\\n    ///@notice this function will return the current election epoch\\n    function getCurrentEpoch() public view returns (uint256) {\\n        return epoch;\\n    }\\n\\n    function isSanctioned(\\n        uint256 idSender,\\n        uint256 idReceiver\\n    ) public view returns (bool) {\\n        uint256 senderTeam = idToVoter[idSender].team;\\n        uint256 receiverTeam = idToVoter[idReceiver].team;\\n        bool senderSanctionedSenderTeam = idToVoter[idSender].sanctionsByTeam[\\n            senderTeam\\n        ];\\n        bool recieverSanctionedRecieverTeam = idToVoter[idReceiver]\\n            .sanctionsByTeam[receiverTeam];\\n        bool senderSanctionedRecieverTeam = idToVoter[idSender].sanctionsByTeam[\\n            receiverTeam\\n        ];\\n        bool recieverSanctionedSenderTeam = idToVoter[idReceiver]\\n            .sanctionsByTeam[senderTeam];\\n        bool sanctioned;\\n        if (senderTeam == receiverTeam) {\\n            if (\\n                senderSanctionedSenderTeam == true ||\\n                recieverSanctionedRecieverTeam == true\\n            ) {\\n                sanctioned = true;\\n            } else {\\n                sanctioned = false;\\n            }\\n        } else if (senderTeam != receiverTeam) {\\n            if (\\n                senderSanctionedRecieverTeam == true ||\\n                recieverSanctionedSenderTeam == true\\n            ) {\\n                sanctioned = true;\\n            } else {\\n                sanctioned = false;\\n            }\\n        }\\n        return sanctioned;\\n    }\\n\\n    function electSenatorForTesting(uint256 id) public onlyOwner {\\n        idToVoter[id].senator = true;\\n    }\\n\\n    function getSenatorVotes(\\n        uint256 team\\n    ) public view returns (uint256[] memory) {\\n        return epochToTeamToSenatorVotes[epoch][team];\\n    }\\n\\n    function getSenators(uint256 team) public view returns (uint256[] memory) {\\n        return epochToTeamToWinners[epoch][team];\\n    }\\n\\n    function getDaysUntilNextElection() public view returns (uint256) {\\n        uint256 gameDay = keep.getGameDay();\\n        return (dayOfLastElection + interval) - gameDay;\\n    }\\n}\\n\",\"keccak256\":\"0x9b392671cf5a81b73528e516460c0a22ce06448c2c85a7afdbb9315d28529d6e\",\"license\":\"BUSL-1.1\"},\"contracts/Spies.sol\":{\"content\":\"\\n//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"./Treasury.sol\\\";\\nimport \\\"./Infrastructure.sol\\\";\\nimport \\\"./Resources.sol\\\";\\nimport \\\"./Wonders.sol\\\";\\nimport \\\"./Improvements.sol\\\";\\nimport \\\"./CountryMinter.sol\\\";\\nimport \\\"./War.sol\\\";\\nimport \\\"./NationStrength.sol\\\";\\nimport \\\"./GroundBattle.sol\\\";\\nimport \\\"./KeeperFile.sol\\\";\\nimport \\\"./CountryParameters.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract SpyContract is Ownable, ReentrancyGuard {\\n    uint256 public spyCost = 100000 * (10**18);\\n    address public treasury;\\n    address public spyOperations;\\n    address public countryMinter;\\n    address public improvements2;\\n    address public wonder1;\\n\\n    CountryMinter mint;\\n    ImprovementsContract2 imp2;\\n    WondersContract1 won1;\\n\\n    event SpiesPurchased(uint256 indexed id, uint256 indexed amount);\\n\\n    event SpiesDecommissioned(uint256 indexed id, uint256 indexed amount);\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings(\\n        address _spyOperations,\\n        address _treasury,\\n        address _countryMinter,\\n        address _improvements2,\\n        address _wonders1\\n    ) public onlyOwner {\\n        spyOperations = _spyOperations;\\n        treasury = _treasury;\\n        countryMinter = _countryMinter;\\n        mint = CountryMinter(countryMinter);\\n        improvements2 = _improvements2;\\n        imp2 = ImprovementsContract2(improvements2);\\n        wonder1 = _wonders1;\\n        won1 = WondersContract1(wonder1);\\n    }\\n\\n    mapping(uint256 => uint256) public idToSpies;\\n\\n    modifier onlySpyOperations() {\\n        require(\\n            msg.sender == spyOperations,\\n            \\\"only callable from spy operations contract\\\"\\n        );\\n        _;\\n    }\\n\\n    ///@dev this is a public function only callable by the nation owner that will purchase spies\\n    ///@notice this function will allow a natio nowner to purchase spies\\n    ///@notice you cannot buy more spies than the maximum amount for your nation\\n    ///@param amount is the amount of spies being purchased\\n    ///@param id is the nation id of the nation buying spies\\n    function buySpies(uint256 amount, uint256 id) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        uint256 maxSpyCount = getMaxSpyCount(id);\\n        uint256 currentSpyCount = idToSpies[id];\\n        require(\\n            (currentSpyCount + amount) <= maxSpyCount,\\n            \\\"cannot own that many spies\\\"\\n        );\\n        uint256 purchasePrice = spyCost * amount;\\n        uint256 balance = TreasuryContract(treasury).checkBalance(id);\\n        require(\\n            balance >= purchasePrice,\\n            \\\"insufficient balance to purchase spies\\\"\\n        );\\n        require(TreasuryContract(treasury).spendBalance(id, purchasePrice), \\n            \\\"failed to spend balance\\\"\\n        );\\n        idToSpies[id] += amount;\\n        emit SpiesPurchased(id, amount);\\n    }\\n\\n    function updateSpyPrice(uint256 newCost) public onlyOwner {\\n        spyCost = newCost;\\n    }\\n\\n    function getSpyPrice() public view returns (uint256) {\\n        return spyCost;\\n    }\\n\\n    ///@dev this is a public view function that will return the maximum amount of spies a given country can own\\n    ///@notice this function will return the maximum amount of spies a nation can own\\n    ///@notice the base max spy count for a nation is 50\\n    ///@notice intel agencies will increase the max number of spies by 100\\n    ///@notice a central intelligence agency wonder will increase the max number of spies by 250\\n    ///@param id is the nation id for the nation being queried\\n    ///@return uint256 is the maximum number of spies for a given nation\\n    function getMaxSpyCount(uint256 id) public view returns (uint256) {\\n        uint256 maxSpyCount = 50;\\n        uint256 intelAgencies = imp2.getIntelAgencyCount(id);\\n        if (intelAgencies > 0) {\\n            maxSpyCount += (intelAgencies * 100);\\n        }\\n        bool cia = won1.getCentralIntelligenceAgency(id);\\n        if (cia) {\\n            maxSpyCount += 250;\\n        }\\n        return maxSpyCount;\\n    }\\n\\n    function decommissionSpies(uint256 amount, uint256 id) public {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        uint256 spyCount = idToSpies[id];\\n        require(\\n            spyCount >= amount,\\n            \\\"not enough spies to decommission that many\\\"\\n        );\\n        idToSpies[id] -= amount;\\n        emit SpiesDecommissioned(id, amount);\\n    }\\n\\n    ///@dev this is a public function only callable from the Spy Contract\\n    ///@notice this function will allow the spy contract to decrease the number of spies of an nation that is lost by the attacker during a spy attack\\n    ///@param id is the nation id of the nation losing their spy when the attack fails\\n    function decreaseAttackerSpyCount(uint256 id) public onlySpyOperations {\\n        uint256 spyCount = idToSpies[id];\\n        require(spyCount > 0, \\\"no spies to lose\\\");\\n        idToSpies[id] -= 1;\\n    }\\n\\n    ///@dev this is a public view function that allows the spy contract to decrease the number of spies of a nation in a spy attack\\n    ///@notice this function will allow the spy contract to decrease the number of spies lost during a spy attack\\n    ///@param amount is the number of spies lost during the attack\\n    ///@param id is the nation suffering losses during the spy attack\\n    function decreaseDefenderSpyCount(\\n        uint256 amount,\\n        uint256 id\\n    ) public onlySpyOperations {\\n        uint256 spyCount = idToSpies[id];\\n        require(spyCount >= amount, \\\"not enough spies to lose\\\");\\n        idToSpies[id] -= amount;\\n    }\\n\\n    ///@dev this is a public view function that will return the current spy count for a nation\\n    ///@notice this function will return a nations current spy count\\n    ///@param countryId is the nation ID of the nation being queried\\n    ///@return count is the spy count for a given nation\\n    function getSpyCount(\\n        uint256 countryId\\n    ) public view returns (uint256 count) {\\n        return idToSpies[countryId];\\n    }\\n}\",\"keccak256\":\"0xfb5690050eeeb156d7318702cf42dffae295f98053dde4e9f27e1da011118ad6\",\"license\":\"BUSL-1.1\"},\"contracts/SpyOperations.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"./Infrastructure.sol\\\";\\nimport \\\"./Forces.sol\\\";\\nimport \\\"./Military.sol\\\";\\nimport \\\"./NationStrength.sol\\\";\\nimport \\\"./Treasury.sol\\\";\\nimport \\\"./CountryParameters.sol\\\";\\nimport \\\"./Wonders.sol\\\";\\nimport \\\"./CountryMinter.sol\\\";\\nimport \\\"./KeeperFile.sol\\\";\\nimport \\\"./Spies.sol\\\";\\nimport \\\"./Missiles.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n///@title SpyOperationsContract\\n///@author OxSnosh\\n///@dev this contact inherits from openzeppelin's ownable contract\\ncontract SpyOperationsContract is Ownable {\\n\\n    uint256 public attackId;\\n    address public forces;\\n    address public spies;\\n    address public infrastructure;\\n    address public military;\\n    address public nationStrength;\\n    address public treasury;\\n    address public parameters;\\n    address public missiles;\\n    address public wonders1;\\n    address public wonders2;\\n    address public countryMinter;\\n    address public keeper;\\n\\n    ForcesContract force;\\n    InfrastructureContract inf;\\n    MilitaryContract mil;\\n    NationStrengthContract strength;\\n    TreasuryContract tsy;\\n    CountryParametersContract params;\\n    MissilesContract mis;\\n    WondersContract1 won1;\\n    WondersContract2 won2;\\n    CountryMinter mint;\\n    KeeperContract keep;\\n    SpyContract spy;\\n\\n    struct SpyAttack {\\n        uint256 encryptedAttackerId;\\n        uint256 defenderId;\\n        uint256 attackType;\\n        bool attackThwarted;\\n        uint256 attackerId;\\n    }\\n\\n    mapping(uint256 => SpyAttack) spyAttackIdToSpyAttack;\\n    mapping(uint256 => uint256) s_requestIdToRequestIndex;\\n    mapping(uint256 => uint256[]) public s_randomnessRequestIdToRandomWords;\\n\\n    event randomNumbersRequested(uint256 indexed requestId);\\n\\n    function settings(\\n        address _infrastructure,\\n        address _forces,\\n        address _military,\\n        address _nationStrength,\\n        address _wonders1,\\n        address _wonders2,\\n        address _treasury,\\n        address _parameters,\\n        address _missiles,\\n        address _countryMinter\\n    ) public onlyOwner {\\n        infrastructure = _infrastructure;\\n        inf = InfrastructureContract(_infrastructure);\\n        forces = _forces;\\n        force = ForcesContract(_forces);\\n        military = _military;\\n        mil = MilitaryContract(_military);\\n        nationStrength = _nationStrength;\\n        strength = NationStrengthContract(_nationStrength);\\n        wonders1 = _wonders1;\\n        won1 = WondersContract1(_wonders1);\\n        wonders2 = _wonders2;\\n        won2 = WondersContract2(_wonders2);\\n        treasury = _treasury;\\n        tsy = TreasuryContract(_treasury);\\n        parameters = _parameters;\\n        params = CountryParametersContract(_parameters);\\n        missiles = _missiles;\\n        mis = MissilesContract(_missiles);\\n        countryMinter = _countryMinter;\\n        mint = CountryMinter(_countryMinter);\\n    }\\n\\n    function settings2(address _keeper, address _spies) public onlyOwner {\\n        keeper = _keeper;\\n        keep = KeeperContract(_keeper);\\n        spies = _spies;\\n        spy = SpyContract(_spies);\\n    }\\n\\n    ///@dev this functin is callable only by a nation owner and will allow a naton to conduct a spy operation\\n    ///@notice this function will allow a nation to conduct a spy operation against another nation\\n    ///@param defenderId is the id of the defending nation\\n    ///@param attackType the id of the attack as it is stored on this contract\\n    function checkSpyOperation(\\n        uint256 defenderId,\\n        uint256 attackType\\n    ) public view returns (bool) {\\n        uint256 infrastructureAmount = inf.getInfrastructureCount(defenderId);\\n        uint256 techAmount = inf.getTechnologyCount(defenderId);\\n        uint256 landAmount = inf.getLandCount(defenderId);\\n        if (attackType == 4) {\\n            require(\\n                landAmount >= 15,\\n                \\\"defender does not have enough land to conduct operation\\\"\\n            );\\n        }\\n        if (attackType == 10) {\\n            require(\\n                techAmount >= 15,\\n                \\\"defender does not have enough tech to conduct operation\\\"\\n            );\\n        }\\n        if (attackType == 13) {\\n            require(\\n                infrastructureAmount >= 15,\\n                \\\"defender does not have enough infrastructure to conduct operation\\\"\\n            );\\n        }\\n        uint256 nukeCount = mis.getNukeCount(defenderId);\\n        bool silo = won2.getHiddenNuclearMissileSilo(defenderId);\\n        if (attackType == 14) {\\n            if (silo) {\\n                require(\\n                    nukeCount >= 6,\\n                    \\\"defender does not have enough nukes to conduct operation\\\"\\n                );\\n            } else {\\n                require(\\n                    nukeCount >= 1,\\n                    \\\"defender does not have enough nukes to conduct operation\\\"\\n                );\\n            }\\n        }\\n        return true;\\n    }\\n\\n\\n    function getAttackerSuccessScore(\\n        uint256 countryId\\n    ) public view returns (uint256) {\\n        uint256 spyCount = spy.getSpyCount(countryId);\\n        uint256 techAmount = inf.getTechnologyCount(countryId);\\n        uint256 attackSuccessScore = (spyCount + (techAmount / 15));\\n        bool cia = won1.getCentralIntelligenceAgency(countryId);\\n        if (cia) {\\n            attackSuccessScore = ((attackSuccessScore * 110) / 100);\\n        }\\n        bool accomodativeGovt = checkAccomodativeGovernment(countryId);\\n        if (accomodativeGovt) {\\n            attackSuccessScore = ((attackSuccessScore * 110) / 100);\\n        }\\n        return attackSuccessScore;\\n    }\\n\\n    function checkAccomodativeGovernment(uint256 countryId)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        uint256 government = params.getGovernmentType(\\n            countryId\\n        );\\n        if (\\n            government == 2 ||\\n            government == 7 ||\\n            government == 10\\n        ) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function getDefenseSuccessScore(\\n        uint256 countryId\\n    ) public view returns (uint256) {\\n        uint256 spyCount = spy.getSpyCount(countryId);\\n        uint256 techAmount = inf.getTechnologyCount(countryId);\\n        uint256 landAmount = inf.getLandCount(countryId);\\n        uint256 threatLevel = mil.getThreatLevel(countryId);\\n        uint256 defenseSuccessScoreGross = (spyCount +\\n            (techAmount / 20) +\\n            (landAmount / 70));\\n        uint256 defenseSuccessScore;\\n        if (threatLevel == 1) {\\n            defenseSuccessScore = ((defenseSuccessScoreGross * 75) / 100);\\n        } else if (threatLevel == 2) {\\n            defenseSuccessScore = ((defenseSuccessScoreGross * 90) / 100);\\n        } else if (threatLevel == 3) {\\n            defenseSuccessScore = defenseSuccessScoreGross;\\n        } else if (threatLevel == 4) {\\n            defenseSuccessScore = ((defenseSuccessScoreGross * 110) / 100);\\n        } else {\\n            defenseSuccessScore = ((defenseSuccessScoreGross * 125) / 100);\\n        }\\n        return defenseSuccessScore;\\n    }\\n\\n    event SpyAttackResults(\\n        uint256 indexed attackId,\\n        uint256 indexed attackerId,\\n        uint256 indexed defenderId,\\n        bool success,\\n        uint256 attackType\\n    );\\n\\n    address public relayer = 0xdB3892b0FD38D73B65a9AD2fC3920B74B2B71dfb;\\n\\n    modifier onlyRelayer() {\\n        require(msg.sender == relayer);\\n        _;\\n    }\\n\\n    mapping(uint256 => mapping(uint256 => bool)) public dayToDefenderIdToAttackedToday;\\n\\n    function attackedAlready(\\n        uint256 defenderId\\n    )\\n        public\\n        view\\n        returns (bool)\\n    {\\n        uint256 day = keep.getGameDay();\\n        return dayToDefenderIdToAttackedToday[day][defenderId];\\n    }\\n\\n    function spyAttack(bool success, uint256 attackType, uint256 defenderId, uint256 attackerId, uint256 cost, uint256 randomNumber) public onlyRelayer {\\n        uint256 day = keep.getGameDay();\\n        if (dayToDefenderIdToAttackedToday[day][defenderId]) {\\n            revert(\\\"Defender has already been attacked today\\\");\\n        }\\n        if (success) {\\n            tsy.spendBalance(attackerId, cost);\\n            emit SpyAttackResults (\\n                attackId,\\n                999999999,\\n                defenderId,\\n                true,\\n                attackType\\n            );\\n            completeSpyAttack(success, attackId, attackerId, defenderId, attackType, randomNumber);\\n        } else {\\n            emit SpyAttackResults (\\n                attackId,\\n                attackerId,\\n                defenderId,\\n                false,\\n                attackType\\n            );\\n        }\\n        attackId++;\\n    }\\n\\n    function completeSpyAttack(\\n        bool success,\\n        uint256 _attackId,\\n        uint256 attackerId,\\n        uint256 defenderId,\\n        uint256 attackType,\\n        uint256 randomNumber\\n    ) internal {\\n        if (!success) {\\n            emit SpyAttackResults(\\n                _attackId,\\n                attackerId,\\n                defenderId,\\n                false,\\n                attackType\\n            );\\n        } else if (success) {\\n            if (attackType == 1) {\\n                destroyCruiseMissiles(defenderId, randomNumber);\\n            } else if (attackType == 2) {\\n                destroyDefendingTanks(defenderId, randomNumber);\\n            } else if (attackType == 3) {\\n                captureLand(defenderId, randomNumber);\\n            } else if (attackType == 4) {\\n                changeDesiredGovernment(defenderId, randomNumber);\\n            } else if (attackType == 5) {\\n                changeDesiredReligion(defenderId, randomNumber);\\n            } else if (attackType == 6) {\\n                changeThreatLevel(defenderId);\\n            } else if (attackType == 7) {\\n                changeDefconLevel(defenderId);\\n            } else if (attackType == 8) {\\n                destroySpies(defenderId, randomNumber);\\n            } else if (attackType == 9) {\\n                captueTechnology(defenderId, randomNumber);\\n            } else if (attackType == 10) {\\n                sabotogeTaxes(defenderId, randomNumber);\\n            } else if (attackType == 11) {\\n                captureInfrastructure(defenderId, randomNumber);\\n            } else {\\n                destroyNukes(defenderId);\\n            }\\n        }\\n    }\\n\\n    function destroyCruiseMissiles(\\n        uint256 defenderId,\\n        uint256 randomNumber\\n    ) internal {\\n        uint256 randomNumber2 = (randomNumber % 5) + 1;\\n        mis.decreaseCruiseMissileCount(randomNumber2, defenderId);\\n    }\\n\\n    function destroyDefendingTanks(\\n        uint256 defenderId,\\n        uint256 randomNumber\\n    ) internal {\\n        uint256 randomPercentage = ((randomNumber % 5) + 5);\\n        uint256 defendingTankCount = force.getDefendingTankCount(defenderId);\\n        uint256 tankAmountToDecrease = ((defendingTankCount * randomPercentage) /\\n            100);\\n        force.decreaseDefendingTankCount(tankAmountToDecrease, defenderId);\\n    }\\n\\n    function captureLand(\\n        uint256 defenderId,\\n        uint256 randomNumber\\n    ) internal {\\n        uint256 randomNumberToDecreaseFromDefender = ((randomNumber % 10) +\\n            5);\\n        inf.decreaseLandCountFromSpyContract(defenderId, randomNumberToDecreaseFromDefender);\\n    }\\n\\n    function changeDesiredGovernment(\\n        uint256 defenderId,\\n        uint256 randomNumber\\n    ) internal {\\n        uint256 governmentPreference = params.getGovernmentPreference(\\n            defenderId\\n        );\\n        uint256 newPreference = ((randomNumber % 10) + 1);\\n        if (newPreference == governmentPreference) {\\n            if (governmentPreference == 1) {\\n                newPreference += 1;\\n            } else {\\n                newPreference -= 1;\\n            }\\n        }\\n        params.updateDesiredGovernment(defenderId, newPreference);\\n    }\\n\\n    function changeDesiredReligion(\\n        uint256 defenderId,\\n        uint256 randomNumber\\n    ) internal {\\n        uint256 religionPreference = params.getReligionPreference(defenderId);\\n        uint256 newPreference = ((randomNumber % 14) + 1);\\n        if (newPreference == religionPreference) {\\n            if (religionPreference == 1) {\\n                newPreference += 1;\\n            } else {\\n                newPreference -= 1;\\n            }\\n        }\\n        params.updateDesiredReligion(defenderId, newPreference);\\n    }\\n\\n    function changeThreatLevel(\\n        uint256 defenderId\\n    ) internal {\\n        mil.setThreatLevelFromSpyContract(defenderId, 1);\\n    }\\n\\n    function changeDefconLevel(\\n        uint256 defenderId\\n    ) internal {\\n        mil.setDefconLevelFromSpyContract(defenderId, 5);\\n    }\\n\\n    function destroySpies(\\n        uint256 defenderId,\\n        uint256 randomNumber\\n    ) internal {\\n        uint256 spyCount = spy.getSpyCount(defenderId);\\n        uint256 spyCountToDestroy = ((randomNumber % 20) + 1);\\n        if (spyCountToDestroy > spyCount) {\\n            spyCountToDestroy = spyCount;\\n        }\\n        spy.decreaseDefenderSpyCount(spyCountToDestroy, defenderId);\\n    }\\n\\n    function captueTechnology(\\n        uint256 defenderId,\\n        uint256 randomNumber\\n    ) internal {\\n        uint256 randomNumberToCapture = ((randomNumber % 10) + 5);\\n        inf.decreaseTechCountFromSpyContract(defenderId, randomNumberToCapture);\\n    }\\n\\n    function sabotogeTaxes(\\n        uint256 defenderId,\\n        uint256 randomNumber\\n    ) internal {\\n\\n        uint256 randomNumberToSetTaxes = ((randomNumber % 4) + 20);\\n        inf.setTaxRateFromSpyContract(defenderId, randomNumberToSetTaxes);\\n    }\\n\\n    function captureInfrastructure(\\n        uint256 defenderId,\\n        uint256 randomNumber\\n    ) internal {\\n        uint256 randomNumberToExchange = ((randomNumber % 10) + 5);\\n        inf.decreaseInfrastructureCountFromSpyContract(\\n            defenderId,\\n            randomNumberToExchange\\n        );\\n    }\\n\\n    function destroyNukes(uint256 defenderId) internal {\\n        mis.decreaseNukeCountFromSpyContract(defenderId);\\n    }\\n}\\n\",\"keccak256\":\"0xc04c4b6c2e943148010553a816d352332360207b2b695e4cee1eb1efd7c0c4aa\",\"license\":\"BUSL-1.1\"},\"contracts/Taxes.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"./Infrastructure.sol\\\";\\nimport \\\"./Treasury.sol\\\";\\nimport \\\"./Improvements.sol\\\";\\nimport \\\"./Wonders.sol\\\";\\nimport \\\"./Resources.sol\\\";\\nimport \\\"./CountryParameters.sol\\\";\\nimport \\\"./Forces.sol\\\";\\nimport \\\"./Military.sol\\\";\\nimport \\\"./Crime.sol\\\";\\nimport \\\"./CountryMinter.sol\\\";\\nimport \\\"./KeeperFile.sol\\\";\\nimport \\\"./Environment.sol\\\";\\nimport \\\"./NavyBattle.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n///@title TaxesContract\\n///@author OxSnosh\\n///@dev this contract inherits from the open zeppelin ownable contract\\n///@notice this contract will allow a nation owner to collect taxes from their citizens\\ncontract TaxesContract is Ownable, ReentrancyGuard {\\n    address public countryMinter;\\n    address public infrastructure;\\n    address public treasury;\\n    address public improvements1;\\n    address public improvements2;\\n    address public improvements3;\\n    address public improvements4;\\n    address public parameters;\\n    address public wonders1;\\n    address public wonders2;\\n    address public wonders3;\\n    address public wonders4;\\n    address public resources;\\n    address public forces;\\n    address public military;\\n    address public crime;\\n    address public additionalTaxes;\\n    address public bonusResources;\\n    address public keeper;\\n    address public environment;\\n    address public blockade;\\n\\n    InfrastructureContract inf;\\n    TreasuryContract tsy;\\n    ImprovementsContract1 imp1;\\n    ImprovementsContract2 imp2;\\n    ImprovementsContract3 imp3;\\n    ImprovementsContract4 imp4;\\n    CountryParametersContract params;\\n    WondersContract1 won1;\\n    WondersContract2 won2;\\n    WondersContract3 won3;\\n    WondersContract4 won4;\\n    ResourcesContract res;\\n    ForcesContract frc;\\n    MilitaryContract mil;\\n    CrimeContract crm;\\n    AdditionalTaxesContract addTax;\\n    CountryMinter mint;\\n    BonusResourcesContract bonus;\\n    KeeperContract keep;\\n    EnvironmentContract env;\\n    NavalBlockadeContract blk;\\n\\n    event TaxesCollected(uint256 indexed id, uint256 indexed amount);\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings1(\\n        address _countryMinter,\\n        address _infrastructure,\\n        address _treasury,\\n        address _improvements1,\\n        address _improvements2,\\n        address _improvements3,\\n        address _improvements4,\\n        address _additionalTaxes,\\n        address _bonusResources,\\n        address _keeper,\\n        address _environment\\n    ) public onlyOwner {\\n        countryMinter = _countryMinter;\\n        mint = CountryMinter(_countryMinter);\\n        infrastructure = _infrastructure;\\n        inf = InfrastructureContract(_infrastructure);\\n        treasury = _treasury;\\n        tsy = TreasuryContract(_treasury);\\n        improvements1 = _improvements1;\\n        imp1 = ImprovementsContract1(_improvements1);\\n        improvements2 = _improvements2;\\n        imp2 = ImprovementsContract2(_improvements2);\\n        improvements3 = _improvements3;\\n        imp3 = ImprovementsContract3(_improvements3);\\n        improvements4 = _improvements4;\\n        imp4 = ImprovementsContract4(_improvements4);\\n        additionalTaxes = _additionalTaxes;\\n        addTax = AdditionalTaxesContract(_additionalTaxes);\\n        bonusResources = _bonusResources;\\n        bonus = BonusResourcesContract(_bonusResources);\\n        keeper = _keeper;\\n        keep = KeeperContract(_keeper);\\n        environment = _environment;\\n        env = EnvironmentContract(_environment);\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings2(\\n        address _parameters,\\n        address _wonders1,\\n        address _wonders2,\\n        address _wonders3,\\n        address _wonders4,\\n        address _resources,\\n        address _forces,\\n        address _military,\\n        address _crime,\\n        address _blockade\\n    ) public onlyOwner {\\n        parameters = _parameters;\\n        params = CountryParametersContract(_parameters);\\n        wonders1 = _wonders1;\\n        won1 = WondersContract1(_wonders1);\\n        wonders2 = _wonders2;\\n        won2 = WondersContract2(_wonders2);\\n        wonders3 = _wonders3;\\n        won3 = WondersContract3(_wonders3);\\n        wonders4 = _wonders4;\\n        won4 = WondersContract4(_wonders4);\\n        resources = _resources;\\n        res = ResourcesContract(_resources);\\n        forces = _forces;\\n        frc = ForcesContract(_forces);\\n        military = _military;\\n        mil = MilitaryContract(_military);\\n        crime = _crime;\\n        crm = CrimeContract(_crime);\\n        blockade = _blockade;\\n        blk = NavalBlockadeContract(_blockade);\\n    }\\n\\n    ///@dev this is a public function callable only by the nation owner collecting taxes\\n    ///@notice this function will allow a nation owner to collect taxes from their citizens\\n    ///@param id this is the nation id of the nation collecting taxes\\n    function collectTaxes(uint256 id) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        (bool war, ) = mil.getWarPeacePreference(id);\\n        require(war, \\\"must be ready for war to collct taxes\\\");\\n        (, uint256 taxesCollectible) = getTaxesCollectible(id);\\n        inf.toggleCollectionNeededToChangeRate(id);\\n        tsy.increaseBalanceOnTaxCollection(id, taxesCollectible);\\n        emit TaxesCollected(id, taxesCollectible);\\n    }\\n\\n    ///@dev this is a public view function that will return a nations taxes that are collectible\\n    ///@notice this function will return a nations taxes collectible\\n    ///@param id is the nation id of the nation being queried\\n    ///@return dailyTaxesCollectiblePerCitizen is the tax portion of each citizens income per day\\n    ///@return taxesCollectible is the amount of taxes that are collectible (daily taxes per citizen * days since last collection * citizen count)\\n    function getTaxesCollectible(\\n        uint256 id\\n    ) public view returns (uint256, uint256) {\\n        uint256 dailyIncomePerCitizen = getDailyIncome(id);\\n        uint256 daysSinceLastTaxCollection = tsy.getDaysSinceLastTaxCollection(\\n            id\\n        );\\n        (uint256 citizenCount, ) = inf.getTaxablePopulationCount(id);\\n        uint256 taxRate = inf.getTaxRate(id);\\n        uint256 dailyTaxesCollectiblePerCitizen = (dailyIncomePerCitizen *\\n            taxRate);\\n        uint256 taxesCollectible = ((dailyTaxesCollectiblePerCitizen *\\n            daysSinceLastTaxCollection) * citizenCount) * (10 ** 18);\\n        uint256 mod = 100;\\n        uint256 percentageReductionForBlockades = blk\\n            .getBlockadePercentageReduction(id);\\n        if (percentageReductionForBlockades > 100) {\\n            percentageReductionForBlockades = 100;\\n        }\\n        mod = mod - percentageReductionForBlockades;\\n        taxesCollectible = ((taxesCollectible * mod) / 100);\\n        return (dailyTaxesCollectiblePerCitizen, taxesCollectible);\\n    }\\n\\n    ///@dev this is a public view function that will return the daily gross income per citizen for a given nation\\n    ///@notice this function will return the gross income per citizen for a given nation\\n    ///@param id is the nation id of the nation being queried\\n    ///@return uint256 is the daily income of each citizen for a nation\\n    function getDailyIncome(uint256 id) public view returns (uint256) {\\n        uint256 happiness = getHappiness(id);\\n        //increasers\\n        uint256 banks = imp1.getBankCount(id);\\n        uint256 ministries = imp2.getForeignMinistryCount(id);\\n        uint256 harbors = imp2.getHarborCount(id);\\n        uint256 schools = imp3.getSchoolCount(id);\\n        uint256 universityPoints = addTax.getUniversityPoints(id);\\n        //detractors\\n        uint256 casinos = imp1.getCasinoCount(id);\\n        uint256 guerillaCamp = imp2.getGuerillaCampCount(id);\\n        uint256 multipliers = (100 +\\n            (banks * 7) +\\n            (ministries * 5) +\\n            (harbors * 1) +\\n            (schools * 5) +\\n            universityPoints -\\n            (guerillaCamp * 8) -\\n            (casinos * 1));\\n        uint256 baseDailyIncomePerCitizen = (((35 + (2 * happiness)) *\\n            multipliers) / 100);\\n        uint256 incomeAdjustments = addTax.getIncomeAdjustments(id);\\n        uint256 dailyIncomePerCitizen = baseDailyIncomePerCitizen +\\n            incomeAdjustments;\\n        return dailyIncomePerCitizen;\\n    }\\n\\n    ///@dev this is a publci view function that will return a nations happiness\\n    ///@notice this function will return a nations happiness\\n    ///@notice the higher a nations happiness the more money its citizens will make\\n    ///@param id is the nation id of the nation being queried\\n    ///@return happiness is the happiness for the queried nation\\n    function getHappiness(uint256 id) public view returns (uint256) {\\n        uint256 happinessAdditions = getHappinessPointsToAdd(id);\\n        uint256 happinessSubtractions = getHappinessPointsToSubtract(id);\\n        uint256 happiness = 0;\\n        if (happinessSubtractions >= happinessAdditions) {\\n            happiness = 0;\\n        } else {\\n            happiness = (happinessAdditions - happinessSubtractions);\\n        }\\n        return happiness;\\n    }\\n\\n    function getHappinessPointsToAdd(uint256 id) public view returns (uint256) {\\n        uint256 compatabilityPoints = checkCompatability(id);\\n        uint256 densityPoints = getDensityPoints(id);\\n        uint256 pointsFromResources = getPointsFromResources(id);\\n        uint256 pointsFromImprovements = getPointsFromImprovements(id);\\n        uint256 wonderPoints = getHappinessFromWonders(id);\\n        uint256 casualtyPoints = getCasualtyPoints(id);\\n        uint256 additionalHappinessPoints = getAdditionalHappinessPointsToAdd(\\n            id\\n        );\\n        uint256 happinessPointsToAdd = (compatabilityPoints +\\n            densityPoints +\\n            pointsFromResources +\\n            pointsFromImprovements +\\n            wonderPoints +\\n            casualtyPoints +\\n            additionalHappinessPoints);\\n        return happinessPointsToAdd;\\n    }\\n\\n    function getAdditionalHappinessPointsToAdd(\\n        uint256 id\\n    ) internal view returns (uint256) {\\n        uint256 technologyPoints = getTechnologyPoints(id);\\n        uint256 pointsFromAge = getPointsFromNationAge(id);\\n        uint256 pointsFromTrades = addTax.getPointsFromTrades(id);\\n        uint256 pointsFromDefcon = addTax.getPointsFromDefcon(id);\\n        uint256 pointsFromGovt = addTax.getPointsFromGovernment(id);\\n        uint256 additonalHappinessPointsToAdd = (technologyPoints +\\n            pointsFromAge +\\n            pointsFromTrades +\\n            pointsFromDefcon +\\n            pointsFromGovt);\\n        return additonalHappinessPointsToAdd;\\n    }\\n\\n    function getHappinessPointsToSubtract(\\n        uint256 id\\n    ) public view returns (uint256) {\\n        uint256 taxRatePoints = getTaxRatePoints(id);\\n        uint256 pointsFromStability = addTax.getPointsFromMilitary(id);\\n        uint256 pointsFromCrime = getPointsFromCriminals(id);\\n        uint256 pointsFromImprovements = addTax\\n            .getPointsToSubtractFromImprovements(id);\\n        uint256 pointsFromIntelAgencies = addTax.getPointsFromIntelAgencies(id);\\n        uint256 environmentPoints = env.getEnvironmentScore(id);\\n        uint256 happinessPointsToSubtract = (taxRatePoints +\\n            pointsFromCrime +\\n            pointsFromImprovements +\\n            pointsFromStability +\\n            pointsFromIntelAgencies +\\n            environmentPoints);\\n        return happinessPointsToSubtract;\\n    }\\n\\n    function checkCompatability(\\n        uint256 id\\n    ) public view returns (uint256 compatability) {\\n        uint256 religion = params.getReligionType(id);\\n        uint256 govType = params.getGovernmentType(id);\\n        uint256 preferredReligion = params.getReligionPreference(id);\\n        uint256 preferredGovernment = params.getGovernmentPreference(id);\\n        (bool monument, bool temple, , , ) = wonderChecks1(id);\\n        uint256 religionPoints;\\n        uint256 governmentPoints;\\n        if (religion == preferredReligion || temple) {\\n            religionPoints = 1;\\n        }\\n        if (govType == preferredGovernment || monument) {\\n            governmentPoints = 1;\\n        }\\n        uint256 compatabilityPoints = (religionPoints + governmentPoints);\\n        return compatabilityPoints;\\n    }\\n\\n    function checkPopulationDensity(uint256 id) public view returns (uint256) {\\n        uint256 landArea = inf.getAreaOfInfluence(id);\\n        uint256 population = inf.getTotalPopulationCount(id);\\n        uint256 populationDensity = (population / landArea);\\n        return populationDensity;\\n    }\\n\\n    function getDensityPoints(uint256 id) public view returns (uint256) {\\n        uint256 densityPoints = 0;\\n        uint256 density = checkPopulationDensity(id);\\n        uint256 maxDensity = 70;\\n        bool water = res.viewWater(id);\\n        if (water) {\\n            maxDensity = 120;\\n        }\\n        if (density <= maxDensity) {\\n            densityPoints = 5;\\n        }\\n        return densityPoints;\\n    }\\n\\n    function getPointsFromResources(uint256 id) public view returns (uint256) {\\n        uint256 pointsFromResources = 0;\\n        bool gems = res.viewGems(id);\\n        if (gems) {\\n            pointsFromResources += 3;\\n        }\\n        bool oil = res.viewOil(id);\\n        if (oil) {\\n            pointsFromResources += 2;\\n        }\\n        bool silver = res.viewSilver(id);\\n        if (silver) {\\n            pointsFromResources += 2;\\n        }\\n        bool spices = res.viewSpices(id);\\n        if (spices) {\\n            pointsFromResources += 2;\\n        }\\n        bool sugar = res.viewSugar(id);\\n        if (sugar) {\\n            pointsFromResources += 1;\\n        }\\n        bool water = res.viewWater(id);\\n        if (water) {\\n            pointsFromResources += 3;\\n        }\\n        bool wine = res.viewWine(id);\\n        if (wine) {\\n            pointsFromResources += 3;\\n        }\\n        bool beer = bonus.viewBeer(id);\\n        if (beer) {\\n            pointsFromResources += 2;\\n        }\\n        bool fastFood = bonus.viewFastFood(id);\\n        if (fastFood) {\\n            pointsFromResources += 2;\\n        }\\n        bool fineJewelry = bonus.viewFineJewelry(id);\\n        if (fineJewelry) {\\n            pointsFromResources += 3;\\n        }\\n        uint256 additionalPoints = getAdditionalPointsFromResources(id);\\n        pointsFromResources += additionalPoints;\\n        return pointsFromResources;\\n    }\\n\\n    function getAdditionalPointsFromResources(\\n        uint256 id\\n    ) public view returns (uint256) {\\n        uint256 additionalPointsFromResources;\\n        bool automobiles = bonus.viewAutomobiles(id);\\n        if (automobiles) {\\n            additionalPointsFromResources += 3;\\n        }\\n        bool microchips = bonus.viewMicrochips(id);\\n        if (microchips) {\\n            additionalPointsFromResources += 2;\\n        }\\n        return additionalPointsFromResources;\\n    }\\n\\n    function getPointsFromImprovements(\\n        uint256 id\\n    ) public view returns (uint256) {\\n        uint256 pointsFromImprovements;\\n        uint256 borderWalls = imp1.getBorderWallCount(id);\\n        if (borderWalls > 0) {\\n            pointsFromImprovements += (2 * borderWalls);\\n        }\\n        uint256 casinos = imp1.getCasinoCount(id);\\n        if (casinos > 0) {\\n            pointsFromImprovements += (2 * casinos);\\n        }\\n        uint256 churchCount = imp1.getChurchCount(id);\\n        if (churchCount > 0) {\\n            pointsFromImprovements += churchCount;\\n        }\\n        uint256 policeHeadquarters = imp4.getPoliceHeadquartersCount(id);\\n        if (policeHeadquarters > 0) {\\n            pointsFromImprovements += (2 * policeHeadquarters);\\n        }\\n        uint256 redLightDistricts = imp3.getRedLightDistrictCount(id);\\n        if (redLightDistricts > 0) {\\n            pointsFromImprovements += (redLightDistricts);\\n        }\\n        uint256 stadiums = imp3.getStadiumCount(id);\\n        if (stadiums > 0) {\\n            pointsFromImprovements += (3 * stadiums);\\n        }\\n        uint256 taxRate = inf.getTaxRate(id);\\n        uint256 intelAgencies = imp2.getIntelAgencyCount(id);\\n        if (taxRate >= 23) {\\n            pointsFromImprovements += intelAgencies;\\n        }\\n        return pointsFromImprovements;\\n    }\\n\\n    function getHappinessFromWonders(\\n        uint256 id\\n    ) public view returns (uint256 wonderPts) {\\n        (\\n            bool monument,\\n            bool temple,\\n            bool greatUniversity,\\n            bool internet,\\n            bool movieIndustry\\n        ) = wonderChecks1(id);\\n        (\\n            bool warMemorial,\\n            bool scientificDevCenter,\\n            bool spaceProgram,\\n            bool universalHealthcare\\n        ) = wonderChecks2(id);\\n        uint256 wonderPoints = 0;\\n        if (monument) {\\n            wonderPoints += 4;\\n        }\\n        if (temple) {\\n            wonderPoints += 5;\\n        }\\n        uint256 tech = inf.getTechnologyCount(id);\\n        uint256 techDivided = (tech / 1000);\\n        if (greatUniversity && !scientificDevCenter) {\\n            uint256 points;\\n            if (techDivided == 0) {\\n                points = 0;\\n            } else if (techDivided == 1) {\\n                points = 1;\\n            } else if (techDivided == 2) {\\n                points = 2;\\n            } else {\\n                points = 3;\\n            }\\n            wonderPoints += points;\\n        } else if (greatUniversity && scientificDevCenter) {\\n            uint256 points;\\n            if (techDivided == 0) {\\n                points = 0;\\n            } else if (techDivided == 1) {\\n                points = 1;\\n            } else if (techDivided == 2) {\\n                points = 2;\\n            } else if (techDivided == 3) {\\n                points = 3;\\n            } else if (techDivided == 4) {\\n                points = 4;\\n            } else {\\n                points = 5;\\n            }\\n            wonderPoints += points;\\n        }\\n        if (internet) {\\n            wonderPoints += 5;\\n        }\\n        if (movieIndustry) {\\n            wonderPoints += 3;\\n        }\\n        if (warMemorial) {\\n            wonderPoints += 4;\\n        }\\n        if (spaceProgram) {\\n            wonderPoints += 3;\\n        }\\n        if (universalHealthcare) {\\n            wonderPoints += 2;\\n        }\\n        return wonderPoints;\\n    }\\n\\n    function wonderChecks1(\\n        uint256 id\\n    ) internal view returns (bool, bool, bool, bool, bool) {\\n        bool isMonument = won2.getGreatMonument(id);\\n        bool isTemple = won2.getGreatTemple(id);\\n        bool isUniversity = won2.getGreatUniversity(id);\\n        bool isInternet = won2.getInternet(id);\\n        bool isMovieIndustry = won3.getMovieIndustry(id);\\n\\n        return (\\n            isMonument,\\n            isTemple,\\n            isUniversity,\\n            isInternet,\\n            isMovieIndustry\\n        );\\n    }\\n\\n    function wonderChecks2(\\n        uint256 id\\n    ) internal view returns (bool, bool, bool, bool) {\\n        bool isWarMemorial = won3.getNationalWarMemorial(id);\\n        bool isScientificDevCenter = won3.getScientificDevelopmentCenter(id);\\n        bool isSpaceProgram = won4.getSpaceProgram(id);\\n        bool isUniversalHealthcare = won4.getUniversalHealthcare(id);\\n        return (\\n            isWarMemorial,\\n            isScientificDevCenter,\\n            isSpaceProgram,\\n            isUniversalHealthcare\\n        );\\n    }\\n\\n    function getCasualtyPoints(uint256 id) public view returns (uint256) {\\n        bool nationalCemetary = won3.getNationalCemetary(id);\\n        (uint256 casualties, ) = frc.getCasualties(id);\\n        uint256 casualtyPoints = 0;\\n        if (nationalCemetary) {\\n            if (casualties < 10000000) {\\n                casualtyPoints = 1;\\n            } else if (casualties < 15000000) {\\n                casualtyPoints = 2;\\n            } else if (casualties < 20000000) {\\n                casualtyPoints = 3;\\n            } else if (casualties < 25000000) {\\n                casualtyPoints = 4;\\n            } else if (casualties >= 25000000) {\\n                casualtyPoints = 5;\\n            }\\n        }\\n        return casualtyPoints;\\n    }\\n\\n    function getTechnologyPoints(uint256 id) public view returns (uint256) {\\n        uint256 pointsFromTechnology;\\n        uint256 tech = inf.getTechnologyCount(id);\\n        if (tech == 0) {\\n            pointsFromTechnology = 0;\\n        } else if (tech == 1) {\\n            pointsFromTechnology = 1;\\n        } else if (tech <= 3) {\\n            pointsFromTechnology = 2;\\n        } else if (tech <= 6) {\\n            pointsFromTechnology = 3;\\n        } else if (tech <= 10) {\\n            pointsFromTechnology = 4;\\n        } else if (tech <= 15) {\\n            pointsFromTechnology = 5;\\n        } else if (tech <= 50) {\\n            pointsFromTechnology = 6;\\n        } else if (tech <= 100) {\\n            pointsFromTechnology = 7;\\n        } else if (tech <= 150) {\\n            pointsFromTechnology = 8;\\n        } else if (tech <= 200) {\\n            pointsFromTechnology = 9;\\n        } else {\\n            pointsFromTechnology = 10;\\n        }\\n        return pointsFromTechnology;\\n    }\\n\\n    function getPointsFromNationAge(uint256 id) public view returns (uint256) {\\n        uint256 nationCreated = params.getDayCreated(id);\\n        uint256 gameDay = keep.getGameDay();\\n        uint256 agePoints = 0;\\n        if ((gameDay - nationCreated) < 90) {\\n            agePoints = 0;\\n        } else if ((gameDay - nationCreated) < 180) {\\n            agePoints = 2;\\n        } else {\\n            agePoints = 4;\\n        }\\n        return agePoints;\\n    }\\n\\n    function getTaxRatePoints(uint256 id) public view returns (uint256) {\\n        uint256 subtractTaxPoints;\\n        uint256 taxRate = inf.getTaxRate(id);\\n        if (taxRate <= 16) {\\n            subtractTaxPoints = 0;\\n        } else if (taxRate <= 20) {\\n            subtractTaxPoints = 1;\\n        } else if (taxRate <= 23) {\\n            subtractTaxPoints = 3;\\n        } else if (taxRate <= 25) {\\n            subtractTaxPoints = 5;\\n        } else if (taxRate <= 30) {\\n            subtractTaxPoints = 7;\\n        }\\n        return subtractTaxPoints;\\n    }\\n\\n    function getPointsFromCriminals(uint256 id) public view returns (uint256) {\\n        (uint256 unincarceratedCriminals, , ) = crm.getCriminalCount(id);\\n        uint256 pointsFromCrime;\\n        if (unincarceratedCriminals < 200) {\\n            pointsFromCrime = 0;\\n        } else if (unincarceratedCriminals < 2000) {\\n            pointsFromCrime = 1;\\n        } else if (unincarceratedCriminals < 4000) {\\n            pointsFromCrime = 2;\\n        } else if (unincarceratedCriminals < 6000) {\\n            pointsFromCrime = 3;\\n        } else if (unincarceratedCriminals < 8000) {\\n            pointsFromCrime = 4;\\n        } else {\\n            pointsFromCrime = 5;\\n        }\\n        return pointsFromCrime;\\n    }\\n}\\n\\n///@title AdditionalTaxesContract\\n///@author OxSnosh\\n///@dev tis contract inherits from openzeppelin's ownable contract\\n///@notice this contract will have additional formulas that will allow a nation to collect taxes from its citizens\\ncontract AdditionalTaxesContract is Ownable {\\n    address public infrastructure;\\n    address public improvements2;\\n    address public improvements3;\\n    address public parameters;\\n    address public wonders1;\\n    address public wonders2;\\n    address public wonders3;\\n    address public wonders4;\\n    address public resources;\\n    address public military;\\n    address public bonusResources;\\n    address public forces;\\n\\n    InfrastructureContract inf;\\n    ImprovementsContract2 imp2;\\n    ImprovementsContract3 imp3;\\n    CountryParametersContract params;\\n    WondersContract1 won1;\\n    WondersContract2 won2;\\n    WondersContract3 won3;\\n    WondersContract4 won4;\\n    ResourcesContract res;\\n    MilitaryContract mil;\\n    BonusResourcesContract bonus;\\n    ForcesContract frc;\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings(\\n        address _parameters,\\n        address _wonders1,\\n        address _wonders2,\\n        address _wonders3,\\n        address _wonders4,\\n        address _resources,\\n        address _military,\\n        address _infrastructure,\\n        address _bonusResources\\n    ) public onlyOwner {\\n        parameters = _parameters;\\n        params = CountryParametersContract(_parameters);\\n        wonders1 = _wonders1;\\n        won1 = WondersContract1(_wonders1);\\n        wonders2 = _wonders2;\\n        won2 = WondersContract2(_wonders2);\\n        wonders3 = _wonders3;\\n        won3 = WondersContract3(_wonders3);\\n        wonders4 = _wonders4;\\n        won4 = WondersContract4(_wonders4);\\n        resources = _resources;\\n        res = ResourcesContract(_resources);\\n        military = _military;\\n        mil = MilitaryContract(_military);\\n        infrastructure = _infrastructure;\\n        inf = InfrastructureContract(_infrastructure);\\n        bonusResources = _bonusResources;\\n        bonus = BonusResourcesContract(_bonusResources);\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings2(\\n        address _improvements2,\\n        address _improvements3,\\n        address _forces\\n    ) public onlyOwner {\\n        improvements2 = _improvements2;\\n        imp2 = ImprovementsContract2(_improvements2);\\n        improvements3 = _improvements3;\\n        imp3 = ImprovementsContract3(_improvements3);\\n        forces = _forces;\\n        frc = ForcesContract(_forces);\\n    }\\n\\n    function getIncomeAdjustments(uint256 id) public view returns (uint256) {\\n        uint256 adjustments = 0;\\n        bool furs = res.viewFurs(id);\\n        if (furs) {\\n            adjustments += 4;\\n        }\\n        bool gems = res.viewGems(id);\\n        if (gems) {\\n            adjustments += 2;\\n        }\\n        bool gold = res.viewGold(id);\\n        if (gold) {\\n            adjustments += 3;\\n        }\\n        bool silver = res.viewSilver(id);\\n        if (silver) {\\n            adjustments += 2;\\n        }\\n        bool scholars = bonus.viewScholars(id);\\n        if (scholars) {\\n            adjustments += 3;\\n        }\\n        bool agriDevProgram = won1.getAgriculturalDevelopmentProgram(id);\\n        if (agriDevProgram) {\\n            adjustments += 2;\\n        }\\n        bool miningIndustryConsortium = won2.getMiningIndustryConsortium(id);\\n        if (miningIndustryConsortium) {\\n            uint256 points = getResourcePointsForMiningConsortium(id);\\n            adjustments += (2 * points);\\n        }\\n        bool stockMarket = won4.getStockMarket(id);\\n        if (stockMarket) {\\n            adjustments += 10;\\n        }\\n        uint256 uraniumAndNuclearPowerBonus = getNuclearAndUraniumBonus(id);\\n        adjustments += uraniumAndNuclearPowerBonus;\\n        return adjustments;\\n    }\\n\\n    function getResourcePointsForMiningConsortium(\\n        uint256 id\\n    ) public view returns (uint256) {\\n        uint256 points = 0;\\n        bool coal = res.viewCoal(id);\\n        if (coal) {\\n            points += 1;\\n        }\\n        bool lead = res.viewLead(id);\\n        if (lead) {\\n            points += 1;\\n        }\\n        bool oil = res.viewOil(id);\\n        if (oil) {\\n            points += 1;\\n        }\\n        bool uranium = res.viewUranium(id);\\n        if (uranium) {\\n            points += 1;\\n        }\\n        return points;\\n    }\\n\\n    function getNuclearAndUraniumBonus(\\n        uint256 id\\n    ) public view returns (uint256) {\\n        bool nuclearPowerPlant = won3.getNuclearPowerPlant(id);\\n        bool uranium = res.viewUranium(id);\\n        uint256 techAmount = inf.getTechnologyCount(id);\\n        uint256 adjustment = 0;\\n        if (nuclearPowerPlant && uranium) {\\n            adjustment += 3;\\n            if (techAmount >= 10 && techAmount < 20) {\\n                adjustment += 1;\\n            } else if (techAmount >= 20 && techAmount < 30) {\\n                adjustment += 2;\\n            } else if (techAmount >= 30 && techAmount < 40) {\\n                adjustment += 3;\\n            } else if (techAmount >= 40) {\\n                adjustment += 4;\\n            }\\n        }\\n        return adjustment;\\n    }\\n\\n    function getPointsFromTrades(uint256 id) public view returns (uint256) {\\n        uint256[] memory partners = res.getTradingPartners(id);\\n        uint256 pointsFromTeamTrades = 0;\\n        uint256 callerNationTeam = params.getTeam(id);\\n        for (uint256 i = 0; i < partners.length; i++) {\\n            uint256 partnerId = partners[i];\\n            uint256 partnerTeam = params.getTeam(partnerId);\\n            if (callerNationTeam == partnerTeam) {\\n                pointsFromTeamTrades++;\\n            }\\n        }\\n        return pointsFromTeamTrades;\\n    }\\n\\n    function getPointsFromDefcon(uint256 id) public view returns (uint256) {\\n        uint256 defconLevel = mil.getDefconLevel(id);\\n        return (defconLevel - 1);\\n    }\\n\\n    function getPointsToSubtractFromImprovements(\\n        uint256 id\\n    ) public view returns (uint256) {\\n        uint256 pointsToSubtractFromImprovements;\\n        uint256 laborCamps = imp2.getLaborCampCount(id);\\n        if (laborCamps > 0) {\\n            pointsToSubtractFromImprovements += (laborCamps * 1);\\n        }\\n        return pointsToSubtractFromImprovements;\\n    }\\n\\n    function getUniversityPoints(uint256 id) public view returns (uint256) {\\n        uint256 universities = imp3.getUniversityCount(id);\\n        uint256 universityPoints = 0;\\n        bool scientificDevelopmentCenter = won3.getScientificDevelopmentCenter(\\n            id\\n        );\\n        if (universities > 0 && !scientificDevelopmentCenter) {\\n            universityPoints = (universities * 8);\\n        } else if (universities > 0 && scientificDevelopmentCenter) {\\n            universityPoints = (universities * 10);\\n        }\\n        return universityPoints;\\n    }\\n\\n    function getPointsFromGovernment(uint256 id) public view returns (uint256) {\\n        uint256 governmentType = params.getGovernmentType(id);\\n        uint256 pointsFromGovernmentType = 0;\\n        if (\\n            governmentType == 3 ||\\n            governmentType == 6 ||\\n            governmentType == 8 ||\\n            governmentType == 9\\n        ) {\\n            pointsFromGovernmentType = 1;\\n        }\\n        return pointsFromGovernmentType;\\n    }\\n\\n    function getPointsFromMilitary(uint256 id) public view returns (uint256) {\\n        (uint256 ratio, , ) = soldierToPopulationRatio(id);\\n        if (ratio > 70) {\\n            return 10;\\n        } else if (ratio < 10) {\\n            return 14;\\n        } else if (ratio < 20) {\\n            return 5;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function soldierToPopulationRatio(\\n        uint256 id\\n    ) public view returns (uint256, bool, bool) {\\n        uint256 soldierCount = frc.getSoldierCount(id);\\n        if (soldierCount == 0) {\\n            return (0, false, true);\\n        }\\n        uint256 populationCount = inf.getTotalPopulationCount(id);\\n        uint256 soldierPopulationRatio = (\\n            ((soldierCount * 100) / populationCount)\\n        );\\n        bool environmentPenalty = false;\\n        bool anarchyCheck = false;\\n        if (soldierPopulationRatio > 60) {\\n            environmentPenalty = true;\\n        }\\n        if (soldierPopulationRatio < 10) {\\n            anarchyCheck = true;\\n        }\\n        return (soldierPopulationRatio, environmentPenalty, anarchyCheck);\\n    }\\n\\n    function getPointsFromIntelAgencies(\\n        uint256 id\\n    ) public view returns (uint256) {\\n        uint256 intelAgencies = imp2.getIntelAgencyCount(id);\\n        uint256 subtractPoints;\\n        uint256 taxRate = inf.getTaxRate(id);\\n        if (taxRate <= 20) {\\n            subtractPoints = 0;\\n        } else if (intelAgencies >= 1 && taxRate > 20 && taxRate <= 23) {\\n            subtractPoints = 1;\\n        } else if (intelAgencies >= 1 && taxRate > 23) {\\n            subtractPoints = intelAgencies;\\n        } else {\\n            subtractPoints = 0;\\n        }\\n        return subtractPoints;\\n    }\\n}\\n\",\"keccak256\":\"0xb476d1f321dc84c71897b30c641168150e79fb227f960f674a495639d546aad2\",\"license\":\"BUSL-1.1\"},\"contracts/Treasury.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"./IWarBucks.sol\\\";\\nimport \\\"./WarBucks.sol\\\";\\nimport \\\"./Wonders.sol\\\";\\nimport \\\"./Infrastructure.sol\\\";\\nimport \\\"./Forces.sol\\\";\\nimport \\\"./Navy.sol\\\";\\nimport \\\"./Fighters.sol\\\";\\nimport \\\"./CountryMinter.sol\\\";\\nimport \\\"./GroundBattle.sol\\\";\\nimport \\\"./KeeperFile.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n///@title TreasuryContract\\n///@author OxSnosh\\n///@dev this contract allows a nation owner to withdraw game revenues from their nation\\n///@dev this contract allows a nation owner to deposit game revenues into their nation\\n///@dev this contract inherits from the openzeppelin ownable contract\\n///@dev this contract allows the game owner to set the MILF and withdraw game revenues\\ncontract TreasuryContract is Ownable, ReentrancyGuard {\\n    uint256 public totalGameBalance;\\n    uint256 public counter;\\n    address public wonders1;\\n    address public wonders2;\\n    address public wonders3;\\n    address public wonders4;\\n    address public improvements1;\\n    address public improvements2;\\n    address public improvements3;\\n    address public improvements4;\\n    address public infrastructure;\\n    address public navy;\\n    address public navy2;\\n    address public fighters;\\n    address public bombers;\\n    address public fightersMarket1;\\n    address public fightersMarket2;\\n    address public bombersMarket1;\\n    address public bombersMarket2;\\n    address public warBucksAddress;\\n    address public forces;\\n    address public spies;\\n    address public missiles;\\n    address public aid;\\n    address public taxes;\\n    address public bills;\\n    address public spyOperations;\\n    address public groundBattle;\\n    address public countryMinter;\\n    address public landMarket;\\n    address public techMarket;\\n    address public infrastructureMarket;\\n    address public keeper;\\n    address public parameters;\\n    uint256 public daysToInactive = 30;\\n    uint256 public maxDaysOfTaxes = 20;\\n    uint256 private silt = 0;\\n    uint256 public seedMoney = 2000000 * (10 ** 18);\\n\\n    CountryMinter mint;\\n    GroundBattleContract ground;\\n    KeeperContract keep;\\n\\n    struct Treasury {\\n        bool initialized;\\n        uint256 dayOfLastBillPaid;\\n        uint256 dayOfLastTaxCollection;\\n        uint256 balance;\\n        bool demonitized;\\n    }\\n\\n    mapping(uint256 => Treasury) public idToTreasury;\\n\\n    event FundsWithdrawn(\\n        uint256 countryId,\\n        uint256 amount\\n    );\\n\\n    event FundsAdded(\\n        uint256 countryId,\\n        uint256 amount\\n    );\\n\\n    event OwnerWithdrawMilfRevenues(\\n        uint256 amount\\n    );\\n\\n    event SeedMoneyUpdated(\\n        uint256 newSeedMoney\\n    );\\n\\n    event SpoilsTransferred(\\n        uint256 attackerId,\\n        uint256 defenderId,\\n        uint256 fundsTransferred\\n    );\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings1(\\n        address _warBucksAddress,\\n        address _wonders1,\\n        address _wonders2,\\n        address _wonders3,\\n        address _wonders4,\\n        address _improvements1,\\n        address _improvements2,\\n        address _improvements3,\\n        address _improvements4,\\n        address _infrastructure\\n    ) public onlyOwner {\\n        warBucksAddress = _warBucksAddress;\\n        wonders1 = _wonders1;\\n        wonders2 = _wonders2;\\n        wonders3 = _wonders3;\\n        wonders4 = _wonders4;\\n        improvements1 = _improvements1;\\n        improvements2 = _improvements2;\\n        improvements3 = _improvements3;\\n        improvements4 = _improvements4;\\n        infrastructure = _infrastructure;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings2(\\n        address _groundBattle,\\n        address _countryMinter,\\n        address _keeper,\\n        address _forces,\\n        address _navy,\\n        address _fighters,\\n        address _bombers,\\n        address _aid,\\n        address _taxes,\\n        address _bills,\\n        address _spyOperations\\n    ) public onlyOwner {\\n        groundBattle = _groundBattle;\\n        ground = GroundBattleContract(_groundBattle);\\n        countryMinter = _countryMinter;\\n        mint = CountryMinter(_countryMinter);\\n        keeper = _keeper;\\n        keep = KeeperContract(_keeper);\\n        forces = _forces;\\n        navy = _navy;\\n        fighters = _fighters;\\n        bombers = _bombers;\\n        aid = _aid;\\n        taxes = _taxes;\\n        bills = _bills;\\n        spyOperations = _spyOperations;\\n    }\\n\\n    function settings3(\\n        address _navy2,\\n        address _missiles,\\n        address _infrastructureMarket,\\n        address _landMarket,\\n        address _techMarket,\\n        address _fightersMarket1,\\n        address _fightersMarket2,\\n        address _bombersMarket1,\\n        address _bombersMarket2,\\n        address _parameters,\\n        address _spies\\n    ) public onlyOwner {\\n        navy2 = _navy2;\\n        missiles = _missiles;\\n        infrastructureMarket = _infrastructureMarket;\\n        landMarket = _landMarket;\\n        techMarket = _techMarket;\\n        fightersMarket1 = _fightersMarket1;\\n        fightersMarket2 = _fightersMarket2;\\n        bombersMarket1 = _bombersMarket1;\\n        bombersMarket2 = _bombersMarket2;\\n        parameters = _parameters;\\n        spies = _spies;\\n    }\\n\\n    modifier onlyCountryMinter() {\\n        require(\\n            msg.sender == countryMinter,\\n            \\\"function only callable from country minter contract\\\"\\n        );\\n        _;\\n    }\\n\\n    ///@dev this function is only callable from the country minter contract\\n    ///@notice this function will be called when a nation is minted and will allow a nation to undergo treasury operations\\n    ///@param id is the nation id of the nation being minted\\n    function generateTreasury(uint256 id) public onlyCountryMinter {\\n        require(\\n            idToTreasury[id].initialized == false,\\n            \\\"treasury already initialized\\\"\\n        );\\n        uint256 gameDay = keep.getGameDay();\\n        Treasury memory newTreasury = Treasury(\\n            true,\\n            gameDay,\\n            gameDay,\\n            0,\\n            false\\n        );\\n        idToTreasury[id] = newTreasury;\\n        idToTreasury[id].balance += seedMoney;\\n        totalGameBalance += seedMoney;\\n        counter++;\\n    }\\n\\n    ///@dev this is a public view function that will return a nations in game balance\\n    ///@notice this function will return a given nations in game balance\\n    ///@param id is the nation id of the nation being queries\\n    ///@return uint256 is the balance of war bucks for the nation\\n    function checkBalance(uint256 id) public view returns (uint256) {\\n        return idToTreasury[id].balance;\\n    }\\n\\n    ///@dev this function is only callable from a nation owner\\n    ///@dev this function allows a nation owner to withdraw funds from their nation\\n    ///@notice this function allows a nation owner to withdraw funds from their nation\\n    ///@param amount is the amount of funds being withdrawn\\n    ///@param id is the nation id of the nation withdrawing funds\\n    function withdrawFunds(uint256 amount, uint256 id) public nonReentrant {\\n        uint256 gameBalance = idToTreasury[id].balance;\\n        require(gameBalance >= amount, \\\"insufficient game balance\\\");\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        uint256 gameDay = keep.getGameDay();\\n        uint256 daysOfBillsPaid = idToTreasury[id].dayOfLastBillPaid;\\n        require(\\n            daysOfBillsPaid == gameDay,\\n            \\\"pay bills before withdrawing funds\\\"\\n        );\\n        bool demonitized = idToTreasury[id].demonitized;\\n        require(demonitized == false, \\\"ERROR\\\");\\n        idToTreasury[id].balance -= amount;\\n        totalGameBalance -= amount;\\n        IWarBucks(warBucksAddress).mintFromTreasury(msg.sender, amount);\\n        emit FundsWithdrawn(id, amount);\\n    }\\n\\n    ///@dev this function is only callable from a nation owner\\n    ///@dev this function allows a nation owner to add funds to their nation\\n    ///@notice this function allows a nation owner to add funds to their nation\\n    ///@param amount is the amount of funds being added\\n    ///@param id is the nation id of the nation withdrawing funds\\n    function addFunds(uint256 amount, uint256 id) public nonReentrant{\\n        uint256 coinBalance = IWarBucks(warBucksAddress).balanceOf(msg.sender);\\n        require(\\n            coinBalance >= amount,\\n            \\\"deposit amount exceeds balance in wallet\\\"\\n        );\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        bool demonitized = idToTreasury[id].demonitized;\\n        require(demonitized == false, \\\"ERROR\\\");\\n        idToTreasury[id].balance += amount;\\n        totalGameBalance += amount;\\n        IWarBucks(warBucksAddress).burnFromTreasury(msg.sender, amount);\\n        emit FundsAdded(id, amount);\\n    }\\n\\n    ///@dev this funtion is a public view function that will return the number of days it has been since a nation has collected taxes\\n    ///@notice this funtion will return the number of days it has been since a nation has collected taxes\\n    ///@param id is the nation id of the nation being queried\\n    ///@return uint256 is the number of days since a nation has collected taxes\\n    function getDaysSinceLastTaxCollection(\\n        uint256 id\\n    ) public view returns (uint256) {\\n        uint256 gameDay = keep.getGameDay();\\n        uint256 dayOfLastTaxCollected = idToTreasury[id].dayOfLastTaxCollection;\\n        uint256 daysSince = (gameDay - dayOfLastTaxCollected);\\n        if (daysSince > maxDaysOfTaxes) {\\n            daysSince = maxDaysOfTaxes;\\n        }\\n        return daysSince;\\n    }\\n\\n    function getMaxDaysOfTaxes() public view returns (uint256) {\\n        return maxDaysOfTaxes;\\n    }\\n\\n    function setMaxDaysOfTaxes(uint256 newMaxDays) public onlyOwner {\\n        maxDaysOfTaxes = newMaxDays;\\n    }\\n\\n    modifier onlyTaxesContract() {\\n        require(msg.sender == taxes, \\\"only callable from taxes contract\\\");\\n        _;\\n    }\\n\\n    ///@dev this function is only callable by the taxes contract\\n    ///@dev this function will increase a nations balance when taxes are collected\\n    ///@param id this is the nation id of the country collecting taxes\\n    ///@param amount this is the amount of taxes being collected\\n    function increaseBalanceOnTaxCollection(\\n        uint256 id,\\n        uint256 amount\\n    ) public onlyTaxesContract {\\n        idToTreasury[id].balance += amount;\\n        totalGameBalance += amount;\\n        uint256 day = keep.getGameDay();\\n        idToTreasury[id].dayOfLastTaxCollection = day;\\n    }\\n\\n    ///@dev this funtion is a public view function that will return the number of days it has been since a nation has paid bills\\n    ///@notice this funtion will return the number of days it has been since a nation has paid bills\\n    ///@param id is the nation id of the nation being queried\\n    ///@return uint256 is the number of days since a nation has paid bills\\n    function getDaysSinceLastBillsPaid(\\n        uint256 id\\n    ) public view returns (uint256) {\\n        uint256 gameDay = keep.getGameDay();\\n        uint256 dayOfLastBillPaid = idToTreasury[id].dayOfLastBillPaid;\\n        uint256 daysSince = (gameDay - dayOfLastBillPaid);\\n        if (daysSince > daysToInactive) {\\n            daysSince = daysToInactive;\\n        }\\n        return daysSince;\\n    }\\n\\n    modifier onlyBillsContract() {\\n        require(msg.sender == bills, \\\"only callable from taxes contract\\\");\\n        _;\\n    }\\n\\n    ///@dev this function is only callable from the bills contract\\n    ///@dev this function will decrease a nations balance when bils are paid\\n    ///@param id is the nation id of the nation paying bills\\n    ///@param amount is the amount of bills being paid\\n    function decreaseBalanceOnBillsPaid(\\n        uint256 id,\\n        uint256 amount\\n    ) public onlyBillsContract returns (bool) {\\n        require(\\n            idToTreasury[id].balance >= amount,\\n            \\\"balance not high enough to pay bills\\\"\\n        );\\n        idToTreasury[id].balance -= amount;\\n        totalGameBalance -= amount;\\n        uint256 day = keep.getGameDay();\\n        idToTreasury[id].dayOfLastBillPaid = day;\\n        return true;\\n    }\\n\\n    ///@dev this is a public view function that will return if a nation is inactive\\n    ///@notice this function will retun if a nation is inactive\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool will be true if the nation is inactive\\n    function checkInactive(uint256 id) public view returns (bool) {\\n        uint256 day = keep.getGameDay();\\n        uint256 dayBillsPaid = idToTreasury[id].dayOfLastBillPaid;\\n        uint256 elapsed = (day - dayBillsPaid);\\n        bool inactive = false;\\n        if (elapsed > daysToInactive) {\\n            inactive = true;\\n        }\\n        return inactive;\\n    }\\n\\n    ///@dev this function is only callable from the contract owner\\n    ///@dev this function will allow the contract owner to set the number of days a nation cannot pay bill until it becomes inactive\\n    ///@notice this function will allow the contract owner to set the number of days a nation cannot pay bill until it becomes inactive\\n    function setDaysToInactive(uint256 newDays) public onlyOwner {\\n        daysToInactive = newDays;\\n    }\\n\\n    function getDaysToInactive() public view returns (uint256) {\\n        return daysToInactive;\\n    }\\n\\n    modifier approvedBalanceSpender() {\\n        require(\\n            msg.sender == bombers ||\\n                msg.sender == bombersMarket1 ||\\n                msg.sender == bombersMarket2 ||\\n                msg.sender == fightersMarket1 ||\\n                msg.sender == fightersMarket2 ||\\n                msg.sender == fighters ||\\n                msg.sender == forces ||\\n                msg.sender == missiles ||\\n                msg.sender == navy ||\\n                msg.sender == navy2 ||\\n                msg.sender == improvements1 ||\\n                msg.sender == improvements2 ||\\n                msg.sender == improvements3 ||\\n                msg.sender == improvements4 ||\\n                msg.sender == wonders1 ||\\n                msg.sender == wonders2 ||\\n                msg.sender == wonders3 ||\\n                msg.sender == wonders4 ||\\n                msg.sender == infrastructureMarket ||\\n                msg.sender == techMarket ||\\n                msg.sender == landMarket ||\\n                msg.sender == spyOperations ||\\n                msg.sender == parameters ||\\n                msg.sender == spies,\\n            \\\"cannot call spendBalance()\\\"\\n        );\\n        _;\\n    }\\n\\n    ///@dev this function is public but only callable by contracts within the game where funds are being spent\\n    ///@dev this function will decrease a nation owner's balance when money is spent within the game\\n    ///@notice this function will decrease a nation owner's balance when money is spent within the game\\n    ///@param id is the nation id of the nation spending funds\\n    ///@param cost is the cost of the expense\\n    function spendBalance(\\n        uint256 id,\\n        uint256 cost\\n    ) external approvedBalanceSpender returns (bool) {\\n        uint256 balance = idToTreasury[id].balance;\\n        require(balance >= cost, \\\"insufficient balance\\\");\\n        bool demonitized = idToTreasury[id].demonitized;\\n        require(demonitized == false, \\\"ERROR\\\");\\n        bool inactive = checkInactive(id);\\n        require(inactive == false, \\\"ERROR Inactive, pay bills to reactivate\\\");\\n        idToTreasury[id].balance -= cost;\\n        totalGameBalance -= cost;\\n        //TAXES here\\n        uint256 taxLevied = ((cost * silt) / 100);\\n        if (taxLevied > 0) {\\n            IWarBucks(warBucksAddress).mintFromTreasury(\\n                address(this),\\n                taxLevied\\n            );\\n        }\\n        return true;\\n    }\\n\\n    ///@dev this function will show the balance of warbucks within the contract\\n    ///@dev when money is spent within the game it can be taxed an deposited within this contract\\n    function viewSiltRevenues() public view returns (uint256) {\\n        return (WarBucks(warBucksAddress).balanceOf(address(this)));\\n    }\\n\\n    ///@dev when money is spent within the game it can be taxed an deposited within this contract\\n    ///@dev this function will allow the contract owner to withdraw the warbucks from this contract into the owners wallet\\n    function withdrawSiltRevenues(uint256 amount) public onlyOwner {\\n        WarBucks(warBucksAddress).transfer(msg.sender, amount);\\n        emit OwnerWithdrawMilfRevenues(amount);\\n    }\\n\\n    ///@notice the seed money is the amount of warbucks that a nation owner will need to have in their wallet when the nation is minted \\n    ///@dev when a nation is minted the seed money is deposited into the nations balance and the warbucks are burned\\n    ///@param newSeedMoney is the new amount of warbucks that a nation owner will need to have in their wallet when the nation is minted\\n    function updateSeedMoney(uint256 newSeedMoney) public onlyOwner {\\n        seedMoney = (newSeedMoney * (10 ** 18));\\n        emit SeedMoneyUpdated(newSeedMoney);\\n    }\\n\\n    ///@notice this function will return the seed money that is required to mint a nation\\n    ///@notice seed money is the amount of warbuck a nation will need to have in their wallet when the nation is minted\\n    ///@dev when a nation is minted the seed money is deposited into the nations balance and the warucks are burned\\n    ///@return uint256 is the seed money required to mint a nation\\n    function getSeedMoney() public view returns (uint256) {\\n        return seedMoney;\\n    }\\n\\n    ///@dev this function allows the contract owner to set the tax rate in game purchases are taxed at\\n    ///@dev the tax rate will be the % of the purchase price that is minted into this contract that can be withdrawn later\\n    function setSilt(uint256 newPercentage) public onlyOwner {\\n        silt = newPercentage;\\n    }\\n\\n    ///@dev this funtion will reuturn the game tax rate\\n    ///@return uint256 will be the tax rate at which purchases in the game are taxed at\\n    function getSilt() public view returns (uint256) {\\n        return silt;\\n    }\\n\\n    function demonetizeNation(uint256 id) public onlyOwner {\\n        idToTreasury[id].demonitized = true;\\n    }\\n\\n    function remonetizeNation(uint256 id) public onlyOwner {\\n        idToTreasury[id].demonitized = false;\\n    }\\n\\n    function isNationDemonetized(uint256 id) public view returns (bool) {\\n        return idToTreasury[id].demonitized;\\n    }\\n\\n    function getTotalGameBalance() public view returns (uint256) {\\n        return totalGameBalance;\\n    }\\n\\n    modifier onlyAidContract() {\\n        require(msg.sender == aid);\\n        _;\\n    }\\n\\n    ///@dev this function is only callable from the aid contract\\n    ///@dev this function will send the balance in an aid package from the sender nation to the recipient nation\\n    ///@param idSender is the sender of an aid package\\n    ///@param idRecipient is the recipient of an aid package\\n    ///@param amount is the amount of balance being included in the aid package\\n    function sendAidBalance(\\n        uint256 idSender,\\n        uint256 idRecipient,\\n        uint256 amount\\n    ) public onlyAidContract returns (bool) {\\n        uint256 balance = idToTreasury[idSender].balance;\\n        require(balance >= amount, \\\"not enough balance\\\");\\n        idToTreasury[idSender].balance -= amount;\\n        idToTreasury[idRecipient].balance += amount;\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x08ffb732c0aa717bd95a0712e2e04d1e63b83ab53b48d0da35e08a9129c9027c\",\"license\":\"BUSL-1.1\"},\"contracts/War.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"./NationStrength.sol\\\";\\nimport \\\"./Military.sol\\\";\\nimport \\\"./Wonders.sol\\\";\\nimport \\\"./CountryMinter.sol\\\";\\nimport \\\"./Treasury.sol\\\";\\nimport \\\"./KeeperFile.sol\\\";\\nimport \\\"./Forces.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n///@title WarContract\\n///@author OxSnosh\\n///@notice this contact will allow a naion owner to declare war on another nation\\n///@notice this contract will also handle peace negotiations\\n///@dev this contract inherits from openzeppelin's ownable contract\\ncontract WarContract is Ownable {\\n    uint256 public warId;\\n    address public countryMinter;\\n    address public nationStrength;\\n    address public military;\\n    address public breakBlockade;\\n    address public navalAttack;\\n    address public airBattle;\\n    address public groundBattle;\\n    address public cruiseMissile;\\n    address public blockade;\\n    address public nuke;\\n    address public forces;\\n    address public wonders1;\\n    address public keeper;\\n    address public treasury;\\n\\n    NationStrengthContract nsc;\\n    MilitaryContract mil;\\n    WondersContract1 won1;\\n    CountryMinter mint;\\n    TreasuryContract tres;\\n    KeeperContract keep;\\n    ForcesContract forc;\\n\\n    struct War {\\n        uint256 offenseId;\\n        uint256 defenseId;\\n        bool active;\\n        uint256 dayStarted;\\n        bool peaceDeclared;\\n        bool offensePeaceOffered;\\n        bool defensePeaceOffered;\\n        uint256 offenseBlockades;\\n        uint256 defenseBlockades;\\n        mapping(uint256 => uint256) offenseIdToCruiseMissileLaunchesToday;\\n        mapping(uint256 => uint256) defenseIdToCruiseMissileLaunchesToday;\\n    }\\n\\n    struct OffenseDeployed1 {\\n        mapping(uint256 => bool) offenseDeployedToday;\\n        uint256 soldiersDeployed;\\n        uint256 tanksDeployed;\\n    }\\n\\n    struct DefenseDeployed1 {\\n        mapping(uint256 => bool) defenseDeployedToday;\\n        uint256 soldiersDeployed;\\n        uint256 tanksDeployed;\\n    }\\n\\n    struct OffenseLosses {\\n        uint256 warId;\\n        uint256 nationId;\\n        uint256 soldiersLost;\\n        uint256 tanksLost;\\n        uint256 cruiseMissilesLost;\\n        uint256 aircraftLost;\\n        uint256 navyShipsLost;\\n        uint256 infrastructureLost;\\n        uint256 technologyLost;\\n        uint256 landLost;\\n    }\\n\\n    struct DefenseLosses {\\n        uint256 warId;\\n        uint256 nationId;\\n        uint256 soldiersLost;\\n        uint256 tanksLost;\\n        uint256 cruiseMissilesLost;\\n        uint256 aircraftLost;\\n        uint256 navyShipsLost;\\n        uint256 infrastructureLost;\\n        uint256 technologyLost;\\n        uint256 landLost;\\n    }\\n\\n    mapping(uint256 => War) public warIdToWar;\\n    mapping(uint256 => OffenseDeployed1) public warIdToOffenseDeployed1;\\n    mapping(uint256 => DefenseDeployed1) public warIdToDefenseDeployed1;\\n    mapping(uint256 => OffenseLosses) public warIdToOffenseLosses;\\n    mapping(uint256 => DefenseLosses) public warIdToDefenseLosses;\\n    mapping(uint256 => uint256[]) public idToActiveWars;\\n    mapping(uint256 => uint256[]) public idToOffensiveWars;\\n    mapping(uint256 => uint256[]) public idToDeactivatedWars;\\n\\n    event WarDeclared(\\n        uint256 indexed warId,\\n        uint256 indexed offenseId,\\n        uint256 indexed defenseId\\n    );\\n\\n    event PeaceOffered(uint256 indexed warId, uint256 indexed offeredBy);\\n\\n    event PeaceDeclared(\\n        uint256 indexed warId,\\n        uint256 indexed offenseId,\\n        uint256 indexed defenseId\\n    );\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings(\\n        address _countryMinter,\\n        address _nationStrength,\\n        address _military,\\n        address _breakBlockadeAddress,\\n        address _navalAttackAddress,\\n        address _airBattleAddress,\\n        address _groundBattle,\\n        address _cruiseMissile,\\n        address _forces,\\n        address _wonders1,\\n        address _keeper\\n    ) public onlyOwner {\\n        countryMinter = _countryMinter;\\n        mint = CountryMinter(_countryMinter);\\n        nationStrength = _nationStrength;\\n        breakBlockade = _breakBlockadeAddress;\\n        navalAttack = _navalAttackAddress;\\n        airBattle = _airBattleAddress;\\n        groundBattle = _groundBattle;\\n        nsc = NationStrengthContract(_nationStrength);\\n        military = _military;\\n        mil = MilitaryContract(_military);\\n        cruiseMissile = _cruiseMissile;\\n        forces = _forces;\\n        wonders1 = _wonders1;\\n        won1 = WondersContract1(_wonders1);\\n        keeper = _keeper;\\n        keep = KeeperContract(_keeper);\\n    }\\n\\n    function settings2(\\n        address _treasury,\\n        address _forces,\\n        address _blockade,\\n        address _nuke\\n    ) public onlyOwner {\\n        treasury = _treasury;\\n        tres = TreasuryContract(_treasury);\\n        forces = _forces;\\n        forc = ForcesContract(_forces);\\n        blockade = _blockade;\\n        nuke = _nuke;\\n    }\\n\\n    modifier onlyCruiseMissileContract() {\\n        require(\\n            msg.sender == cruiseMissile,\\n            \\\"only callable from cruise missile contract\\\"\\n        );\\n        _;\\n    }\\n\\n    ///@dev this function is only callable from a nation owner and allow a natio nto eclare war on another nation\\n    ///@notice this function allows a nation to declare war on another nation\\n    ///@notice when war is declared the nations can attack each other\\n    ///@param offenseId is the nation id of the nation declaring war\\n    ///@param defenseId is the nation id of the nation having war declared on it\\n    ///@notice a nation can only have a maximum of 4 offensive wars (5 with a foreign army base)\\n    function declareWar(uint256 offenseId, uint256 defenseId) public {\\n        bool isOwner = mint.checkOwnership(offenseId, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        bool isOwner2 = mint.checkOwnership(defenseId, msg.sender);\\n        require (!isOwner2, \\\"cannot declare war on yourself\\\");\\n        bool check = warCheck(offenseId, defenseId);\\n        require(check, \\\"war not possible\\\");\\n        uint day = keep.getGameDay();\\n        War storage war = warIdToWar[warId];\\n        war.offenseId = offenseId;\\n        war.defenseId = defenseId;\\n        war.active = true;\\n        war.dayStarted = day;\\n        war.peaceDeclared = false;\\n        war.offensePeaceOffered = false;\\n        war.defensePeaceOffered = false;\\n        OffenseLosses memory newOffenseLosses = OffenseLosses(\\n            warId,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0\\n        );\\n        warIdToOffenseLosses[warId] = newOffenseLosses;\\n        DefenseLosses memory newDefenseLosses = DefenseLosses(\\n            warId,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0,\\n            0\\n        );\\n        warIdToDefenseLosses[warId] = newDefenseLosses;\\n        uint256[] storage offensiveWars = idToOffensiveWars[offenseId];\\n        uint256 maxOffensiveWars = 4;\\n        bool foreignArmyBase = won1.getForeignArmyBase(offenseId);\\n        if (foreignArmyBase) {\\n            maxOffensiveWars = 5;\\n        }\\n        offensiveWars.push(warId);\\n        require(\\n            offensiveWars.length <= maxOffensiveWars,\\n            \\\"you do not have an offensive war slot available\\\"\\n        );\\n        uint256[] storage offenseActiveWars = idToActiveWars[offenseId];\\n        offenseActiveWars.push(warId);\\n        uint256[] storage defenseActiveWars = idToActiveWars[defenseId];\\n        defenseActiveWars.push(warId);\\n        initializeDeployments(warId);\\n        emit WarDeclared(warId, offenseId, defenseId);\\n        warId++;\\n    }\\n\\n    function warCheck(\\n        uint256 offenseId,\\n        uint256 defenseId\\n    ) internal view returns (bool) {\\n        (bool isWarOkOffense, ) = mil.getWarPeacePreference(offenseId);\\n        require(isWarOkOffense == true, \\\"you are in peace mode\\\");\\n        (bool isWarOkDefense, ) = mil.getWarPeacePreference(defenseId);\\n        require(isWarOkDefense == true, \\\"nation in peace mode\\\");\\n        bool isStrengthWithinRange = checkStrength(offenseId, defenseId);\\n        require(\\n            isStrengthWithinRange == true,\\n            \\\"nation strength is not within range to declare war\\\"\\n        );\\n        bool defenderInactive = tres.checkInactive(defenseId);\\n        require(!defenderInactive, \\\"defender inactive\\\");\\n        bool offenseInactive = tres.checkInactive(offenseId);\\n        require(!offenseInactive, \\\"nation inactive\\\");\\n        uint256[] memory defenseActiveWars = idToActiveWars[defenseId];\\n        //if you get caught spoofing wars to occupy slots your nations will be demonitized\\n        uint256[] memory activeWars = idToActiveWars[offenseId];\\n        require(\\n            defenseActiveWars.length < 50 && activeWars.length < 50,\\n            \\\"defender or attacker already has 50 active wars\\\"\\n        );\\n        for (uint256 i = 0; i < activeWars.length; i++) {\\n            uint256 war = activeWars[i];\\n            (uint256 offense, uint256 defense) = getInvolvedParties(war);\\n            require(\\n                offense != defenseId && defense != defenseId,\\n                \\\"already at war with this nation\\\"\\n            );\\n        }\\n        return true;\\n    }\\n\\n    function offensiveWarLength(\\n        uint256 offenseId\\n    ) public view returns (uint256) {\\n        uint256[] memory offensiveWars = idToOffensiveWars[offenseId];\\n        return offensiveWars.length;\\n    }\\n\\n    function offensiveWarReturn(\\n        uint256 offenseId\\n    ) public view returns (uint256[] memory) {\\n        uint256[] memory offensiveWars = idToOffensiveWars[offenseId];\\n        return offensiveWars;\\n    }\\n\\n    function nationActiveWarsReturn(\\n        uint256 offenseId\\n    ) public view returns (uint256[] memory) {\\n        uint256[] memory activeWarsArray = idToActiveWars[offenseId];\\n        return activeWarsArray;\\n    }\\n\\n    ///@dev this is an internal function that will be balled by the declare war function and set up several structs that will keep track of each war\\n    function initializeDeployments(uint256 _warId) internal {\\n        OffenseDeployed1 storage newOffenseDeployed1 = warIdToOffenseDeployed1[\\n            _warId\\n        ];\\n        newOffenseDeployed1.soldiersDeployed = 0;\\n        newOffenseDeployed1.tanksDeployed = 0;\\n        DefenseDeployed1 storage newDefenseDeployed1 = warIdToDefenseDeployed1[\\n            _warId\\n        ];\\n        newDefenseDeployed1.soldiersDeployed = 0;\\n        newDefenseDeployed1.tanksDeployed = 0;\\n    }\\n\\n    ///@dev this is a public view function that will return a boolean value if the nations are able to fight eachother\\n    ///@notice this function will return a boolean value of true if the nations are able to fight eachother\\n    ///@notice in order for a war to be declared the offense strength must be within 75% and 133% of the defending nation\\n    ///@param offenseId is the nation id of the aggressor nation\\n    ///@param defenseId if the nation id of the defending nation\\n    ///@return bool will be true if the nations are within range where war is possible\\n    function checkStrength(\\n        uint256 offenseId,\\n        uint256 defenseId\\n    ) public view returns (bool) {\\n        uint256 offenseStrength = nsc.getNationStrength(offenseId);\\n        uint256 defenseStrength = nsc.getNationStrength(defenseId);\\n        uint256 strengthRatio = ((offenseStrength * 100) / defenseStrength);\\n        if (strengthRatio < 75) {\\n            return false;\\n        } else if (strengthRatio > 133) {\\n            return false;\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    ///@dev this is a public function that will allow a nation involved in a war to offer peace\\n    ///@notice this funtion will allow a nation involved in a war to offer peace\\n    ///@param offerId is the nation offering peace\\n    ///@param _warId is the war id for the war where peace is being offered\\n    ///@notice if the offense and the defense offer peace then peace will be declares\\n    ///@notice an attack will nullify any existing peace offers\\n    function offerPeace(uint256 offerId, uint256 _warId) public {\\n        bool isOwner = mint.checkOwnership(offerId, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        uint256 offenseNation = warIdToWar[_warId].offenseId;\\n        uint256 defenseNation = warIdToWar[_warId].defenseId;\\n        require(\\n            offerId == offenseNation || offerId == defenseNation,\\n            \\\"nation not involved in this war\\\"\\n        );\\n        if (offerId == offenseNation) {\\n            warIdToWar[_warId].offensePeaceOffered = true;\\n        }\\n        if (offerId == defenseNation) {\\n            warIdToWar[_warId].defensePeaceOffered = true;\\n        }\\n        emit PeaceOffered(_warId, offerId);\\n        bool offensePeaceCheck = warIdToWar[_warId].offensePeaceOffered;\\n        bool defensePeaceCheck = warIdToWar[_warId].defensePeaceOffered;\\n        if (offensePeaceCheck == true && defensePeaceCheck == true) {\\n            warIdToWar[_warId].peaceDeclared = true;\\n            warIdToWar[_warId].active = false;\\n            emit PeaceDeclared(_warId, offenseNation, defenseNation);\\n            removeActiveWar(_warId);\\n        }\\n    }\\n\\n    ///@dev this is a public view function that will return information about a war\\n    ///@notice this function will return information about a war\\n    ///@param _warId is the war id of the war being queried\\n    ///@return offensePeaceOffered is a boolean value that will be true if the offense offered peace\\n    ///@return defensePeaceOffered is a boolean value that will be true if the defense nation offered peace\\n    ///@return warActive will return a boolean true if the war is still active\\n    ///@return peaceDeclared will return a boolean true of peace was declared by both sides\\n    function returnWar(\\n        uint256 _warId\\n    ) public view returns (bool, bool, bool, bool) {\\n        bool offensePeaceOffered = warIdToWar[_warId].offensePeaceOffered;\\n        bool defensePeaceOffered = warIdToWar[_warId].defensePeaceOffered;\\n        bool warActive = warIdToWar[_warId].active;\\n        bool peaceDeclared = warIdToWar[_warId].peaceDeclared;\\n        return (\\n            offensePeaceOffered,\\n            defensePeaceOffered,\\n            warActive,\\n            peaceDeclared\\n        );\\n    }\\n\\n    function returnWarDetails(\\n        uint256 _warId\\n    )\\n        public\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            bool,\\n            uint256,\\n            bool,\\n            bool,\\n            bool,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        War storage war = warIdToWar[_warId];\\n        return (\\n            war.offenseId,\\n            war.defenseId,\\n            war.active,\\n            war.dayStarted,\\n            war.peaceDeclared,\\n            war.offensePeaceOffered,\\n            war.defensePeaceOffered,\\n            war.offenseBlockades,\\n            war.defenseBlockades\\n        );\\n    }\\n\\n    ///@dev this is an internal function that will remove the active war from each nation when peace is declared or the war expires\\n    function removeActiveWar(uint256 _warId) internal {\\n        (uint256 offenseId, uint256 defenseId) = getInvolvedParties(_warId);\\n        uint256[] storage offenseActiveWars = idToActiveWars[offenseId];\\n        uint256[] storage offenseDeactivatedWars = idToDeactivatedWars[\\n            offenseId\\n        ];\\n        for (uint256 i = 0; i < offenseActiveWars.length; i++) {\\n            if (offenseActiveWars[i] == _warId) {\\n                offenseDeactivatedWars.push(_warId);\\n                offenseActiveWars[i] = offenseActiveWars[\\n                    offenseActiveWars.length - 1\\n                ];\\n                offenseActiveWars.pop();\\n            }\\n        }\\n        uint256[] storage offensiveWars = idToOffensiveWars[offenseId];\\n        for (uint256 i = 0; i < offensiveWars.length; i++) {\\n            if (offensiveWars[i] == _warId) {\\n                offensiveWars[i] = offensiveWars[offensiveWars.length - 1];\\n                offensiveWars.pop();\\n            }\\n        }\\n        uint256[] storage defenseActiveWars = idToActiveWars[defenseId];\\n        uint256[] storage defenseDeactivatedWars = idToDeactivatedWars[\\n            defenseId\\n        ];\\n        for (uint256 i = 0; i < defenseActiveWars.length; i++) {\\n            if (defenseActiveWars[i] == _warId) {\\n                defenseDeactivatedWars.push(_warId);\\n                defenseActiveWars[i] = defenseActiveWars[\\n                    defenseActiveWars.length - 1\\n                ];\\n                defenseActiveWars.pop();\\n            }\\n        }\\n        warIdToWar[_warId].active = false;\\n    }\\n\\n    modifier onlyNavyBattle() {\\n        require(\\n            msg.sender == breakBlockade || msg.sender == navalAttack,\\n            \\\"function only callable from navy battle contract\\\"\\n        );\\n        _;\\n    }\\n\\n    ///@dev this function is only callable from the navy battle contract and will increment navy casualties\\n    function addNavyCasualties(\\n        uint256 _warId,\\n        uint256 nationId,\\n        uint256 navyCasualties\\n    ) public onlyNavyBattle {\\n        (uint256 offenseId, uint256 defenseId) = getInvolvedParties(_warId);\\n        if (offenseId == nationId) {\\n            warIdToOffenseLosses[_warId].navyShipsLost = navyCasualties;\\n        }\\n        if (defenseId == nationId) {\\n            warIdToDefenseLosses[_warId].navyShipsLost = navyCasualties;\\n        }\\n    }\\n\\n    ///@dev this function is only callable from the cruise missile contract and will only allow a nation to launch 2 cruise missiles per war per day\\n    ///@notice this function will only allow a nation to launch 2 cruise missiles per war per day\\n    function incrementCruiseMissileAttack(\\n        uint256 _warId,\\n        uint256 nationId\\n    ) public onlyCruiseMissileContract {\\n        (uint256 offenseId, uint256 defenseId) = getInvolvedParties(_warId);\\n        uint256 day = keep.getGameDay();\\n        War storage war = warIdToWar[_warId];\\n        if (nationId == offenseId) {\\n            require(\\n                war.offenseIdToCruiseMissileLaunchesToday[day] < 2,\\n                \\\"too many launches today\\\"\\n            );\\n            war.offenseIdToCruiseMissileLaunchesToday[day] += 1;\\n        } else if (nationId == defenseId) {\\n            require(\\n                war.defenseIdToCruiseMissileLaunchesToday[day] < 2,\\n                \\\"too many launches today\\\"\\n            );\\n            war.defenseIdToCruiseMissileLaunchesToday[day] += 1;\\n        }\\n    }\\n\\n    function getCruiseMissileLaunchesToday(\\n        uint256 _warId,\\n        uint256 id\\n    ) public view returns (uint256) {\\n        (uint256 offenseId, uint256 defenseId) = getInvolvedParties(_warId);\\n        uint256 day = keep.getGameDay();\\n        uint256 launches;\\n        War storage war = warIdToWar[_warId];\\n        if (id == offenseId) {\\n            launches = war.offenseIdToCruiseMissileLaunchesToday[day];\\n        } else if (id == defenseId) {\\n            launches = war.defenseIdToCruiseMissileLaunchesToday[day];\\n        }\\n        return launches;\\n    }\\n\\n    ///@dev this is a public view function that will take a war id as a parameter and return whether the war is active or not\\n    ///@notice this function will return whether a war is active or not\\n    ///@param _warId is the warId being queries\\n    ///@return bool will be true if the war is active\\n    function isWarActive(uint256 _warId) public view returns (bool) {\\n        bool isActive = true;\\n        bool warDoesntExist = warIdToWar[_warId].active;\\n        (, bool expired) = getDaysLeft(_warId);\\n        bool peaceDeclared = warIdToWar[_warId].peaceDeclared;\\n        if (expired == true || peaceDeclared == true) {\\n            isActive = false;\\n        } else if (warDoesntExist == false) {\\n            isActive = false;\\n        }\\n        console.log(isActive, \\\"war active\\\");\\n        return isActive;\\n    }\\n\\n    ///@dev this is a public view function that will return the two members f a given warId\\n    ///@param _warId is the warId of the war being queried\\n    ///@return offenseId is the nation id of the offensive nation in the war\\n    ///@return defenseId is the nation id of the defensive nation in the war\\n    function getInvolvedParties(\\n        uint256 _warId\\n    ) public view returns (uint256, uint256) {\\n        uint256 offenseId = warIdToWar[_warId].offenseId;\\n        uint256 defenseId = warIdToWar[_warId].defenseId;\\n        return (offenseId, defenseId);\\n    }\\n\\n    ///@dev this is a public view function that will return true if one of the nations has offered peace\\n    ///@notice this function will return true if one of the nations has offered peace\\n    ///@param _warId is the war id of the war being queried\\n    ///@return bool will be true if one of the nation has offered peace\\n    function isPeaceOffered(uint256 _warId) public view returns (bool) {\\n        bool peaceOffered = false;\\n        if (\\n            warIdToWar[_warId].offensePeaceOffered == true ||\\n            warIdToWar[_warId].defensePeaceOffered == true\\n        ) {\\n            peaceOffered = true;\\n        }\\n        return peaceOffered;\\n    }\\n\\n    modifier onlyBattle() {\\n        require(\\n            msg.sender == groundBattle ||\\n                msg.sender == airBattle ||\\n                msg.sender == navalAttack ||\\n                msg.sender == breakBlockade ||\\n                msg.sender == blockade ||\\n                msg.sender == cruiseMissile ||\\n                msg.sender == nuke,\\n            \\\"function only callable during an attack\\\"\\n        );\\n        _;\\n    }\\n\\n    function cancelPeaceOffersUponAttack(uint256 _warId) public onlyBattle {\\n        warIdToWar[_warId].offensePeaceOffered = false;\\n        warIdToWar[_warId].defensePeaceOffered = false;\\n    }\\n\\n    ///@dev this is a publci view function that will return the number of days left in a war\\n    ///@dev wars expire after 7 days when days left == 0\\n    function getDaysLeft(uint256 _warId) public view returns (uint256, bool) {\\n        uint256 day = keep.getGameDay();\\n        uint256 warDaysElapsed;\\n        if (day >= warIdToWar[_warId].dayStarted + 7) {\\n            warDaysElapsed = 7;\\n        } else {\\n            warDaysElapsed = day - warIdToWar[_warId].dayStarted;\\n        }\\n        uint256 daysLeft = (7 - warDaysElapsed);\\n        bool expired = false;\\n        if (daysLeft == 0) {\\n            expired = true;\\n        }\\n        return (daysLeft, expired);\\n    }\\n\\n    modifier onlyAirBattle() {\\n        require(\\n            msg.sender == airBattle,\\n            \\\"function only callable from air battle\\\"\\n        );\\n        _;\\n    }\\n\\n    ///@dev this function is only callable from the air battle contract\\n    ///@dev this function will increment air battle casualties\\n    function addAirBattleCasualties(\\n        uint256 _warId,\\n        uint256 nationId,\\n        uint256 battleCausalties\\n    ) public onlyAirBattle {\\n        (uint256 offenseId, uint256 defenseId) = getInvolvedParties(_warId);\\n        if (offenseId == nationId) {\\n            warIdToOffenseLosses[_warId].aircraftLost = battleCausalties;\\n        }\\n        if (defenseId == nationId) {\\n            warIdToDefenseLosses[_warId].aircraftLost = battleCausalties;\\n        }\\n    }\\n\\n    modifier onlyForcesContract() {\\n        require(msg.sender == forces, \\\"only callable from forces\\\");\\n        _;\\n    }\\n\\n    ///@dev this function is only callable from the forces contact\\n    ///@notice this function will allow a nation to deploy ground forces (soldiers and tanks) to a given war\\n    function deployForcesToWar(\\n        uint256 nationId,\\n        uint256 _warId,\\n        uint256 soldiersToDeploy,\\n        uint256 tanksToDeploy\\n    ) public onlyForcesContract {\\n        bool isActive = isWarActive(_warId);\\n        require(isActive, \\\"war not active\\\");\\n        (uint256 offenseId, uint256 defenseId) = getInvolvedParties(_warId);\\n        require(\\n            nationId == offenseId || nationId == defenseId,\\n            \\\"nation not involved\\\"\\n        );\\n        uint256 day = keep.getGameDay();\\n        if (nationId == offenseId) {\\n            bool deployedToday = warIdToOffenseDeployed1[_warId]\\n                .offenseDeployedToday[day];\\n            require(!deployedToday, \\\"already deployed forces today\\\");\\n            warIdToOffenseDeployed1[_warId]\\n                .soldiersDeployed += soldiersToDeploy;\\n            warIdToOffenseDeployed1[_warId].tanksDeployed += tanksToDeploy;\\n            warIdToOffenseDeployed1[_warId].offenseDeployedToday[day] = true;\\n        } else if (nationId == defenseId) {\\n            bool deployedToday = warIdToDefenseDeployed1[_warId]\\n                .defenseDeployedToday[day];\\n            require(!deployedToday, \\\"already deployed forces today\\\");\\n            warIdToDefenseDeployed1[_warId]\\n                .soldiersDeployed += soldiersToDeploy;\\n            warIdToDefenseDeployed1[_warId].tanksDeployed += tanksToDeploy;\\n            warIdToDefenseDeployed1[_warId].defenseDeployedToday[day] = true;\\n        }\\n    }\\n\\n    ///@dev this is a public view function that will return the number of ground forces a nation has deploed to a war\\n    ///@param _warId is the war id of the war where the forces are deployed\\n    ///@param attackerId is the nation id of the nation being queried\\n    ///@return soldiersDeployed is the soldiers the given nation has deployed to the given war\\n    ///@return tanksDeployed is the tanks the given nation has deployed to the given war\\n    function getDeployedGroundForces(\\n        uint256 _warId,\\n        uint256 attackerId\\n    ) public view returns (uint256, uint256) {\\n        uint256 soldiersDeployed;\\n        uint256 tanksDeployed;\\n        (uint256 offenseId, uint256 defenseId) = getInvolvedParties(_warId);\\n        if (attackerId == offenseId) {\\n            soldiersDeployed = warIdToOffenseDeployed1[_warId].soldiersDeployed;\\n            tanksDeployed = warIdToOffenseDeployed1[_warId].tanksDeployed;\\n        } else if (attackerId == defenseId) {\\n            soldiersDeployed = warIdToDefenseDeployed1[_warId].soldiersDeployed;\\n            tanksDeployed = warIdToDefenseDeployed1[_warId].tanksDeployed;\\n        }\\n        return (soldiersDeployed, tanksDeployed);\\n    }\\n\\n    modifier onlyGroundBattle() {\\n        require(\\n            msg.sender == groundBattle,\\n            \\\"function only callable from navy battle contract\\\"\\n        );\\n        _;\\n    }\\n\\n    ///@dev this function is only callable from the ground battle contract\\n    ///@dev this function will decrement deployed ground forces based on casualties\\n    function decreaseGroundBattleLosses(\\n        uint256 soldierLosses,\\n        uint256 tankLosses,\\n        uint256 attackerId,\\n        uint256 _warId\\n    ) public onlyGroundBattle returns (bool) {\\n        (uint256 offenseId, uint256 defenseId) = getInvolvedParties(_warId);\\n\\n        if (attackerId == offenseId) {\\n            require(\\n                warIdToOffenseDeployed1[_warId].soldiersDeployed >= soldierLosses,\\n                \\\"underflow: offense soldier losses too high\\\"\\n            );\\n            require(\\n                warIdToOffenseDeployed1[_warId].tanksDeployed >= tankLosses,\\n                \\\"underflow: offense tank losses too high\\\"\\n            );\\n            warIdToOffenseDeployed1[_warId].soldiersDeployed -= soldierLosses;\\n            warIdToOffenseDeployed1[_warId].tanksDeployed -= tankLosses;\\n        } else if (attackerId == defenseId) {\\n            require(\\n                warIdToDefenseDeployed1[_warId].soldiersDeployed >= soldierLosses,\\n                \\\"underflow: defense soldier losses too high\\\"\\n            );\\n            require(\\n                warIdToDefenseDeployed1[_warId].tanksDeployed >= tankLosses,\\n                \\\"underflow: defense tank losses too high\\\"\\n            );\\n            warIdToDefenseDeployed1[_warId].soldiersDeployed -= soldierLosses;\\n            warIdToDefenseDeployed1[_warId].tanksDeployed -= tankLosses;\\n        } else {\\n            revert(\\\"attacker not involved in this war\\\");\\n        }\\n\\n        return true;\\n    }\\n\\n    function recallTroopsFromDeactivatedWars(uint256 id) public {\\n        bool isOwner = mint.checkOwnership(id, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        uint256[] memory activeWars = idToActiveWars[id];\\n        for (uint256 i = 0; i < activeWars.length; i++) {\\n            (, bool expired) = getDaysLeft(activeWars[i]);\\n            if (expired == true) {\\n                removeActiveWar(activeWars[i]);\\n            }\\n        }\\n        uint256[] storage deactivatedWars = idToDeactivatedWars[id];\\n        for (uint256 i = 0; i < deactivatedWars.length; i++) {\\n            uint256 war = deactivatedWars[i];\\n            (uint256 offenseId, uint256 defenseId) = getInvolvedParties(war);\\n            if (id == offenseId) {\\n                uint256 soldiersDeployed = warIdToOffenseDeployed1[war]\\n                    .soldiersDeployed;\\n                uint256 tanksDeployed = warIdToOffenseDeployed1[war]\\n                    .tanksDeployed;\\n                forc.withdrawSoldiers(soldiersDeployed, id);\\n                forc.withdrawTanks(tanksDeployed, id);\\n                warIdToOffenseDeployed1[war].soldiersDeployed = 0;\\n                warIdToOffenseDeployed1[war].tanksDeployed = 0;\\n            } else if (id == defenseId) {\\n                uint256 soldiersDeployed = warIdToDefenseDeployed1[war]\\n                    .soldiersDeployed;\\n                uint256 tanksDeployed = warIdToDefenseDeployed1[war]\\n                    .tanksDeployed;\\n                forc.withdrawSoldiers(soldiersDeployed, id);\\n                forc.withdrawTanks(tanksDeployed, id);\\n                warIdToDefenseDeployed1[war].soldiersDeployed = 0;\\n                warIdToDefenseDeployed1[war].tanksDeployed = 0;\\n            }\\n            deactivatedWars[i] = deactivatedWars[deactivatedWars.length - 1];\\n            deactivatedWars.pop();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8a303dada5b4965c8d5d858d18a43e8f98a2efa7aec71c13f4a8086c748da095\",\"license\":\"BUSL-1.1\"},\"contracts/WarBucks.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title ERC20 Contract WarBucks\\n/// @author OxSnosh\\n/// @dev This is the contact for the currency used to purchase items in the game\\n/// @dev Inherits from OpenZeppelin ERC20 and Ownable\\n/// @dev The deployer of the contract will be the owner\\ncontract WarBucks is ERC20, Ownable {\\n    address treasury;\\n    address countryMinter;\\n\\n    /// @param initialSupply is the inital supply of WarBucks currency\\n    /// @dev The initial supply is minted to the deployer of the contract\\n    constructor(uint256 initialSupply) ERC20(\\\"WarBucks\\\", \\\"WBX\\\") {\\n        _mint(msg.sender, initialSupply);\\n    }\\n\\n    /// @dev This modifier exists in order to allow the TreasuryContract to mint and burn tokens\\n    modifier onlyTreasury() {\\n        require(\\n            msg.sender == treasury,\\n            \\\"function only callable from treasury contract\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyCountryMinter() {\\n        require(\\n            msg.sender == countryMinter,\\n            \\\"function only callable from countryMinter contract\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev This function is called by the owner after deployment in order to update the treasury contract address for the onlyTreasury modifer\\n    /// @param _treasury is the address of the treasury contract\\n    /// @param _countryMinter is the address of the countryMinter contract\\n    function settings(address _treasury, address _countryMinter) public onlyOwner {\\n        treasury = _treasury;\\n        countryMinter = _countryMinter;\\n    }\\n\\n    /// @dev This function can only be called from the treasury contract\\n    /// @dev This function enables a nation owner to withdraw in game balance from the treasury contract and mint a corresponding amount of WarBucks tokens into a nations wallet \\n    /// @dev WarBucks has 18 decimals as does the in game balance\\n    /// @param account this is the address of the nation owner and the wallet where the tokens are being minted\\n    /// @param amount is the amount of tokens being burned\\n    function mintFromTreasury(\\n        address account,\\n        uint256 amount\\n    ) external onlyTreasury {\\n        _mint(account, amount);\\n    }\\n\\n    /// @dev This function can only be called from the treasury contract\\n    /// @dev This function enables a nation owner to deposit in game balance into a nation and burn a corresponding amount of WarBucks tokens into a nations wallet\\n    /// @dev WarBucks has 18 decimals as does the in game balance\\n    /// @notice This function will burn tokens when they are deposited into a nation. For every token burned, a nations in game balance will increase +1\\n    /// @param account this is the address of the nation owner and the wallet where the tokens are being burned\\n    /// @param amount is the amount of tokens being burned\\n    function burnFromTreasury(\\n        address account,\\n        uint256 amount\\n    ) external onlyTreasury {\\n        _burn(account, amount);\\n    }\\n\\n    function burnFromMint(\\n        address account,\\n        uint256 amount\\n    ) external onlyCountryMinter {\\n        _burn(account, amount);\\n    }\\n\\n    function mint(address account, uint256 amount) public onlyOwner {\\n        _mint(account, amount);\\n    }\\n\\n    function burn(address account, uint256 amount) public onlyOwner {\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xf97f02fb3fe1fc53e0e73b061c87d0c3623959b9569d957141dcbb3ebaa354a3\",\"license\":\"BUSL-1.1\"},\"contracts/Wonders.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"./Treasury.sol\\\";\\nimport \\\"./Infrastructure.sol\\\";\\nimport \\\"./Improvements.sol\\\";\\nimport \\\"./Forces.sol\\\";\\nimport \\\"./CountryMinter.sol\\\";\\nimport \\\"./Resources.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n///@title WondersContract1\\n///@author OxSnosh\\n///@dev this contract inherits from openzeppelin's ownable contract\\n///@notice this contract will strore information about a nations wonders\\ncontract WondersContract1 is Ownable, ReentrancyGuard {\\n    address public treasuryAddress;\\n    address public wondersContract2Address;\\n    address public wondersContract3Address;\\n    address public wondersContract4Address;\\n    address public infrastructureAddress;\\n    address public countryMinter;\\n    uint256 public agricultureDevelopmentCost = 30000000 * (10**18);\\n    uint256 public antiAirDefenseNetworkCost = 50000000 * (10**18);\\n    uint256 public centralIntelligenceAgencyCost = 40000000 * (10**18);\\n    uint256 public disasterReliefAgencyCost = 40000000 * (10**18);\\n    uint256 public empWeaponizationCost = 200000000 * (10**18);\\n    uint256 public falloutShelterSystemCost = 40000000 * (10**18);\\n    uint256 public federalAidCommissionCost = 25000000 * (10**18);\\n    uint256 public federalReserveCost = 100000000 * (10**18);\\n    uint256 public foreignAirForceBaseCost = 35000000 * (10**18);\\n    uint256 public foreignArmyBaseCost = 200000000 * (10**18);\\n    uint256 public foreignNavalBaseCost = 200000000 * (10**18);\\n\\n    CountryMinter mint;\\n\\n    struct Wonders1 {\\n        uint256 wonderCount;\\n        //Agriculture Development Program\\n        //$30,000,000\\n        //Increases land size by 15%\\n        //Increases citizen income +$2.00,\\n        //Increases the citizen-bonus for land from 0.2 to 0.5.\\n        //Requires 3,000 land purchased, 500 technology.\\n        bool agricultureDevelopmentProgram;\\n        //Anti-Air Defense Network\\n        //$50,000,000\\n        //Reduces odds of incoming aircraft attacks against your nation -25%.\\n        //Reduces aircraft attack damages against your nation -15%.\\n        bool antiAirDefenseNetwork;\\n        //Central Intelligence Agency\\n        //$40,000,000\\n        //Increases the number of spies that your nation can support +250 and\\n        //increases your nation's spy attack strength +10%.\\n        //Only viewable by the user who owns it.\\n        bool centralIntelligenceAgency;\\n        //Disaster Relief Agency\\n        //$40,000,000\\n        //The disaster relief agency helps restore your nation and its people after emergency situations\\n        //Increases population +3%\\n        //and opens one extra foreign aid slot.\\n        bool disasterReliefAgency;\\n        //EMP Weaponization\\n        //$200,000,000\\n        //Provides attackers with 5,000 or more technology the option to launch a targeted EMP nuclear attack.\\n        //Nuclear weapons can target higher infrastructure, higher land, or higher technology damage based on player choice when launching nukes.\\n        //When you choose to target infrastructure, land, or technology you are trading more damage to your target for less damage for the other two.\\n        //For instance, if you choose to target infrastructure you will do more base damage to infrastructure but less damage to land and technology.\\n        //Requires 5,000 technology and a Weapons Research Complex to purchase.\\n        bool empWeaponization;\\n        //Fallout Shelter System\\n        //$40,000,000\\n        //Allows 50% of your defending soldiers to survive a nuclear strike\\n        //(Does not prevent nuclear Anarchy but does prevent troops from being totally depleted),\\n        //Reduces tank, cruise missile, and aircraft, losses from a nuclear strike by -25%,\\n        //Reduces nuclear vulnerable navy losses by 12%,\\n        //Reduces nuclear anarchy effects by 1 day.\\n        //Requires 6,000 infrastructure, 2,000 technology.\\n        bool falloutShelterSystem;\\n        //Federal Aid Commission\\n        //$25,000,000\\n        //Raises the cap on foreign money aid +50% provided that the foreign aid recipient also has a Federal Aid Commission wonder.\\n        //Allows two nations with the Federal Aid Commission wonder to send secret foreign aid.\\n        //Secret foreign aid costs the sender 200% the value of the items that are sent.\\n        bool federalAidCommission;\\n        //Federal Reserve\\n        //$100,000,000\\n        //Increases the number of banks that can be purchased +2.\\n        //Requires Stock Market.\\n        bool federalReserve;\\n        //Foreign Air Force Base -\\n        //$35,000,000 -\\n        //Raises the aircraft limit +20 for your nation and\\n        //increases the number of aircraft that can be sent in each attack mission +20.\\n        bool foreignAirForceBase;\\n        //Foreign Army Base -\\n        //$200,000,000 -\\n        //Adds an extra +1 offensive war slot.\\n        //Requires 8,000 technology to purchase.\\n        bool foreignArmyBase;\\n        //Foreign Naval Base -\\n        //$200,000,000 -\\n        //Allows +2 naval vessels to be purchased per day (+1 in Peace Mode)\\n        //and also allows +1 naval deployment per day.\\n        //Requires 20,000 infrastructure.\\n        bool foreignNavalBase;\\n    }\\n\\n    mapping(uint256 => Wonders1) public idToWonders1;\\n\\n    event Wonder1Purchased(\\n        uint256 indexed id,\\n        uint256 indexed wonderId\\n    );\\n\\n    event Wonder1Deleted(\\n        uint256 indexed id,\\n        uint256 indexed wonderId\\n    );\\n\\n    modifier approvedAddress() {\\n        require(\\n            msg.sender == wondersContract2Address ||\\n                msg.sender == wondersContract3Address ||\\n                msg.sender == wondersContract4Address,\\n            \\\"Unable to call\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyCountryMinter() {\\n        require(\\n            msg.sender == countryMinter,\\n            \\\"only callable from countryMinter\\\"\\n        );\\n        _;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings(\\n        address _treasuryAddress,\\n        address _wonderContract2Address,\\n        address _wonderContract3Address,\\n        address _wonderContract4Address,\\n        address _infrastructureAddress,\\n        address _countryMinter\\n    ) public onlyOwner {\\n        treasuryAddress = _treasuryAddress;\\n        wondersContract2Address = _wonderContract2Address;\\n        wondersContract3Address = _wonderContract3Address;\\n        wondersContract4Address = _wonderContract4Address;\\n        infrastructureAddress = _infrastructureAddress;\\n        countryMinter = _countryMinter;\\n        mint = CountryMinter(_countryMinter);\\n    }\\n\\n    ///@dev this is a public view function that will return the number of wonders a given nation owns\\n    ///@notice this function will return the number of wonders a given nation owns\\n    ///@param id is the nation id of the nation being queried\\n    ///@return count is the number of wonder a given nation owns\\n    function getWonderCount(uint256 id) public view returns (uint256 count) {\\n        count = idToWonders1[id].wonderCount;\\n        return count;\\n    }\\n\\n    ///@dev this function is only callable from other wonder contracts\\n    ///@dev this function will increment the number of wonders a nation owns when a wonder is purchased in another contract\\n    function addWonderCount(uint256 id) public approvedAddress {\\n        idToWonders1[id].wonderCount += 1;\\n    }\\n\\n    ///@dev this function is only callable from other wonder contracts\\n    ///@dev this function will decremeny the number of wonders a nation owns when a wonder is deleted in another contract\\n    function subtractWonderCount(uint256 id) public approvedAddress {\\n        idToWonders1[id].wonderCount -= 1;\\n    }\\n\\n    ///@dev this function is only callable from the country minter contract\\n    ///@notice this function will be called when a nation is minted and allow a nation to buy the wonders in this contract\\n    function generateWonders1(uint256 id) public onlyCountryMinter {\\n        require(\\n            idToWonders1[id].wonderCount == 0,\\n            \\\"Nation already has wonders\\\"\\n        );\\n        Wonders1 memory newWonders1 = Wonders1(\\n            0,\\n            false,\\n            false,\\n            false,\\n            false,\\n            false,\\n            false,\\n            false,\\n            false,\\n            false,\\n            false,\\n            false\\n        );\\n        idToWonders1[id] = newWonders1;\\n    }\\n\\n    \\n    ///@dev this function is only callable by the contract owner\\n    function updateAgricultureDevelopmentCost(\\n        uint256 newPrice\\n    ) public onlyOwner {\\n        agricultureDevelopmentCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateAntiAirDefenseNetworkCost(\\n        uint256 newPrice\\n    ) public onlyOwner {\\n        antiAirDefenseNetworkCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateCentralIntelligenceAgencyCost(\\n        uint256 newPrice\\n    ) public onlyOwner {\\n        centralIntelligenceAgencyCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateDisasterReliefAgencyCost(uint256 newPrice) public onlyOwner {\\n        disasterReliefAgencyCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateEmpWeaponizationCost(uint256 newPrice) public onlyOwner {\\n        empWeaponizationCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateFalloutShelterSystemCost(uint256 newPrice) public onlyOwner {\\n        falloutShelterSystemCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateFederalAidCommissionCost(uint256 newPrice) public onlyOwner {\\n        federalAidCommissionCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateFederalReserveCost(uint256 newPrice) public onlyOwner {\\n        federalReserveCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateForeignAirForceBaseCost(uint256 newPrice) public onlyOwner {\\n        foreignAirForceBaseCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateForeignArmyBaseCost(uint256 newPrice) public onlyOwner {\\n        foreignArmyBaseCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateForeignNavalBaseCost(uint256 newPrice) public onlyOwner {\\n        foreignNavalBaseCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable from a nation owner and allows a nation to purchase the wonders in this contract\\n    ///@notice this function allows a nation owner to purchase the wonders in this contract\\n    ///@param countryId is the nationId of the country purchasing a wonder\\n    /**@param wonderId is the id of the wonder\\n     * 1. agricultrual development program\\n     * 2. air defense network\\n     * 3. central intelligence agency\\n     * 4. disaster relief agency\\n     * 5. emp weaponization\\n     * 6. fallout shelter system \\n     * 7. federal aid commission\\n     * 8. federal reserve\\n     * 9. foreign air force base\\n     * 10. foreign army base\\n     * 11. foreign naval base\\n    */\\n    function buyWonder1(uint256 countryId, uint256 wonderId) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(countryId, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        require(wonderId <= 11, \\\"Invalid wonder ID\\\");\\n        uint256 balance = TreasuryContract(treasuryAddress).checkBalance(\\n            countryId\\n        );\\n        if (wonderId == 1) {\\n            require(\\n                balance >= agricultureDevelopmentCost,\\n                \\\"Insufficient balance\\\"\\n            );\\n            bool existingWonder = idToWonders1[countryId]\\n                .agricultureDevelopmentProgram;\\n            require(existingWonder == false, \\\"Already owned\\\");\\n            uint256 techAmount = InfrastructureContract(infrastructureAddress)\\n                .getTechnologyCount(countryId);\\n            require(techAmount >= 500, \\\"Requires 500 Tech\\\");\\n            uint256 landAmount = InfrastructureContract(infrastructureAddress)\\n                .getLandCount(countryId);\\n            require(landAmount >= 3000, \\\"Requires 3000 Land\\\");\\n            idToWonders1[countryId].agricultureDevelopmentProgram = true;\\n            idToWonders1[countryId].wonderCount += 1;\\n            require(TreasuryContract(treasuryAddress).spendBalance(\\n                countryId,\\n                agricultureDevelopmentCost\\n            ));\\n        } else if (wonderId == 2) {\\n            require(\\n                balance >= antiAirDefenseNetworkCost,\\n                \\\"Insufficient balance\\\"\\n            );\\n            bool existingWonder = idToWonders1[countryId].antiAirDefenseNetwork;\\n            require(existingWonder == false, \\\"Already owned\\\");\\n            idToWonders1[countryId].antiAirDefenseNetwork = true;\\n            idToWonders1[countryId].wonderCount += 1;\\n            require(TreasuryContract(treasuryAddress).spendBalance(\\n                countryId,\\n                antiAirDefenseNetworkCost\\n            ));\\n        } else if (wonderId == 3) {\\n            require(\\n                balance >= centralIntelligenceAgencyCost,\\n                \\\"Insufficient balance\\\"\\n            );\\n            bool existingWonder = idToWonders1[countryId]\\n                .centralIntelligenceAgency;\\n            require(existingWonder == false, \\\"Already owned\\\");\\n            idToWonders1[countryId].centralIntelligenceAgency = true;\\n            idToWonders1[countryId].wonderCount += 1;\\n            require(TreasuryContract(treasuryAddress).spendBalance(\\n                countryId,\\n                centralIntelligenceAgencyCost\\n            ));\\n        } else if (wonderId == 4) {\\n            require(\\n                balance >= disasterReliefAgencyCost,\\n                \\\"Insufficient balance\\\"\\n            );\\n            bool existingWonder = idToWonders1[countryId].disasterReliefAgency;\\n            require(existingWonder == false, \\\"Already owned\\\");\\n            idToWonders1[countryId].disasterReliefAgency = true;\\n            idToWonders1[countryId].wonderCount += 1;\\n            require(TreasuryContract(treasuryAddress).spendBalance(\\n                countryId,\\n                disasterReliefAgencyCost\\n            ));\\n        } else if (wonderId == 5) {\\n            require(balance >= empWeaponizationCost, \\\"Insufficient balance\\\");\\n            bool existingWonder = idToWonders1[countryId].empWeaponization;\\n            require(existingWonder == false, \\\"Already owned\\\");\\n            bool isWrcThere = WondersContract4(wondersContract4Address)\\n                .getWeaponsResearchCenter(countryId);\\n            require(\\n                isWrcThere == true,\\n                \\\"Must own Weapons Research Center to purchase\\\"\\n            );\\n            uint256 techAmount = InfrastructureContract(infrastructureAddress)\\n                .getTechnologyCount(countryId);\\n            require(\\n                techAmount >= 5000,\\n                \\\"Must have 5000 Technology to purchase\\\"\\n            );\\n            idToWonders1[countryId].empWeaponization = true;\\n            idToWonders1[countryId].wonderCount += 1;\\n            require(TreasuryContract(treasuryAddress).spendBalance(\\n                countryId,\\n                empWeaponizationCost\\n            ));\\n        } else if (wonderId == 6) {\\n            require(\\n                balance >= falloutShelterSystemCost,\\n                \\\"Insufficient balance\\\"\\n            );\\n            bool existingWonder = idToWonders1[countryId].falloutShelterSystem;\\n            require(existingWonder == false, \\\"Already owned\\\");\\n            uint256 infrastructureAmount = InfrastructureContract(\\n                infrastructureAddress\\n            ).getInfrastructureCount(countryId);\\n            require(\\n                infrastructureAmount >= 6000,\\n                \\\"Requires 6000 Infrastructure to purchase\\\"\\n            );\\n            uint256 technologyAmount = InfrastructureContract(\\n                infrastructureAddress\\n            ).getTechnologyCount(countryId);\\n            require(technologyAmount >= 2000, \\\"Requires 2000 Tech to purchase\\\");\\n            idToWonders1[countryId].falloutShelterSystem = true;\\n            idToWonders1[countryId].wonderCount += 1;\\n            require(TreasuryContract(treasuryAddress).spendBalance(\\n                countryId,\\n                falloutShelterSystemCost\\n            ));\\n        } else if (wonderId == 7) {\\n            require(\\n                balance >= federalAidCommissionCost,\\n                \\\"Insufficient balance\\\"\\n            );\\n            bool existingWonder = idToWonders1[countryId].federalAidCommission;\\n            require(existingWonder == false, \\\"Already owned\\\");\\n            idToWonders1[countryId].federalAidCommission = true;\\n            idToWonders1[countryId].wonderCount += 1;\\n            require(TreasuryContract(treasuryAddress).spendBalance(\\n                countryId,\\n                federalAidCommissionCost\\n            ));\\n        } else if (wonderId == 8) {\\n            require(balance >= federalReserveCost, \\\"Insufficient balance\\\");\\n            bool existingWonder = idToWonders1[countryId].federalReserve;\\n            require(existingWonder == false, \\\"Already owned\\\");\\n            bool isStockMarket = WondersContract4(wondersContract4Address)\\n                .getStockMarket(countryId);\\n            require(\\n                isStockMarket == true,\\n                \\\"Required to own stock market to purchase\\\"\\n            );\\n            idToWonders1[countryId].federalReserve = true;\\n            idToWonders1[countryId].wonderCount += 1;\\n            require(TreasuryContract(treasuryAddress).spendBalance(\\n                countryId,\\n                federalReserveCost\\n            ));\\n        } else if (wonderId == 9) {\\n            require(balance >= foreignAirForceBaseCost, \\\"Insufficient balance\\\");\\n            bool existingWonder = idToWonders1[countryId].foreignAirForceBase;\\n            require(existingWonder == false, \\\"Already owned\\\");\\n            idToWonders1[countryId].foreignAirForceBase = true;\\n            idToWonders1[countryId].wonderCount += 1;\\n            require(TreasuryContract(treasuryAddress).spendBalance(\\n                countryId,\\n                foreignAirForceBaseCost\\n            ));\\n        } else if (wonderId == 10) {\\n            require(balance >= foreignArmyBaseCost, \\\"Insufficient balance\\\");\\n            bool existingWonder = idToWonders1[countryId].foreignArmyBase;\\n            require(existingWonder == false, \\\"Already owned\\\");\\n            uint256 techAmount = InfrastructureContract(infrastructureAddress)\\n                .getTechnologyCount(countryId);\\n            require(\\n                techAmount >= 8000,\\n                \\\"Must have 8000 Technology to purchase\\\"\\n            );\\n            idToWonders1[countryId].foreignArmyBase = true;\\n            idToWonders1[countryId].wonderCount += 1;\\n            require(TreasuryContract(treasuryAddress).spendBalance(\\n                countryId,\\n                foreignArmyBaseCost\\n            ));\\n        } else {\\n            require(balance >= foreignNavalBaseCost, \\\"Insufficient balance\\\");\\n            bool existingWonder = idToWonders1[countryId].foreignNavalBase;\\n            require(existingWonder == false, \\\"Already owned\\\");\\n            uint256 infrastructureAmount = InfrastructureContract(\\n                infrastructureAddress\\n            ).getInfrastructureCount(countryId);\\n            require(\\n                infrastructureAmount >= 20000,\\n                \\\"Requires 20000 infrastructure to purchase\\\"\\n            );\\n            idToWonders1[countryId].foreignNavalBase = true;\\n            idToWonders1[countryId].wonderCount += 1;\\n            require(TreasuryContract(treasuryAddress).spendBalance(\\n                countryId,\\n                foreignNavalBaseCost\\n            ));\\n        }\\n        emit Wonder1Purchased(countryId, wonderId);\\n    }\\n\\n    ///@dev this function will allow a nation owner to delete a wonder\\n    ///@dev this function is only callable by a nation owner\\n    ///@notice this funtion will allow a nation owner to delete a wonder\\n    ///@param countryId is the nation deleting the wonder\\n    /**@param wonderId is the id of the wonder\\n     * 1. agricultrual development program\\n     * 2. air defense network\\n     * 3. central intelligence agency\\n     * 4. disaster relief agency\\n     * 5. emp weaponization\\n     * 6. fallout shelter system \\n     * 7. federal aid commission\\n     * 8. federal reserve\\n     * 9. foreign air force base\\n     * 10. foreign army base\\n     * 11. foreign naval base\\n    */\\n    function deleteWonder1(uint256 countryId, uint256 wonderId) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(countryId, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        require(wonderId <= 11, \\\"Invalid wonder ID\\\");\\n        if (wonderId == 1) {\\n            bool existingWonder = idToWonders1[countryId]\\n                .agricultureDevelopmentProgram;\\n            require(existingWonder == true, \\\"No wonder to delete\\\");\\n            idToWonders1[countryId].agricultureDevelopmentProgram = false;\\n            idToWonders1[countryId].wonderCount -= 1;\\n        } else if (wonderId == 2) {\\n            bool existingWonder = idToWonders1[countryId].antiAirDefenseNetwork;\\n            require(existingWonder == true, \\\"No wonder to delete\\\");\\n            idToWonders1[countryId].antiAirDefenseNetwork = false;\\n            idToWonders1[countryId].wonderCount -= 1;\\n        } else if (wonderId == 3) {\\n            bool existingWonder = idToWonders1[countryId]\\n                .centralIntelligenceAgency;\\n            require(existingWonder == true, \\\"No wonder to delete\\\");\\n            idToWonders1[countryId].centralIntelligenceAgency = false;\\n            idToWonders1[countryId].wonderCount -= 1;\\n        } else if (wonderId == 4) {\\n            bool existingWonder = idToWonders1[countryId].disasterReliefAgency;\\n            require(existingWonder == true, \\\"No wonder to delete\\\");\\n            idToWonders1[countryId].disasterReliefAgency = false;\\n            idToWonders1[countryId].wonderCount -= 1;\\n        } else if (wonderId == 5) {\\n            bool existingWonder = idToWonders1[countryId].empWeaponization;\\n            require(existingWonder == true, \\\"No wonder to delete\\\");\\n            idToWonders1[countryId].empWeaponization = false;\\n            idToWonders1[countryId].wonderCount -= 1;\\n        } else if (wonderId == 6) {\\n            bool existingWonder = idToWonders1[countryId].falloutShelterSystem;\\n            require(existingWonder == true, \\\"No wonder to delete\\\");\\n            idToWonders1[countryId].falloutShelterSystem = false;\\n            idToWonders1[countryId].wonderCount -= 1;\\n        } else if (wonderId == 7) {\\n            bool existingWonder = idToWonders1[countryId].federalAidCommission;\\n            require(existingWonder == true, \\\"No wonder to delete\\\");\\n            idToWonders1[countryId].federalAidCommission = false;\\n            idToWonders1[countryId].wonderCount -= 1;\\n        } else if (wonderId == 8) {\\n            bool existingWonder = idToWonders1[countryId].federalReserve;\\n            require(existingWonder == true, \\\"No wonder to delete\\\");\\n            idToWonders1[countryId].federalReserve = false;\\n            idToWonders1[countryId].wonderCount -= 1;\\n        } else if (wonderId == 9) {\\n            bool existingWonder = idToWonders1[countryId].foreignAirForceBase;\\n            require(existingWonder == true, \\\"No wonder to delete\\\");\\n            idToWonders1[countryId].foreignAirForceBase = false;\\n            idToWonders1[countryId].wonderCount -= 1;\\n        } else if (wonderId == 10) {\\n            bool existingWonder = idToWonders1[countryId].foreignArmyBase;\\n            require(existingWonder == true, \\\"No wonder to delete\\\");\\n            idToWonders1[countryId].foreignArmyBase = false;\\n            idToWonders1[countryId].wonderCount -= 1;\\n        } else {\\n            bool existingWonder = idToWonders1[countryId].foreignNavalBase;\\n            require(existingWonder == true, \\\"No wonder to delete\\\");\\n            idToWonders1[countryId].foreignNavalBase = false;\\n            idToWonders1[countryId].wonderCount -= 1;\\n        }\\n        emit Wonder1Deleted(countryId, wonderId);\\n    }\\n\\n    ///@dev this is a public view function that will return true if a nation has the agriculture development program wonder\\n    ///@dev this function will return true if a nation has the agriculture development program wonder\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool will be true if the nation has the wonder\\n    function getAgriculturalDevelopmentProgram(\\n        uint256 id\\n    ) public view returns (bool) {\\n        return idToWonders1[id].agricultureDevelopmentProgram;\\n    }\\n\\n    ///@dev this is a public view function that will return true if a nation has the anti air defense network wonder\\n    ///@dev this function will return true if a nation has the anti air defense network wonder\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool will be true if the nation has the wonder\\n    function getAntiAirDefenseNetwork(uint256 id) public view returns (bool) {\\n        return idToWonders1[id].antiAirDefenseNetwork;\\n    }\\n\\n    ///@dev this is a public view function that will return true if a nation has the central intelligence agency wonder\\n    ///@dev this function will return true if a nation has the central intelligence agency wonder\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool will be true if the nation has the wonder\\n    function getCentralIntelligenceAgency(\\n        uint256 id\\n    ) public view returns (bool) {\\n        return idToWonders1[id].centralIntelligenceAgency;\\n    }\\n\\n    ///@dev this is a public view function that will return true if a nation has the disaster relief agency wonder\\n    ///@dev this function will return true if a nation has the disaster relief agency wonder\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool will be true if the nation has the wonder\\n    function getDisasterReliefAgency(uint256 id) public view returns (bool) {\\n        return idToWonders1[id].disasterReliefAgency;\\n    }\\n\\n    ///@dev this is a public view function that will return true if a nation has the emp weaponization wonder\\n    ///@dev this function will return true if a nation has the emp weaponization wonder\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool will be true if the nation has the wonder\\n    function getEmpWeaponization(uint256 id) public view returns (bool) {\\n        return idToWonders1[id].empWeaponization;\\n    }\\n\\n    ///@dev this is a public view function that will return true if a nation has the fallout shelter system wonder\\n    ///@dev this function will return true if a nation has the fallout shelter system wonder\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool will be true if the nation has the wonder\\n    function getFalloutShelterSystem(uint256 id) public view returns (bool) {\\n        return idToWonders1[id].falloutShelterSystem;\\n    }\\n\\n    ///@dev this is a public view function that will return true if a nation has the federal aig commission wonder\\n    ///@dev this function will return true if a nation has the federal aid commission wonder\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool will be true if the nation has the wonder\\n    function getFederalAidCommission(uint256 id) public view returns (bool) {\\n        return idToWonders1[id].federalAidCommission;\\n    }\\n\\n    ///@dev this is a public view function that will return true if a nation has the federal reserve wonder\\n    ///@dev this function will return true if a nation has the federal reserve wonder\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool will be true if the nation has the wonder\\n    function getFederalReserve(uint256 id) public view returns (bool) {\\n        return idToWonders1[id].federalReserve;\\n    }\\n\\n    ///@dev this is a public view function that will return true if a nation has the foreign air force base wonder\\n    ///@dev this function will return true if a nation has the foreign air force base wonder\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool will be true if the nation has the wonder\\n    function getForeignAirforceBase(uint256 id) public view returns (bool) {\\n        return idToWonders1[id].foreignAirForceBase;\\n    }\\n\\n    ///@dev this is a public view function that will return true if a nation has the foreign army base wonder\\n    ///@dev this function will return true if a nation has the foreign army base wonder\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool will be true if the nation has the wonder\\n    function getForeignArmyBase(uint256 id) public view returns (bool) {\\n        return idToWonders1[id].foreignArmyBase;\\n    }\\n\\n    ///@dev this is a public view function that will return true if a nation has the foreign naval base wonder\\n    ///@dev this function will return true if a nation has the foreign naval base wonder\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool will be true if the nation has the wonder\\n    function getForeignNavalBase(uint256 id) public view returns (bool) {\\n        return idToWonders1[id].foreignNavalBase;\\n    }\\n\\n    ///@dev this function will return the costs of the wonders in this contract\\n    function getWonderCosts1()\\n        public\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (\\n            agricultureDevelopmentCost,\\n            antiAirDefenseNetworkCost,\\n            centralIntelligenceAgencyCost,\\n            disasterReliefAgencyCost,\\n            empWeaponizationCost,\\n            falloutShelterSystemCost,\\n            federalAidCommissionCost,\\n            federalReserveCost,\\n            foreignAirForceBaseCost,\\n            foreignArmyBaseCost,\\n            foreignNavalBaseCost\\n        );\\n    }\\n}\\n\\n///@title WondersContract2\\n///@author OxSnosh\\n///@dev this contract inherits from openzeppelin's ownable contract\\n///@notice this contract will strore information about a nations wonders\\ncontract WondersContract2 is Ownable, ReentrancyGuard {\\n    address public treasuryAddress;\\n    address public infrastructureAddress;\\n    address public wonderContract1Address;\\n    address public wonderContract3Address;\\n    address public wonderContract4Address;\\n    address public countryMinter;\\n    address public resources;\\n    uint256 public greatMonumentCost = 35000000 * (10**18);\\n    uint256 public greatTempleCost = 35000000 * (10**18);\\n    uint256 public greatUniversityCost = 35000000 * (10**18);\\n    uint256 public hiddenNuclearMissileSiloCost = 30000000 * (10**18);\\n    uint256 public interceptorMissileSystemCost = 50000000 * (10**18);\\n    uint256 public internetCost = 35000000 * (10**18);\\n    uint256 public interstateSystemCost = 45000000 * (10**18);\\n    uint256 public manhattanProjectCost = 100000000 * (10**18);\\n    uint256 public miningIndustryConsortiumCost = 25000000 * (10**18);\\n\\n    CountryMinter mint;\\n    ResourcesContract res;\\n\\n    struct Wonders2 {\\n        bool initialized;\\n        //Great Monument -\\n        //$35,000,000 -\\n        //The great monument is a testament to your great leadership.\\n        //Increases happiness +4 and your population will always be happy with your government choice.\\n        bool greatMonument;\\n        //Great Temple -\\n        //$35,000,000 -\\n        //The great temple is a dedicated shrine to your national religion.\\n        //Increases happiness +5 and your population will always be happy with your religion choice.\\n        bool greatTemple;\\n        //Great University -\\n        //$35,000,000 -\\n        //The great university is a central location for scholars within your nation.\\n        //Decreases technology costs -10% and\\n        //increases population happiness +.2% (+2 for every 1000) of your nation's technology level over 200 up to 3,000 tech.\\n        bool greatUniversity;\\n        //Hidden Nuclear Missile Silo -\\n        //$30,000,000 -\\n        //Allows your nation to develop +5 nuclear missiles that cannot be destroyed in spy attacks.\\n        //(Nations must first be nuclear capable in order to purchase nukes.)\\n        bool hiddenNuclearMissileSilo;\\n        //Interceptor Missile System (IMS) -\\n        //$50,000,000 -\\n        //Thwarts Cruise Missile Attacks, 50% of the time (removes 1 attackers CM strike chance for that day when successful).\\n        //Requires 5,000 technology and a Strategic Defense Initiative (SDI).\\n        bool interceptorMissileSystem;\\n        //Internet -\\n        //$35,000,000 -\\n        //Provides Internet infrastructure throughout your nation.\\n        //Increases population happiness +5.\\n        bool internet;\\n        //Interstate System -\\n        //$45,000,000 -\\n        //The interstate system allows goods and materials to be transported throughout your nation with greater ease.\\n        //Decreases initial infrastructure cost -8% and\\n        //decreases infrastructure upkeep costs -8%.\\n        bool interstateSystem;\\n        //Manhattan Project -\\n        //$100,000,000 -\\n        //The Manhattan Project allows nations below (150k strength) 5% of the top nations in the game to develop nuclear weapons.\\n        //The Manhattan Project cannot be destroyed once it is created.\\n        //The wonder requires 3,000 infrastructure, 300 technology, and a uranium resource.\\n        bool manhattanProject;\\n        //Mining Industry Consortium -\\n        //$25,000,000 -\\n        //Increases population income by $2.00 for the resources Coal, Lead, Oil, Uranium that your nation has access to.\\n        //Requires 5,000 infrastructure, 3,000 land purchased, 1,000 technology.\\n        bool miningIndustryConsortium;\\n    }\\n\\n    mapping(uint256 => Wonders2) public idToWonders2;\\n\\n    event Wonder2Purchased(uint256 indexed countryId, uint256 indexed wonderId);\\n    event Wonder2Deleted(uint256 indexed countryId, uint256 indexed wonderId);\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings(\\n        address _treasury,\\n        address _infrastructure,\\n        address _wonders1,\\n        address _wonders3,\\n        address _wonders4,\\n        address _countryMinter,\\n        address _resources\\n    ) public onlyOwner {\\n        treasuryAddress = _treasury;\\n        infrastructureAddress = _infrastructure;\\n        wonderContract1Address = _wonders1;\\n        wonderContract3Address = _wonders3;\\n        wonderContract4Address = _wonders4;\\n        countryMinter = _countryMinter;\\n        mint = CountryMinter(_countryMinter);\\n        resources = _resources;\\n        res = ResourcesContract(_resources);\\n    }\\n\\n    modifier onlyCountryMinter() {\\n        require(\\n            msg.sender == countryMinter,\\n            \\\"only callable from countryMinter\\\"\\n        );\\n        _;\\n    }\\n\\n    ///@dev this function is only callable from the country minter contract\\n    ///@notice this function will be called when a nation is minted and allow a nation to buy the wonders in this contract\\n    function generateWonders2(uint256 id) public onlyCountryMinter {\\n        require(\\n            idToWonders2[id].initialized == false,\\n            \\\"Nation already initialized\\\"\\n        );\\n        Wonders2 memory newWonders2 = Wonders2(\\n            true,\\n            false,\\n            false,\\n            false,\\n            false,\\n            false,\\n            false,\\n            false,\\n            false,\\n            false\\n        );\\n        idToWonders2[id] = newWonders2;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateGreatMonumentCost(uint256 newPrice) public onlyOwner {\\n        greatMonumentCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateGreatTempleCost(uint256 newPrice) public onlyOwner {\\n        greatTempleCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateGreatUniversityCost(uint256 newPrice) public onlyOwner {\\n        greatUniversityCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateHiddenNuclearMissileSiloCost(\\n        uint256 newPrice\\n    ) public onlyOwner {\\n        hiddenNuclearMissileSiloCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateInterceptorMissileSystemCost(\\n        uint256 newPrice\\n    ) public onlyOwner {\\n        interceptorMissileSystemCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateInternetCost(uint256 newPrice) public onlyOwner {\\n        internetCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateInterstateSystemCost(uint256 newPrice) public onlyOwner {\\n        interstateSystemCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateManhattanProjectCost(uint256 newPrice) public onlyOwner {\\n        manhattanProjectCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateMiningIndustryConsortiumCost(\\n        uint256 newPrice\\n    ) public onlyOwner {\\n        miningIndustryConsortiumCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable from a nation owner and allows a nation to purchase the wonders in this contract\\n    ///@notice this function allows a nation owner to purchase the wonders in this contract\\n    ///@param countryId is the nationId of the country purchasing a wonder\\n    /**@param wonderId is the id of the wonder\\n     * 1. great monument\\n     * 2. great temple\\n     * 3. great university\\n     * 4. hidden nuclear missile silo\\n     * 5. interceptor missile system\\n     * 6. internet\\n     * 7. interstate system\\n     * 8. manhattan project\\n     * 9. mining industry consortium\\n    */\\n    function buyWonder2(uint256 countryId, uint256 wonderId) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(countryId, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        require(wonderId <= 9, \\\"Invalid wonder ID\\\");\\n        uint256 balance = TreasuryContract(treasuryAddress).checkBalance(\\n            countryId\\n        );\\n        if (wonderId == 1) {\\n            require(balance >= greatMonumentCost, \\\"Insufficient balance\\\");\\n            bool existingWonder = idToWonders2[countryId].greatMonument;\\n            require(existingWonder == false, \\\"Already owned\\\");\\n            idToWonders2[countryId].greatMonument = true;\\n            WondersContract1(wonderContract1Address).addWonderCount(countryId);\\n            require(TreasuryContract(treasuryAddress).spendBalance(\\n                countryId,\\n                greatMonumentCost\\n            ));\\n        } else if (wonderId == 2) {\\n            require(balance >= greatTempleCost, \\\"Insufficient balance\\\");\\n            bool existingWonder = idToWonders2[countryId].greatTemple;\\n            require(existingWonder == false, \\\"Already owned\\\");\\n            idToWonders2[countryId].greatTemple = true;\\n            WondersContract1(wonderContract1Address).addWonderCount(countryId);\\n            require(TreasuryContract(treasuryAddress).spendBalance(\\n                countryId,\\n                greatTempleCost\\n            ));\\n        } else if (wonderId == 3) {\\n            require(balance >= greatUniversityCost, \\\"Insufficient balance\\\");\\n            bool existingWonder = idToWonders2[countryId].greatUniversity;\\n            require(existingWonder == false, \\\"Already owned\\\");\\n            idToWonders2[countryId].greatUniversity = true;\\n            WondersContract1(wonderContract1Address).addWonderCount(countryId);\\n            require(TreasuryContract(treasuryAddress).spendBalance(\\n                countryId,\\n                greatUniversityCost\\n            ));\\n        } else if (wonderId == 4) {\\n            require(\\n                balance >= hiddenNuclearMissileSiloCost,\\n                \\\"Insufficient balance\\\"\\n            );\\n            bool existingWonder = idToWonders2[countryId]\\n                .hiddenNuclearMissileSilo;\\n            require(existingWonder == false, \\\"Already owned\\\");\\n            idToWonders2[countryId].hiddenNuclearMissileSilo = true;\\n            WondersContract1(wonderContract1Address).addWonderCount(countryId);\\n            require(TreasuryContract(treasuryAddress).spendBalance(\\n                countryId,\\n                hiddenNuclearMissileSiloCost\\n            ));\\n        } else if (wonderId == 5) {\\n            require(\\n                balance >= interceptorMissileSystemCost,\\n                \\\"Insufficient balance\\\"\\n            );\\n            bool existingWonder = idToWonders2[countryId]\\n                .interceptorMissileSystem;\\n            require(existingWonder == false, \\\"Already owned\\\");\\n            bool strategicDefenseInitiative = WondersContract4(\\n                wonderContract4Address\\n            ).getStrategicDefenseInitiative(countryId);\\n            require(\\n                strategicDefenseInitiative == true,\\n                \\\"Strategic Defense Initiative required to purchase\\\"\\n            );\\n            uint256 techAmount = InfrastructureContract(infrastructureAddress)\\n                .getTechnologyCount(countryId);\\n            require(\\n                techAmount >= 5000,\\n                \\\"Must have 5000 Technology to purchase\\\"\\n            );\\n            idToWonders2[countryId].interceptorMissileSystem = true;\\n            WondersContract1(wonderContract1Address).addWonderCount(countryId);\\n            require(TreasuryContract(treasuryAddress).spendBalance(\\n                countryId,\\n                interceptorMissileSystemCost\\n            ));\\n        } else if (wonderId == 6) {\\n            require(balance >= internetCost, \\\"Insufficient balance\\\");\\n            bool existingWonder = idToWonders2[countryId].internet;\\n            require(existingWonder == false, \\\"Already owned\\\");\\n            idToWonders2[countryId].internet = true;\\n            WondersContract1(wonderContract1Address).addWonderCount(countryId);\\n            require(TreasuryContract(treasuryAddress).spendBalance(\\n                countryId,\\n                internetCost\\n            ));\\n        } else if (wonderId == 7) {\\n            require(balance >= interstateSystemCost, \\\"Insufficient balance\\\");\\n            bool existingWonder = idToWonders2[countryId].interstateSystem;\\n            require(existingWonder == false, \\\"Already owned\\\");\\n            idToWonders2[countryId].interstateSystem = true;\\n            WondersContract1(wonderContract1Address).addWonderCount(countryId);\\n            require(TreasuryContract(treasuryAddress).spendBalance(\\n                countryId,\\n                interstateSystemCost\\n            ));\\n        } else if (wonderId == 8) {\\n            require(balance >= manhattanProjectCost, \\\"Insufficient balance\\\");\\n            bool existingWonder = idToWonders2[countryId].manhattanProject;\\n            require(existingWonder == false, \\\"Already owned\\\");\\n            //require uranium\\n            uint256 infrastructureAmount = InfrastructureContract(\\n                infrastructureAddress\\n            ).getInfrastructureCount(countryId);\\n            require(\\n                infrastructureAmount >= 3000,\\n                \\\"Requires 3000 infrastructure to purchase\\\"\\n            );\\n            uint256 techAmount = InfrastructureContract(infrastructureAddress)\\n                .getTechnologyCount(countryId);\\n            require(techAmount >= 300, \\\"Must have 300 Technology to purchase\\\");\\n            bool uranium = res.viewUranium(countryId);\\n            require(uranium == true, \\\"Requires uranium to purchase\\\");\\n            idToWonders2[countryId].manhattanProject = true;\\n            WondersContract1(wonderContract1Address).addWonderCount(countryId);\\n            require(TreasuryContract(treasuryAddress).spendBalance(\\n                countryId,\\n                manhattanProjectCost\\n            ));\\n        } else {\\n            require(\\n                balance >= miningIndustryConsortiumCost,\\n                \\\"Insufficient balance\\\"\\n            );\\n            bool existingWonder = idToWonders2[countryId]\\n                .miningIndustryConsortium;\\n            require(existingWonder == false, \\\"Already owned\\\");\\n            uint256 techAmount = InfrastructureContract(infrastructureAddress)\\n                .getTechnologyCount(countryId);\\n            require(\\n                techAmount >= 1000,\\n                \\\"Must have 1000 Technology to purchase\\\"\\n            );\\n            uint256 infrastructureAmount = InfrastructureContract(\\n                infrastructureAddress\\n            ).getInfrastructureCount(countryId);\\n            require(\\n                infrastructureAmount >= 5000,\\n                \\\"Must have 5000 Infrastructure to purchase\\\"\\n            );\\n            uint256 landAmount = InfrastructureContract(infrastructureAddress)\\n                .getLandCount(countryId);\\n            require(landAmount >= 3000, \\\"Must have 3000 Land to purchase\\\");\\n            idToWonders2[countryId].miningIndustryConsortium = true;\\n            WondersContract1(wonderContract1Address).addWonderCount(countryId);\\n            require(TreasuryContract(treasuryAddress).spendBalance(\\n                countryId,\\n                miningIndustryConsortiumCost\\n            ));\\n        }\\n        emit Wonder2Purchased(countryId, wonderId);\\n    }\\n\\n    ///@dev this function will allow a nation owner to delete a wonder\\n    ///@dev this function is only callable by a nation owner\\n    ///@notice this funtion will allow a nation owner to delete a wonder\\n    ///@param countryId is the nation deleting the wonder\\n    /**@param wonderId is the id of the wonder\\n     * 1. great monument\\n     * 2. great temple\\n     * 3. great university\\n     * 4. hidden nuclear missile silo\\n     * 5. interceptor missile system\\n     * 6. internet\\n     * 7. interstate system\\n     * 8. manhattan project\\n     * 9. mining industry consortium\\n    */\\n    function deleteWonder2(uint256 countryId, uint256 wonderId) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(countryId, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        require(wonderId <= 9, \\\"Invalid wonder ID\\\");\\n        if (wonderId == 1) {\\n            bool existingWonder = idToWonders2[countryId].greatMonument;\\n            require(existingWonder == true, \\\"No wonder to delete\\\");\\n            idToWonders2[countryId].greatMonument = false;\\n            WondersContract1(wonderContract1Address).subtractWonderCount(\\n                countryId\\n            );\\n        } else if (wonderId == 2) {\\n            bool existingWonder = idToWonders2[countryId].greatTemple;\\n            require(existingWonder == true, \\\"No wonder to delete\\\");\\n            idToWonders2[countryId].greatTemple = false;\\n            WondersContract1(wonderContract1Address).subtractWonderCount(\\n                countryId\\n            );\\n        } else if (wonderId == 3) {\\n            bool existingWonder = idToWonders2[countryId].greatUniversity;\\n            require(existingWonder == true, \\\"No wonder to delete\\\");\\n            idToWonders2[countryId].greatUniversity = false;\\n            WondersContract1(wonderContract1Address).subtractWonderCount(\\n                countryId\\n            );\\n        } else if (wonderId == 4) {\\n            bool existingWonder = idToWonders2[countryId]\\n                .hiddenNuclearMissileSilo;\\n            require(existingWonder == true, \\\"No wonder to delete\\\");\\n            idToWonders2[countryId].hiddenNuclearMissileSilo = false;\\n            WondersContract1(wonderContract1Address).subtractWonderCount(\\n                countryId\\n            );\\n        } else if (wonderId == 5) {\\n            bool existingWonder = idToWonders2[countryId]\\n                .interceptorMissileSystem;\\n            require(existingWonder == true, \\\"No wonder to delete\\\");\\n            idToWonders2[countryId].interceptorMissileSystem = false;\\n            WondersContract1(wonderContract1Address).subtractWonderCount(\\n                countryId\\n            );\\n        } else if (wonderId == 6) {\\n            bool existingWonder = idToWonders2[countryId].internet;\\n            require(existingWonder == true, \\\"No wonder to delete\\\");\\n            idToWonders2[countryId].internet = false;\\n            WondersContract1(wonderContract1Address).subtractWonderCount(\\n                countryId\\n            );\\n        } else if (wonderId == 7) {\\n            bool existingWonder = idToWonders2[countryId].interstateSystem;\\n            require(existingWonder == true, \\\"No wonder to delete\\\");\\n            idToWonders2[countryId].interstateSystem = false;\\n            WondersContract1(wonderContract1Address).subtractWonderCount(\\n                countryId\\n            );\\n        } else if (wonderId == 8) {\\n            bool existingWonder = idToWonders2[countryId].manhattanProject;\\n            require(existingWonder == true, \\\"No wonder to delete\\\");\\n            idToWonders2[countryId].manhattanProject = false;\\n            WondersContract1(wonderContract1Address).subtractWonderCount(\\n                countryId\\n            );\\n        } else {\\n            bool existingWonder = idToWonders2[countryId]\\n                .miningIndustryConsortium;\\n            require(existingWonder == true, \\\"No wonder to delete\\\");\\n            idToWonders2[countryId].miningIndustryConsortium = false;\\n            WondersContract1(wonderContract1Address).subtractWonderCount(\\n                countryId\\n            );\\n        }\\n        emit Wonder2Deleted(countryId, wonderId);\\n    }\\n\\n    ///@dev this is a public view function that will return true if a nation has the great monument wonder\\n    ///@dev this function will return true if a nation has the great monument wonder\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool will be true if the nation has the wonder\\n    function getGreatMonument(uint256 id) public view returns (bool) {\\n        return idToWonders2[id].greatMonument;\\n    }\\n\\n    ///@dev this is a public view function that will return true if a nation has the great temple wonder\\n    ///@dev this function will return true if a nation has the great temple wonder\\n    ///@param id is the nation id of the nation being queried\\n    ///@return bool will be true if the nation has the wonder\\n    function getGreatTemple(uint256 id) public view returns (bool) {\\n        return idToWonders2[id].greatTemple;\\n    }\\n\\n    ///@dev this is a public view function that will return true if a nation has the great university wonder\\n    ///@dev this function will return true if a nation has the great university wonder\\n    ///@param countryId is the nation id of the nation being queried\\n    ///@return bool will be true if the nation has the wonder\\n    function getGreatUniversity(uint256 countryId) public view returns (bool) {\\n        return idToWonders2[countryId].greatUniversity;\\n    }\\n\\n    ///@dev this is a public view function that will return true if a nation has the hidden nuclear missile silo wonder\\n    ///@dev this function will return true if a nation has the hidden nuclear missile silo wonder\\n    ///@param countryId is the nation id of the nation being queried\\n    ///@return bool will be true if the nation has the wonder\\n    function getHiddenNuclearMissileSilo(\\n        uint256 countryId\\n    ) public view returns (bool) {\\n        return idToWonders2[countryId].hiddenNuclearMissileSilo;\\n    }\\n\\n    ///@dev this is a public view function that will return true if a nation has the intereptor missile system wonder\\n    ///@dev this function will return true if a nation has the intereptor missile system wonder\\n    ///@param countryId is the nation id of the nation being queried\\n    ///@return bool will be true if the nation has the wonder\\n    function getInterceptorMissileSystem(\\n        uint256 countryId\\n    ) public view returns (bool) {\\n        return idToWonders2[countryId].interceptorMissileSystem;\\n    }\\n\\n    ///@dev this is a public view function that will return true if a nation has the internet wonder\\n    ///@dev this function will return true if a nation has the internet wonder\\n    ///@param countryId is the nation id of the nation being queried\\n    ///@return bool will be true if the nation has the wonder\\n    function getInternet(uint256 countryId) public view returns (bool) {\\n        return idToWonders2[countryId].internet;\\n    }\\n\\n    ///@dev this is a public view function that will return true if a nation has the interstate system wonder\\n    ///@dev this function will return true if a nation has the interstate system wonder\\n    ///@param countryId is the nation id of the nation being queried\\n    ///@return bool will be true if the nation has the wonder\\n    function getInterstateSystem(uint256 countryId) public view returns (bool) {\\n        return idToWonders2[countryId].interstateSystem;\\n    }\\n\\n    ///@dev this is a public view function that will return true if a nation has the manhattan project wonder\\n    ///@dev this function will return true if a nation has the manhattan project wonder\\n    ///@param countryId is the nation id of the nation being queried\\n    ///@return bool will be true if the nation has the wonder\\n    function getManhattanProject(uint256 countryId) public view returns (bool) {\\n        return idToWonders2[countryId].manhattanProject;\\n    }\\n\\n    ///@dev this is a public view function that will return true if a nation has the mining industry consortium wonder\\n    ///@dev this function will return true if a nation has the mining industry consortium wonder\\n    ///@param countryId is the nation id of the nation being queried\\n    ///@return bool will be true if the nation has the wonder\\n    function getMiningIndustryConsortium(\\n        uint256 countryId\\n    ) public view returns (bool) {\\n        return idToWonders2[countryId].miningIndustryConsortium;\\n    }\\n\\n    ///@dev this function will return the costs of the wonders in this contract\\n    function getWonderCosts2() public view returns(\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256\\n    ) {\\n        return (\\n            greatMonumentCost,\\n            greatTempleCost,\\n            greatUniversityCost,\\n            hiddenNuclearMissileSiloCost,\\n            interceptorMissileSystemCost,\\n            internetCost,\\n            interstateSystemCost,\\n            manhattanProjectCost,\\n            miningIndustryConsortiumCost\\n        );\\n    }\\n}\\n\\n///@title WondersContract3\\n///@author OxSnosh\\n///@dev this contract inherits from openzeppelin's ownable contract\\n///@notice this contract will strore information about a nations wonders\\ncontract WondersContract3 is Ownable, ReentrancyGuard {\\n    address public treasuryAddress;\\n    address public infrastructureAddress;\\n    address public wonderContract1Address;\\n    address public wonderContract2Address;\\n    address public wonderContract4Address;\\n    address public forces;\\n    address public countryMinter;\\n    address public resources;\\n    uint256 public movieIndustryCost = 26000000 * (10**18);\\n    uint256 public nationalCemetaryCost = 150000000 * (10**18);\\n    uint256 public nationalEnvironmentOfficeCost = 100000000 * (10**18);\\n    uint256 public nationalResearchLabCost = 35000000 * (10**18);\\n    uint256 public nationalWarMemorialCost = 27000000 * (10**18);\\n    uint256 public nuclearPowerPlantCost = 75000000 * (10**18);\\n    uint256 public pentagonCost = 30000000 * (10**18);\\n    uint256 public politicalLobbyistsCost = 50000000 * (10**18);\\n    uint256 public scientificDevelopmentCenterCost = 150000000 * (10**18);\\n\\n    ForcesContract frc;\\n    CountryMinter mint;\\n    ResourcesContract res;\\n\\n    struct Wonders3 {\\n        bool initialized;\\n        //Movie Industry -\\n        //$26,000,000 -\\n        //The movie industry provides a great source of entertainment to your people.\\n        //Increases population happiness +3.\\n        bool movieIndustry;\\n        //National Cemetery -\\n        //$150,000,000 -\\n        //Provides +0.20 Happiness per 1,000,000 soldier casualties up to +5 happiness.\\n        //Requires 5 million soldier casualties and a National War Memorial.\\n        bool nationalCemetary;\\n        //National Environment Office -\\n        //$100,000,000 -\\n        //The national environment office removes the penalties for Coal, Oil, and Uranium,\\n        //improves environment by 1 point,\\n        //increases population +3%,\\n        //and reduces infrastructure upkeep -3%.\\n        //Requires 13,000 infrastructure.\\n        bool nationalEnvironmentOffice;\\n        //National Research Lab -\\n        //$35,000,000 -\\n        //The national research lab is a central location for scientists seeking cures for common diseases among your population.\\n        //Increases population +5% and\\n        //decreases technology costs -3%.\\n        bool nationalResearchLab;\\n        //National War Memorial -\\n        //$27,000,000 -\\n        //The war memorial allows your citizens to remember its fallen soldiers.\\n        //This wonder is only available to nations that have lost over 50,000 soldiers during war throughout the life of your nation.\\n        //Increases population happiness +4.\\n        bool nationalWarMemorial;\\n        //Nuclear Power Plant -\\n        //$75,000,000 -\\n        //The nuclear power plant allows nations to receive Uranium financial bonus\\n        //(+$3 citizen income +$0.15 per technology level up to 30 technology levels. Requires an active Uranium trade.)\\n        //even when maintaining nuclear weaponry.\\n        //The nuclear power plant by itself, even without a Uranium trade, reduces infrastructure upkeep -5%,\\n        //national wonder upkeep -5%,\\n        //and improvement upkeep -5%.\\n        //Requires 12,000 infrastructure, 1,000 technology, and a Uranium resource to build.\\n        bool nuclearPowerPlant;\\n        //Pentagon -\\n        //$30,000,000 -\\n        //The Pentagon serves as your nation's headquarters for military operations.\\n        //Increases attacking and defending ground battle strength +20%.\\n        bool pentagon;\\n        //Political Lobbyists -\\n        //$50,000,000 -\\n        //Your vote counts as two votes in your team's senate.\\n        //Must be re-purchased every time you switch teams.\\n        bool politicalLobbyists;\\n        //Scientific Development Center -\\n        //$150,000,000 -\\n        //The scientific development center increases the productivity of your factories from\\n        //-8% infrastructure cost to -10% infrastructure cost,\\n        //increases the productivity of your universities from\\n        //+8% citizen income to +10% citizen income,\\n        //allows the Great University to give its technology happiness bonus up to 5,000 technology levels\\n        //(+2 happiness each 1,000 technology levels).\\n        //Requires 14,000 infrastructure, 3,000 technology, Great University, National Research Lab.\\n        bool scientificDevelopmentCenter;\\n    }\\n\\n    mapping(uint256 => Wonders3) public idToWonders3;\\n\\n    event Wonder3Purchased(uint256 indexed countryId, uint256 indexed wonderId);\\n    event Wonder3Deleted(uint256 indexed countryId, uint256 indexed wonderId);\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings(\\n        address _treasuryAddress,\\n        address _infrastructureAddress,\\n        address _forces,\\n        address _wonders1,\\n        address _wonders2,\\n        address _wonders4,\\n        address _countryMinter,\\n        address _resources\\n    ) public onlyOwner {\\n        treasuryAddress = _treasuryAddress;\\n        infrastructureAddress = _infrastructureAddress;\\n        forces = _forces;\\n        frc = ForcesContract(_forces);\\n        wonderContract1Address = _wonders1;\\n        wonderContract2Address = _wonders2;\\n        wonderContract4Address = _wonders4;\\n        countryMinter = _countryMinter;\\n        mint = CountryMinter(_countryMinter);\\n        resources = _resources;\\n        res = ResourcesContract(_resources);\\n    }\\n\\n    modifier onlyCountryMinter() {\\n        require(\\n            msg.sender == countryMinter,\\n            \\\"only callable from countryMinter\\\"\\n        );\\n        _;\\n    }\\n\\n    ///@dev this function is only callable from the country minter contract\\n    ///@notice this function will be called when a nation is minted and allow a nation to buy the wonders in this contract\\n    function generateWonders3(uint256 id) public onlyCountryMinter {\\n        require(\\n            idToWonders3[id].initialized == false,\\n            \\\"Nation already initialized\\\"\\n        );\\n        Wonders3 memory newWonders3 = Wonders3(\\n            true,\\n            false,\\n            false,\\n            false,\\n            false,\\n            false,\\n            false,\\n            false,\\n            false,\\n            false\\n        );\\n        idToWonders3[id] = newWonders3;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateMovieIndustryCost(uint256 newPrice) public onlyOwner {\\n        movieIndustryCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateNationalCemetaryCost(uint256 newPrice) public onlyOwner {\\n        nationalCemetaryCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateNationalEnvironmentOfficeCost(uint256 newPrice)\\n        public\\n        onlyOwner\\n    {\\n        nationalEnvironmentOfficeCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateNationalResearchLabCost(uint256 newPrice) public onlyOwner {\\n        nationalResearchLabCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateNationalWarMemorialCost(uint256 newPrice) public onlyOwner {\\n        nationalWarMemorialCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateNuclearPowerPlantCost(uint256 newPrice) public onlyOwner {\\n        nuclearPowerPlantCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updatePentagonCost(uint256 newPrice) public onlyOwner {\\n        pentagonCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updatePoliticalLobbyistsCost(uint256 newPrice) public onlyOwner {\\n        politicalLobbyistsCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateScientificDevelopmentCenterCost(uint256 newPrice)\\n        public\\n        onlyOwner\\n    {\\n        scientificDevelopmentCenterCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable from a nation owner and allows a nation to purchase the wonders in this contract\\n    ///@notice this function allows a nation owner to purchase the wonders in this contract\\n    ///@param countryId is the nationId of the country purchasing a wonder\\n    /**@param wonderId is the id of the wonder\\n     * 1. movie industry\\n     * 2. national cemetary\\n     * 3. national environmental office\\n     * 4. national research lab\\n     * 5. national war memorial\\n     * 6. nuclear power plant\\n     * 7. pentagon\\n     * 8. political lobbyists\\n     * 9. scientific development center\\n    */\\n    function buyWonder3(uint256 countryId, uint256 wonderId) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(countryId, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        require(wonderId <= 9, \\\"Invalid wonder ID\\\");\\n        uint256 balance = TreasuryContract(treasuryAddress).checkBalance(\\n            countryId\\n        );\\n        if (wonderId == 1) {\\n            require(balance >= movieIndustryCost, \\\"Insufficient balance\\\");\\n            bool existingWonder = idToWonders3[countryId].movieIndustry;\\n            require(existingWonder == false, \\\"Already owned\\\");\\n            idToWonders3[countryId].movieIndustry = true;\\n            WondersContract1(wonderContract1Address).addWonderCount(countryId);\\n            require(TreasuryContract(treasuryAddress).spendBalance(\\n                countryId,\\n                movieIndustryCost\\n            ));\\n        } else if (wonderId == 2) {\\n            require(balance >= nationalCemetaryCost, \\\"Insufficient balance\\\");\\n            bool existingWonder = idToWonders3[countryId].nationalCemetary;\\n            require(existingWonder == false, \\\"Already owned\\\");\\n            (uint256 casualties , ) = frc.getCasualties(countryId);\\n            require(casualties >= 5000000, \\\"not enough casualties to purchase\\\");\\n            bool nationalWarMemorial = idToWonders3[countryId]\\n                .nationalWarMemorial;\\n            require(\\n                nationalWarMemorial == true,\\n                \\\"Must own National War Memorial wonder to purchase\\\"\\n            );\\n            idToWonders3[countryId].nationalCemetary = true;\\n            WondersContract1(wonderContract1Address).addWonderCount(countryId);\\n            require(TreasuryContract(treasuryAddress).spendBalance(\\n                countryId,\\n                nationalCemetaryCost\\n            ));\\n        } else if (wonderId == 3) {\\n            require(\\n                balance >= nationalEnvironmentOfficeCost,\\n                \\\"Insufficient balance\\\"\\n            );\\n            bool existingWonder = idToWonders3[countryId]\\n                .nationalEnvironmentOffice;\\n            require(existingWonder == false, \\\"Already owned\\\");\\n            uint256 infrastructureAmount = InfrastructureContract(\\n                infrastructureAddress\\n            ).getInfrastructureCount(countryId);\\n            require(\\n                infrastructureAmount >= 13000,\\n                \\\"Requires 13000 infrastructure to purchase\\\"\\n            );\\n            idToWonders3[countryId].nationalEnvironmentOffice = true;\\n            WondersContract1(wonderContract1Address).addWonderCount(countryId);\\n            require(TreasuryContract(treasuryAddress).spendBalance(\\n                countryId,\\n                nationalEnvironmentOfficeCost\\n            ));\\n        } else if (wonderId == 4) {\\n            require(balance >= nationalResearchLabCost, \\\"Insufficient balance\\\");\\n            bool existingWonder = idToWonders3[countryId].nationalResearchLab;\\n            require(existingWonder == false, \\\"Already owned\\\");\\n            idToWonders3[countryId].nationalResearchLab = true;\\n            WondersContract1(wonderContract1Address).addWonderCount(countryId);\\n            require(TreasuryContract(treasuryAddress).spendBalance(\\n                countryId,\\n                nationalResearchLabCost\\n            ));\\n        } else if (wonderId == 5) {\\n            require(balance >= nationalWarMemorialCost, \\\"Insufficient balance\\\");\\n            bool existingWonder = idToWonders3[countryId].nationalWarMemorial;\\n            require(existingWonder == false, \\\"Already owned\\\");\\n            (uint256 casualties , ) = frc.getCasualties(countryId);\\n            require(casualties >= 50000, \\\"not enough casualties\\\");\\n            idToWonders3[countryId].nationalWarMemorial = true;\\n            WondersContract1(wonderContract1Address).addWonderCount(countryId);\\n            require(TreasuryContract(treasuryAddress).spendBalance(\\n                countryId,\\n                nationalWarMemorialCost\\n            ));\\n        } else if (wonderId == 6) {\\n            require(balance >= nuclearPowerPlantCost, \\\"Insufficient balance\\\");\\n            bool existingWonder = idToWonders3[countryId].nuclearPowerPlant;\\n            require(existingWonder == false, \\\"Already owned\\\");\\n            uint256 techAmount = InfrastructureContract(infrastructureAddress)\\n                .getTechnologyCount(countryId);\\n            require(\\n                techAmount >= 1000,\\n                \\\"Must have 1000 Technology to purchase\\\"\\n            );\\n            uint256 infrastructureAmount = InfrastructureContract(\\n                infrastructureAddress\\n            ).getInfrastructureCount(countryId);\\n            require(\\n                infrastructureAmount >= 12000,\\n                \\\"Must have 12000 Infrastructure to purchase\\\"\\n            );\\n            bool uranium = res.viewUranium(countryId);\\n            require(uranium == true, \\\"Requires uranium to purchase\\\");\\n            idToWonders3[countryId].nuclearPowerPlant = true;\\n            WondersContract1(wonderContract1Address).addWonderCount(countryId);\\n            require(TreasuryContract(treasuryAddress).spendBalance(\\n                countryId,\\n                nuclearPowerPlantCost\\n            ));\\n        } else if (wonderId == 7) {\\n            require(balance >= pentagonCost, \\\"Insufficient balance\\\");\\n            bool existingWonder = idToWonders3[countryId].pentagon;\\n            require(existingWonder == false, \\\"Already owned\\\");\\n            idToWonders3[countryId].pentagon = true;\\n            WondersContract1(wonderContract1Address).addWonderCount(countryId);\\n            require(TreasuryContract(treasuryAddress).spendBalance(\\n                countryId,\\n                pentagonCost\\n            ));\\n        } else if (wonderId == 8) {\\n            require(balance >= politicalLobbyistsCost, \\\"Insufficient balance\\\");\\n            bool existingWonder = idToWonders3[countryId].politicalLobbyists;\\n            require(existingWonder == false, \\\"Already owned\\\");\\n            idToWonders3[countryId].politicalLobbyists = true;\\n            WondersContract1(wonderContract1Address).addWonderCount(countryId);\\n            require(TreasuryContract(treasuryAddress).spendBalance(\\n                countryId,\\n                politicalLobbyistsCost\\n            ));\\n        } else {\\n            require(\\n                balance >= scientificDevelopmentCenterCost,\\n                \\\"Insufficient balance\\\"\\n            );\\n            bool existingWonder = idToWonders3[countryId]\\n                .scientificDevelopmentCenter;\\n            require(existingWonder == false, \\\"Already owned\\\");\\n            uint256 techAmount = InfrastructureContract(infrastructureAddress)\\n                .getTechnologyCount(countryId);\\n            require(\\n                techAmount >= 3000,\\n                \\\"Must have 3000 Technology to purchase\\\"\\n            );\\n            uint256 infrastructureAmount = InfrastructureContract(\\n                infrastructureAddress\\n            ).getInfrastructureCount(countryId);\\n            require(\\n                infrastructureAmount >= 14000,\\n                \\\"Must have 14000 Infrastructure to purchase\\\"\\n            );\\n            bool isGreatUniversity = WondersContract2(wonderContract2Address)\\n                .getGreatUniversity(countryId);\\n            require(\\n                isGreatUniversity == true,\\n                \\\"Great University required to purchase\\\"\\n            );\\n            bool isNationalResearchLab = idToWonders3[countryId]\\n                .nationalResearchLab;\\n            require(\\n                isNationalResearchLab == true,\\n                \\\"National Research Lab required to purchase\\\"\\n            );\\n            idToWonders3[countryId].scientificDevelopmentCenter = true;\\n            WondersContract1(wonderContract1Address).addWonderCount(countryId);\\n            require(TreasuryContract(treasuryAddress).spendBalance(\\n                countryId,\\n                scientificDevelopmentCenterCost\\n            ));\\n        }\\n        emit Wonder3Purchased(countryId, wonderId);\\n    }\\n\\n    ///@dev this function will allow a nation owner to delete a wonder\\n    ///@dev this function is only callable by a nation owner\\n    ///@notice this funtion will allow a nation owner to delete a wonder\\n    ///@param countryId is the nation deleting the wonder\\n    /**@param wonderId is the id of the wonder\\n     * 1. movie industry\\n     * 2. national cemetary\\n     * 3. national environmental office\\n     * 4. national research lab\\n     * 5. national war memorial\\n     * 6. nuclear power plant\\n     * 7. pentagon\\n     * 8. political lobbyists\\n     * 9. scientific development center\\n    */\\n    function deleteWonder3(uint256 countryId, uint256 wonderId) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(countryId, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        require(wonderId <= 9, \\\"Invalid wonder ID\\\");\\n        if (wonderId == 1) {\\n            bool existingWonder = idToWonders3[countryId].movieIndustry;\\n            require(existingWonder == true, \\\"No wonder to delete\\\");\\n            idToWonders3[countryId].movieIndustry = false;\\n            WondersContract1(wonderContract1Address).subtractWonderCount(\\n                countryId\\n            );\\n        } else if (wonderId == 2) {\\n            bool existingWonder = idToWonders3[countryId].nationalCemetary;\\n            require(existingWonder == true, \\\"No wonder to delete\\\");\\n            idToWonders3[countryId].nationalCemetary = false;\\n            WondersContract1(wonderContract1Address).subtractWonderCount(\\n                countryId\\n            );\\n        } else if (wonderId == 3) {\\n            bool existingWonder = idToWonders3[countryId]\\n                .nationalEnvironmentOffice;\\n            require(existingWonder == true, \\\"No wonder to delete\\\");\\n            idToWonders3[countryId].nationalEnvironmentOffice = false;\\n            WondersContract1(wonderContract1Address).subtractWonderCount(\\n                countryId\\n            );\\n        } else if (wonderId == 4) {\\n            bool existingWonder = idToWonders3[countryId].nationalResearchLab;\\n            require(existingWonder == true, \\\"No wonder to delete\\\");\\n            idToWonders3[countryId].nationalResearchLab = false;\\n            WondersContract1(wonderContract1Address).subtractWonderCount(\\n                countryId\\n            );\\n        } else if (wonderId == 5) {\\n            bool existingWonder = idToWonders3[countryId].nationalWarMemorial;\\n            require(existingWonder == true, \\\"No wonder to delete\\\");\\n            idToWonders3[countryId].nationalWarMemorial = false;\\n            WondersContract1(wonderContract1Address).subtractWonderCount(\\n                countryId\\n            );\\n        } else if (wonderId == 6) {\\n            bool existingWonder = idToWonders3[countryId].nuclearPowerPlant;\\n            require(existingWonder == true, \\\"No wonder to delete\\\");\\n            idToWonders3[countryId].nuclearPowerPlant = false;\\n            WondersContract1(wonderContract1Address).subtractWonderCount(\\n                countryId\\n            );\\n        } else if (wonderId == 7) {\\n            bool existingWonder = idToWonders3[countryId].pentagon;\\n            require(existingWonder == true, \\\"No wonder to delete\\\");\\n            idToWonders3[countryId].pentagon = false;\\n            WondersContract1(wonderContract1Address).subtractWonderCount(\\n                countryId\\n            );\\n        } else if (wonderId == 8) {\\n            bool existingWonder = idToWonders3[countryId].politicalLobbyists;\\n            require(existingWonder == true, \\\"No wonder to delete\\\");\\n            idToWonders3[countryId].politicalLobbyists = false;\\n            WondersContract1(wonderContract1Address).subtractWonderCount(\\n                countryId\\n            );\\n        } else {\\n            bool existingWonder = idToWonders3[countryId]\\n                .scientificDevelopmentCenter;\\n            require(existingWonder == true, \\\"No wonder to delete\\\");\\n            idToWonders3[countryId].scientificDevelopmentCenter = false;\\n            WondersContract1(wonderContract1Address).subtractWonderCount(\\n                countryId\\n            );\\n        }\\n        emit Wonder3Deleted(countryId, wonderId);\\n    }\\n\\n    ///@dev this is a public view function that will return true if a nation has the movie industry wonder\\n    ///@dev this function will return true if a nation has the movie industry wonder\\n    ///@param countryId is the nation id of the nation being queried\\n    ///@return bool will be true if the nation has the wonder\\n    function getMovieIndustry(uint256 countryId) public view returns (bool) {\\n        return idToWonders3[countryId].movieIndustry;\\n    }\\n\\n    ///@dev this is a public view function that will return true if a nation has the national cemetary wonder\\n    ///@dev this function will return true if a nation has the national cemetary wonder\\n    ///@param countryId is the nation id of the nation being queried\\n    ///@return bool will be true if the nation has the wonder\\n    function getNationalCemetary(uint256 countryId) public view returns (bool) {\\n        return idToWonders3[countryId].nationalCemetary;\\n    }\\n\\n    ///@dev this is a public view function that will return true if a nation has the national environmental office wonder\\n    ///@dev this function will return true if a nation has the national environmental office wonder\\n    ///@param countryId is the nation id of the nation being queried\\n    ///@return bool will be true if the nation has the wonder\\n    function getNationalEnvironmentOffice(\\n        uint256 countryId\\n    ) public view returns (bool) {\\n        return idToWonders3[countryId].nationalEnvironmentOffice;\\n    }\\n\\n    ///@dev this is a public view function that will return true if a nation has the national research lab wonder\\n    ///@dev this function will return true if a nation has the national research lab wonder\\n    ///@param countryId is the nation id of the nation being queried\\n    ///@return bool will be true if the nation has the wonder\\n    function getNationalResearchLab(\\n        uint256 countryId\\n    ) public view returns (bool) {\\n        return idToWonders3[countryId].nationalResearchLab;\\n    }\\n\\n    ///@dev this is a public view function that will return true if a nation has the national war memorial wonder\\n    ///@dev this function will return true if a nation has the national war memorial wonder\\n    ///@param countryId is the nation id of the nation being queried\\n    ///@return bool will be true if the nation has the wonder\\n    function getNationalWarMemorial(\\n        uint256 countryId\\n    ) public view returns (bool) {\\n        return idToWonders3[countryId].nationalWarMemorial;\\n    }\\n\\n    ///@dev this is a public view function that will return true if a nation has the nuclear power plant wonder\\n    ///@dev this function will return true if a nation has the nuclear power plant wonder\\n    ///@param countryId is the nation id of the nation being queried\\n    ///@return bool will be true if the nation has the wonder\\n    function getNuclearPowerPlant(\\n        uint256 countryId\\n    ) public view returns (bool) {\\n        return idToWonders3[countryId].nuclearPowerPlant;\\n    }\\n\\n    ///@dev this is a public view function that will return true if a nation has the pentagon wonder\\n    ///@dev this function will return true if a nation has the pentagon wonder\\n    ///@param countryId is the nation id of the nation being queried\\n    ///@return bool will be true if the nation has the wonder\\n    function getPentagon(uint256 countryId) public view returns (bool) {\\n        return idToWonders3[countryId].pentagon;\\n    }\\n\\n    ///@dev this is a public view function that will return true if a nation has the political lobbyists wonder\\n    ///@dev this function will return true if a nation has the political lobbyists wonder\\n    ///@param countryId is the nation id of the nation being queried\\n    ///@return bool will be true if the nation has the wonder\\n    function getPoliticalLobbyists(\\n        uint256 countryId\\n    ) public view returns (bool) {\\n        return idToWonders3[countryId].politicalLobbyists;\\n    }\\n\\n    ///@dev this is a public view function that will return true if a nation has the scientific development center wonder\\n    ///@dev this function will return true if a nation has the scientific development center wonder\\n    ///@param countryId is the nation id of the nation being queried\\n    ///@return bool will be true if the nation has the wonder\\n    function getScientificDevelopmentCenter(\\n        uint256 countryId\\n    ) public view returns (bool) {\\n        return idToWonders3[countryId].scientificDevelopmentCenter;\\n    }\\n\\n    ///@dev this function will return the costs of the wonders in this contract\\n    function getWonderCosts3() public view returns(\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256\\n    ) {\\n        return (\\n            movieIndustryCost,\\n            nationalCemetaryCost,\\n            nationalEnvironmentOfficeCost,\\n            nationalResearchLabCost,\\n            nationalWarMemorialCost,\\n            nuclearPowerPlantCost,\\n            pentagonCost,\\n            politicalLobbyistsCost,\\n            scientificDevelopmentCenterCost\\n        );\\n    }\\n}\\n\\n///@title WondersContract4\\n///@author OxSnosh\\n///@dev this contract inherits from openzeppelin's ownable contract\\n///@notice this contract will strore information about a nations wonders\\ncontract WondersContract4 is Ownable, ReentrancyGuard {\\n    address public treasuryAddress;\\n    address public infrastructureAddress;\\n    address public improvementsContract2Address;\\n    address public improvementsContract3Address;\\n    address public improvementsContract4Address;\\n    address public wonderContract1Address;\\n    address public wonderContract3Address;\\n    address public countryMinter;\\n    uint256 public socialSecuritySystemCost = 40000000 * (10**18);\\n    uint256 public spaceProgramCost = 30000000 * (10**18);\\n    uint256 public stockMarketCost = 30000000 * (10**18);\\n    uint256 public strategicDefenseInitiativeCost = 75000000 * (10**18);\\n    uint256 public superiorLogisticalSupportCost = 80000000 * (10**18);\\n    uint256 public universalHealthcareCost = 100000000 * (10**18);\\n    uint256 public weaponsResearchCenterCost = 150000000 * (10**18);\\n\\n    CountryMinter mint;\\n\\n    struct Wonders4 {\\n        bool initialized;\\n        //Social Security System -\\n        //$40,000,000-\\n        //The social security system provides benefits to aging members of your nation.\\n        //Allows you to raise taxes above 28% up to 30% without additional happiness penalties.\\n        bool socialSecuritySystem;\\n        //Space Program -\\n        //$30,000,000 -\\n        //The space program sends your astronauts to the moon and beyond.\\n        //Increases happiness +3, lowers technology cost -3% and lowers aircraft cost -5%.\\n        bool spaceProgram;\\n        //Stock Market -\\n        //$30,000,000 -\\n        //The stock market provides a boost to your economy.\\n        //Increases citizen income +$10.00\\n        bool stockMarket;\\n        //Strategic Defense Initiative (SDI) -\\n        //$75,000,000 -\\n        //Reduces odds of a successful nuclear attack against your nation by 60%.\\n        //The SDI wonder also requires 3 satellites and 3 missile defenses\\n        //and those satellites and missile defenses cannot be deleted once the wonder is developed.\\n        bool strategicDefenseInitiative;\\n        //Superior Logistical Support -\\n        //$80,000,000 -\\n        //Provides supplies more efficiently to your nation's military.\\n        //Reduces Aircraft and Naval Maintenance Cost by -10% and\\n        //Tank Maintenance Cost by -5%.\\n        //Increases attacking and defending ground battle strength +10%.\\n        //Requires Pentagon.\\n        bool superiorLogisticalSupport;\\n        //Universal Health Care -\\n        //$100,000,000 -\\n        //A Universal Health Care program\\n        //increases population +3% and\\n        //increases population happiness +2.\\n        //Requires 11,000 infrastructure, Hospital, National Research Lab.\\n        bool universalHealthcare;\\n        //Weapons Research Complex -\\n        //$150,000,000 -\\n        //Increases the technology bonus to damage from 0.01% to 0.02% per technology level,\\n        //Increases the number of nukes that can be purchased per day to 2,\\n        //hurts environment by +1,\\n        //Increases the purchase costs of all military by 0.01% per technology level.\\n        //Requires 8,500 infrastructure, 2,000 technology, National Research Lab, Pentagon Wonder.\\n        bool weaponsResearchCenter;\\n    }\\n\\n    mapping(uint256 => Wonders4) public idToWonders4;\\n\\n    event Wonder4Purchased(uint256 indexed countryId, uint256 indexed wonderId);\\n    event Wonder4Deleted(uint256 indexed countryId, uint256 indexed wonderId);\\n\\n    ///@dev this function is only callable by the contract owner\\n    ///@dev this function will be called immediately after contract deployment in order to set contract pointers\\n    function settings(\\n        address _treasuryAddress,\\n        address _improvementsContract2Address,\\n        address _improvementsContract3Address,\\n        address _improvementsContract4Address,\\n        address _infrastructureAddress,\\n        address _wonders1,\\n        address _wonders3,\\n        address _countryMinter\\n    ) public onlyOwner {\\n        treasuryAddress = _treasuryAddress;\\n        improvementsContract2Address = _improvementsContract2Address;\\n        improvementsContract3Address = _improvementsContract3Address;\\n        improvementsContract4Address = _improvementsContract4Address;\\n        infrastructureAddress = _infrastructureAddress;\\n        wonderContract1Address = _wonders1;\\n        wonderContract3Address = _wonders3;\\n        countryMinter = _countryMinter;\\n        mint = CountryMinter(_countryMinter);\\n    }\\n\\n    modifier onlyCountryMinter() {\\n        require(\\n            msg.sender == countryMinter,\\n            \\\"only callable from countryMinter\\\"\\n        );\\n        _;\\n    }\\n\\n    ///@dev this function is only callable from the country minter contract\\n    ///@notice this function will be called when a nation is minted and allow a nation to buy the wonders in this contract\\n    function generateWonders4(uint256 id) public onlyCountryMinter {\\n        require(\\n            idToWonders4[id].initialized == false,\\n            \\\"Nation already initialized\\\"\\n        );\\n        Wonders4 memory newWonders4 = Wonders4(\\n            true,\\n            false,\\n            false,\\n            false,\\n            false,\\n            false,\\n            false,\\n            false\\n        );\\n        idToWonders4[id] = newWonders4;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateSocialSecuritySystemCost(uint256 newPrice) public onlyOwner {\\n        socialSecuritySystemCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateSpaceProgramCost(uint256 newPrice) public onlyOwner {\\n        spaceProgramCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateStockMarketCost(uint256 newPrice) public onlyOwner {\\n        stockMarketCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateStrategicDefenseInitiativeCost(\\n        uint256 newPrice\\n    ) public onlyOwner {\\n        strategicDefenseInitiativeCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateSuperiorLogisticalSupportCost(\\n        uint256 newPrice\\n    ) public onlyOwner {\\n        superiorLogisticalSupportCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateUniversalHealthcareCost(uint256 newPrice) public onlyOwner {\\n        universalHealthcareCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable by the contract owner\\n    function updateWeaponsResearchCenterCost(\\n        uint256 newPrice\\n    ) public onlyOwner {\\n        weaponsResearchCenterCost = newPrice;\\n    }\\n\\n    ///@dev this function is only callable from a nation owner and allows a nation to purchase the wonders in this contract\\n    ///@notice this function allows a nation owner to purchase the wonders in this contract\\n    ///@param countryId is the nationId of the country purchasing a wonder\\n    /**@param wonderId is the id of the wonder\\n     * 1. social security system\\n     * 2. space program\\n     * 3. stock market\\n     * 4. strategic defense initiative\\n     * 5. superior logistical support\\n     * 6. universal healthcare\\n     * 7. weapons research center\\n    */\\n    function buyWonder4(uint256 countryId, uint256 wonderId) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(countryId, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        require(wonderId <= 7, \\\"Invalid wonder ID\\\");\\n        uint256 balance = TreasuryContract(treasuryAddress).checkBalance(\\n            countryId\\n        );\\n        if (wonderId == 1) {\\n            require(\\n                balance >= socialSecuritySystemCost,\\n                \\\"Insufficient balance\\\"\\n            );\\n            bool existingWonder = idToWonders4[countryId].socialSecuritySystem;\\n            require(existingWonder == false, \\\"Already owned\\\");\\n            idToWonders4[countryId].socialSecuritySystem = true;\\n            WondersContract1(wonderContract1Address).addWonderCount(countryId);\\n            require(TreasuryContract(treasuryAddress).spendBalance(\\n                countryId,\\n                socialSecuritySystemCost\\n            ));\\n        } else if (wonderId == 2) {\\n            require(balance >= spaceProgramCost, \\\"Insufficient balance\\\");\\n            bool existingWonder = idToWonders4[countryId].spaceProgram;\\n            require(existingWonder == false, \\\"Already owned\\\");\\n            idToWonders4[countryId].spaceProgram = true;\\n            WondersContract1(wonderContract1Address).addWonderCount(countryId);\\n            require(TreasuryContract(treasuryAddress).spendBalance(\\n                countryId,\\n                spaceProgramCost\\n            ));\\n        } else if (wonderId == 3) {\\n            require(balance >= stockMarketCost, \\\"Insufficient balance\\\");\\n            bool existingWonder = idToWonders4[countryId].stockMarket;\\n            require(existingWonder == false, \\\"Already owned\\\");\\n            idToWonders4[countryId].stockMarket = true;\\n            WondersContract1(wonderContract1Address).addWonderCount(countryId);\\n            require(TreasuryContract(treasuryAddress).spendBalance(\\n                countryId,\\n                stockMarketCost\\n            ));\\n        } else if (wonderId == 4) {\\n            require(\\n                balance >= strategicDefenseInitiativeCost,\\n                \\\"Insufficient balance\\\"\\n            );\\n            bool existingWonder = idToWonders4[countryId]\\n                .strategicDefenseInitiative;\\n            require(existingWonder == false, \\\"Already owned\\\");\\n            uint256 missileDefenseCount = ImprovementsContract4(\\n                improvementsContract4Address\\n            ).getMissileDefenseCount(countryId);\\n            require(\\n                missileDefenseCount >= 3,\\n                \\\"Must own at least 3 missile defense improvements\\\"\\n            );\\n            uint256 satelliteCount = ImprovementsContract3(\\n                improvementsContract3Address\\n            ).getSatelliteCount(countryId);\\n            require(\\n                satelliteCount >= 3,\\n                \\\"Must own at least 3 satellite improvements\\\"\\n            );\\n            idToWonders4[countryId].strategicDefenseInitiative = true;\\n            WondersContract1(wonderContract1Address).addWonderCount(countryId);\\n            require(TreasuryContract(treasuryAddress).spendBalance(\\n                countryId,\\n                strategicDefenseInitiativeCost\\n            ));\\n        } else if (wonderId == 5) {\\n            require(\\n                balance >= superiorLogisticalSupportCost,\\n                \\\"Insufficient balance\\\"\\n            );\\n            bool existingWonder = idToWonders4[countryId]\\n                .superiorLogisticalSupport;\\n            require(existingWonder == false, \\\"Already owned\\\");\\n            bool isPentagon = WondersContract3(wonderContract3Address)\\n                .getPentagon(countryId);\\n            require(\\n                isPentagon == true,\\n                \\\"Pentagon required in order to purchase\\\"\\n            );\\n            idToWonders4[countryId].superiorLogisticalSupport = true;\\n            WondersContract1(wonderContract1Address).addWonderCount(countryId);\\n            require(TreasuryContract(treasuryAddress).spendBalance(\\n                countryId,\\n                superiorLogisticalSupportCost\\n            ));\\n        } else if (wonderId == 6) {\\n            require(balance >= universalHealthcareCost, \\\"Insufficient balance\\\");\\n            bool existingWonder = idToWonders4[countryId].universalHealthcare;\\n            require(existingWonder == false, \\\"Already owned\\\");\\n            uint256 infrastructureAmount = InfrastructureContract(\\n                infrastructureAddress\\n            ).getInfrastructureCount(countryId);\\n            require(\\n                infrastructureAmount >= 11000,\\n                \\\"Must have 11000 Infrastructure to purchase\\\"\\n            );\\n            uint256 hospitalAmount = ImprovementsContract2(\\n                improvementsContract2Address\\n            ).getHospitalCount(countryId);\\n            require(\\n                hospitalAmount > 0,\\n                \\\"Hospital improvement required to purchase\\\"\\n            );\\n            bool researchLab = WondersContract3(wonderContract3Address)\\n                .getNationalResearchLab(countryId);\\n            require(\\n                researchLab == true,\\n                \\\"National Research Lab required to Purchase\\\"\\n            );\\n            idToWonders4[countryId].universalHealthcare = true;\\n            WondersContract1(wonderContract1Address).addWonderCount(countryId);\\n            require(TreasuryContract(treasuryAddress).spendBalance(\\n                countryId,\\n                universalHealthcareCost\\n            ));\\n        } else {\\n            require(\\n                balance >= weaponsResearchCenterCost,\\n                \\\"Insufficient balance\\\"\\n            );\\n            bool existingWonder = idToWonders4[countryId].weaponsResearchCenter;\\n            require(existingWonder == false, \\\"Already owned\\\");\\n            bool isPentagon = WondersContract3(wonderContract3Address)\\n                .getPentagon(countryId);\\n            require(\\n                isPentagon == true,\\n                \\\"Pentagon required in order to purchase\\\"\\n            );\\n            bool researchLab = WondersContract3(wonderContract3Address)\\n                .getNationalResearchLab(countryId);\\n            require(\\n                researchLab == true,\\n                \\\"National Research Lab required to Purchase\\\"\\n            );\\n            uint256 infrastructureAmount = InfrastructureContract(\\n                infrastructureAddress\\n            ).getInfrastructureCount(countryId);\\n            require(\\n                infrastructureAmount >= 8500,\\n                \\\"Must have 8500 Infrastructure to purchase\\\"\\n            );\\n            uint256 techAmount = InfrastructureContract(infrastructureAddress)\\n                .getTechnologyCount(countryId);\\n            require(\\n                techAmount >= 2000,\\n                \\\"Must have 2000 Technology to purchase\\\"\\n            );\\n            idToWonders4[countryId].weaponsResearchCenter = true;\\n            WondersContract1(wonderContract1Address).addWonderCount(countryId);\\n            require(TreasuryContract(treasuryAddress).spendBalance(\\n                countryId,\\n                weaponsResearchCenterCost\\n            ));\\n        }\\n        emit Wonder4Purchased(countryId, wonderId);\\n    }\\n\\n    function deleteWonder4(uint256 countryId, uint256 wonderId) public nonReentrant {\\n        bool isOwner = mint.checkOwnership(countryId, msg.sender);\\n        require(isOwner, \\\"!nation owner\\\");\\n        require(wonderId <= 7, \\\"Invalid wonder ID\\\");\\n        if (wonderId == 1) {\\n            bool existingWonder = idToWonders4[countryId].socialSecuritySystem;\\n            require(existingWonder == true, \\\"No wonder to delete\\\");\\n            idToWonders4[countryId].socialSecuritySystem = false;\\n            WondersContract1(wonderContract1Address).subtractWonderCount(\\n                countryId\\n            );\\n        } else if (wonderId == 2) {\\n            bool existingWonder = idToWonders4[countryId].spaceProgram;\\n            require(existingWonder == true, \\\"No wonder to delete\\\");\\n            idToWonders4[countryId].spaceProgram = false;\\n            WondersContract1(wonderContract1Address).subtractWonderCount(\\n                countryId\\n            );\\n        } else if (wonderId == 3) {\\n            bool existingWonder = idToWonders4[countryId].stockMarket;\\n            require(existingWonder == true, \\\"No wonder to delete\\\");\\n            idToWonders4[countryId].stockMarket = false;\\n            WondersContract1(wonderContract1Address).subtractWonderCount(\\n                countryId\\n            );\\n        } else if (wonderId == 4) {\\n            bool existingWonder = idToWonders4[countryId]\\n                .strategicDefenseInitiative;\\n            require(existingWonder == true, \\\"No wonder to delete\\\");\\n            idToWonders4[countryId].strategicDefenseInitiative = false;\\n            WondersContract1(wonderContract1Address).subtractWonderCount(\\n                countryId\\n            );\\n        } else if (wonderId == 5) {\\n            bool existingWonder = idToWonders4[countryId]\\n                .superiorLogisticalSupport;\\n            require(existingWonder == true, \\\"No wonder to delete\\\");\\n            idToWonders4[countryId].superiorLogisticalSupport = false;\\n            WondersContract1(wonderContract1Address).subtractWonderCount(\\n                countryId\\n            );\\n        } else if (wonderId == 6) {\\n            bool existingWonder = idToWonders4[countryId].universalHealthcare;\\n            require(existingWonder == true, \\\"No wonder to delete\\\");\\n            idToWonders4[countryId].universalHealthcare = false;\\n            WondersContract1(wonderContract1Address).subtractWonderCount(\\n                countryId\\n            );\\n        } else {\\n            bool existingWonder = idToWonders4[countryId].weaponsResearchCenter;\\n            require(existingWonder == true, \\\"No wonder to delete\\\");\\n            idToWonders4[countryId].weaponsResearchCenter = false;\\n            WondersContract1(wonderContract1Address).subtractWonderCount(\\n                countryId\\n            );\\n        }\\n        emit Wonder4Deleted(countryId, wonderId);\\n    }\\n\\n    ///@dev this is a public view function that will return true if a nation has the social security system wonder\\n    ///@dev this function will return true if a nation has the social security system wonder\\n    ///@param countryId is the nation id of the nation being queried\\n    ///@return bool will be true if the nation has the wonder\\n    function getSocialSecuritySystem(\\n        uint256 countryId\\n    ) public view returns (bool) {\\n        return idToWonders4[countryId].socialSecuritySystem;\\n    }\\n\\n    ///@dev this is a public view function that will return true if a nation has the space program wonder\\n    ///@dev this function will return true if a nation has the space program wonder\\n    ///@param countryId is the nation id of the nation being queried\\n    ///@return bool will be true if the nation has the wonder\\n    function getSpaceProgram(uint256 countryId) public view returns (bool) {\\n        return idToWonders4[countryId].spaceProgram;\\n    }\\n\\n    ///@dev this is a public view function that will return true if a nation has the stock market wonder\\n    ///@dev this function will return true if a nation has the stock market wonder\\n    ///@param countryId is the nation id of the nation being queried\\n    ///@return bool will be true if the nation has the wonder\\n    function getStockMarket(uint256 countryId) public view returns (bool) {\\n        return idToWonders4[countryId].stockMarket;\\n    }\\n\\n    ///@dev this is a public view function that will return true if a nation has the strategic defense initiative wonder\\n    ///@dev this function will return true if a nation has the strategic defense initiative wonder\\n    ///@param countryId is the nation id of the nation being queried\\n    ///@return bool will be true if the nation has the wonder\\n    function getStrategicDefenseInitiative(\\n        uint256 countryId\\n    ) public view returns (bool) {\\n        return idToWonders4[countryId].strategicDefenseInitiative;\\n    }\\n\\n    ///@dev this is a public view function that will return true if a nation has the superior logistical support wonder\\n    ///@dev this function will return true if a nation has the superior logistical support wonder\\n    ///@param countryId is the nation id of the nation being queried\\n    ///@return bool will be true if the nation has the wonder\\n    function getSuperiorLogisticalSupport(\\n        uint256 countryId\\n    ) public view returns (bool) {\\n        return idToWonders4[countryId].superiorLogisticalSupport;\\n    }\\n\\n    ///@dev this is a public view function that will return true if a nation has the universal healthcare wonder\\n    ///@dev this function will return true if a nation has the universal healthcare wonder\\n    ///@param countryId is the nation id of the nation being queried\\n    ///@return bool will be true if the nation has the wonder\\n    function getUniversalHealthcare(\\n        uint256 countryId\\n    ) public view returns (bool) {\\n        return idToWonders4[countryId].universalHealthcare;\\n    }\\n\\n    ///@dev this is a public view function that will return true if a nation has the weapons research center wonder\\n    ///@dev this function will return true if a nation has the weapons research center wonder\\n    ///@param countryId is the nation id of the nation being queried\\n    ///@return bool will be true if the nation has the wonder\\n    function getWeaponsResearchCenter(\\n        uint256 countryId\\n    ) public view returns (bool) {\\n        return idToWonders4[countryId].weaponsResearchCenter;\\n    }\\n\\n    ///@dev this function will return the costs of the wonders in this contract\\n    function getWonderCosts4() public view returns(\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256,\\n        uint256\\n    ) {\\n        return (\\n            socialSecuritySystemCost,\\n            spaceProgramCost,\\n            stockMarketCost,\\n            strategicDefenseInitiativeCost,\\n            superiorLogisticalSupportCost,\\n            universalHealthcareCost,\\n            weaponsResearchCenterCost\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x1c89ec7ff840e4d8f87910662a2e311eac47551c1515a8f88aa53460b88b13a7\",\"license\":\"BUSL-1.1\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n}\\n\",\"keccak256\":\"0xf2560b5386574153057104d19a9e68a32ee912cf23c0c8df1fe9a0607f42d543\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052693f870857a3e0e38000006011556107d060125560c8601355693f870857a3e0e38000006014556109c460155560c8601655693f870857a3e0e38000006017556109c460185561012c6019556969e10de76676d0800000601a55610bb8601b5561015e601c553480156200007757600080fd5b50620000986200008c620000a560201b60201c565b620000ad60201b60201c565b6001808190555062000171565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61584c80620001816000396000f3fe608060405234801561001057600080fd5b50600436106103275760003560e01c80638da5cb5b116101b8578063c8488b3111610104578063e6402345116100a2578063f2fde38b1161007c578063f2fde38b14610928578063f7ddb70614610944578063facf6c2614610960578063fd5de0f01461097e57610327565b8063e6402345146108d0578063e7195be5146108ee578063f03906f51461090a57610327565b8063d674ce4e116100de578063d674ce4e14610858578063de0e3a7614610876578063df41b2b114610894578063e148def7146108b257610327565b8063c8488b3114610800578063c907e1311461081c578063d37d97341461083a57610327565b8063a5586d1611610171578063b8e255741161014b578063b8e2557414610752578063c4c06b1414610782578063c5c718cc146107b2578063c5f956af146107e257610327565b8063a5586d16146106fa578063aaf32f0814610718578063b1028acd1461073657610327565b80638da5cb5b1461062257806392aeb43e14610640578063992737d41461065e5780639bd565d61461068e5780639bfea292146106ac578063a13b94c8146106ca57610327565b8063491d8987116102775780635f0cb65d11610230578063789321b61161020a578063789321b6146105b057806379018cb9146105cc5780637d526cdf146105e8578063827b63b81461060657610327565b80635f0cb65d1461055457806363f720e014610588578063715018a6146105a657610327565b8063491d8987146104a85780634ceb0f9f146104c4578063541e8ffe146104e05780635530b26e146104fe57806356a302f21461051a5780635aeb18821461053857610327565b8063257af2fa116102e457806339de8f92116102be57806339de8f92146104345780633fa76e8f146104505780634255529c1461046c5780634458a0b91461048a57610327565b8063257af2fa146103dc57806325f9fc8b146103fa57806327d19a931461041657610327565b8063080c3f3e1461032c5780630c933e1b1461034a57806313e10dfd146103685780631a22315c1461038657806320071b9b146103a25780632476c895146103c0575b600080fd5b61033461099a565b6040516103419190614827565b60405180910390f35b6103526109c0565b60405161035f919061485b565b60405180910390f35b6103706109c6565b60405161037d9190614827565b60405180910390f35b6103a0600480360381019061039b91906148a7565b6109ec565b005b6103aa611173565b6040516103b79190614827565b60405180910390f35b6103da60048036038101906103d591906148e7565b611199565b005b6103e46111bb565b6040516103f1919061485b565b60405180910390f35b610414600480360381019061040f919061493a565b6111c1565b005b61041e61134a565b60405161042b9190614827565b60405180910390f35b61044e60048036038101906104499190614993565b611370565b005b61046a600480360381019061046591906148a7565b6117d5565b005b610474611970565b604051610481919061485b565b60405180910390f35b610492611976565b60405161049f9190614827565b60405180910390f35b6104c260048036038101906104bd91906148a7565b61199c565b005b6104de60048036038101906104d991906148a7565b612123565b005b6104e86122be565b6040516104f5919061485b565b60405180910390f35b610518600480360381019061051391906148a7565b6122c4565b005b610522612a4b565b60405161052f919061485b565b60405180910390f35b610552600480360381019061054d91906148a7565b612a51565b005b61056e6004803603810190610569919061493a565b612bec565b60405161057f959493929190614a8d565b60405180910390f35b610590612c2f565b60405161059d9190614827565b60405180910390f35b6105ae612c55565b005b6105ca60048036038101906105c591906148a7565b612c69565b005b6105e660048036038101906105e191906148e7565b6133f0565b005b6105f0613412565b6040516105fd919061485b565b60405180910390f35b610620600480360381019061061b9190614ae0565b613418565b005b61062a61362e565b6040516106379190614827565b60405180910390f35b610648613657565b6040516106559190614827565b60405180910390f35b6106786004803603810190610673919061493a565b61367d565b604051610685919061485b565b60405180910390f35b6106966136a2565b6040516106a39190614827565b60405180910390f35b6106b46136c8565b6040516106c19190614827565b60405180910390f35b6106e460048036038101906106df919061493a565b6136ee565b6040516106f1919061485b565b60405180910390f35b610702613a3e565b60405161070f9190614827565b60405180910390f35b610720613a64565b60405161072d919061485b565b60405180910390f35b610750600480360381019061074b91906148a7565b613a6a565b005b61076c6004803603810190610767919061493a565b613c05565b604051610779919061485b565b60405180910390f35b61079c6004803603810190610797919061493a565b613c2a565b6040516107a9919061485b565b60405180910390f35b6107cc60048036038101906107c7919061493a565b613c4f565b6040516107d9919061485b565b60405180910390f35b6107ea613c74565b6040516107f79190614827565b60405180910390f35b61081a600480360381019061081591906148e7565b613c9a565b005b610824613cbc565b6040516108319190614827565b60405180910390f35b610842613ce2565b60405161084f919061485b565b60405180910390f35b610860613ce8565b60405161086d919061485b565b60405180910390f35b61087e613cee565b60405161088b9190614827565b60405180910390f35b61089c613d14565b6040516108a9919061485b565b60405180910390f35b6108ba613d1a565b6040516108c79190614827565b60405180910390f35b6108d8613d40565b6040516108e5919061485b565b60405180910390f35b610908600480360381019061090391906148a7565b613d46565b005b610912614029565b60405161091f9190614827565b60405180910390f35b610942600480360381019061093d9190614b47565b61404f565b005b61095e600480360381019061095991906148e7565b6140d2565b005b6109686140f4565b604051610975919061485b565b60405180910390f35b6109986004803603810190610993919061493a565b6140fa565b005b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60175481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6109f4614644565b6000602460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166377ade19083336040518363ffffffff1660e01b8152600401610a53929190614b74565b602060405180830381865afa158015610a70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a949190614bc9565b905080610ad6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610acd90614c53565b60405180910390fd5b6000602560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a641eccb846040518263ffffffff1660e01b8152600401610b33919061485b565b6040805180830381865afa158015610b4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b739190614c88565b50905080841115610bb9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb090614d3a565b60405180910390fd5b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166398c172f7856040518263ffffffff1660e01b8152600401610c16919061485b565b602060405180830381865afa158015610c33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c579190614d5a565b90506000610c6485613c4f565b90506000602860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663897e9dd1876040518263ffffffff1660e01b8152600401610cc3919061485b565b602060405180830381865afa158015610ce0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d049190614d5a565b9050600060155482610d169190614de5565b90508084610d249190614e16565b8884610d309190614e16565b1115610d71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6890614ebc565b60405180910390fd5b601654602860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663221a528f896040518263ffffffff1660e01b8152600401610dcf919061485b565b602060405180830381865afa158015610dec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e109190614d5a565b1015610e51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4890614f28565b60405180910390fd5b600088601454610e619190614f48565b90506000602660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636e51890b8a6040518263ffffffff1660e01b8152600401610ec0919061485b565b602060405180830381865afa158015610edd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f019190614bc9565b90508015610f25576064605583610f189190614f48565b610f229190614de5565b91505b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637f2862868b6040518263ffffffff1660e01b8152600401610f82919061485b565b602060405180830381865afa158015610f9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc39190614d5a565b905082811015610fd257600080fd5b8a601d60008c81526020019081526020016000206002016000828254610ff89190614e16565b92505081905550602360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f21b1a658b8d6040518363ffffffff1660e01b815260040161105c929190614f8a565b600060405180830381600087803b15801561107657600080fd5b505af115801561108a573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635ff38ff18b856040518363ffffffff1660e01b81526004016110eb929190614f8a565b6020604051808303816000875af115801561110a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112e9190614bc9565b50828b8b7fe2a77ee3f5b580eb15ce2545307a6585e27b5a93e9a57375aa6b507a6714122b60405160405180910390a450505050505050505061116f614693565b5050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6111a161469c565b826011819055508160128190555080601381905550505050565b60165481565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611251576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124890615025565b60405180910390fd5b601d600082815260200190815260200160002060000160009054906101000a900460ff16156112b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ac906150b7565b60405180910390fd5b60006040518060a001604052806001151581526020016000815260200160008152602001600081526020016000815250905080601d600084815260200190815260200160002060008201518160000160006101000a81548160ff021916908315150217905550602082015181600101556040820151816002015560608201518160030155608082015181600401559050505050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61137861469c565b89600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555088600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086602060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085601e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084601f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083602160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082602260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081602360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080602560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050505050505050565b6000602460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166377ade19083336040518363ffffffff1660e01b8152600401611834929190614b74565b602060405180830381865afa158015611851573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118759190614bc9565b9050806118b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ae90614c53565b60405180910390fd5b601d600083815260200190815260200160002060010154831115611910576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190790615123565b60405180910390fd5b82601d600084815260200190815260200160002060010160008282546119369190615143565b9250508190555082827f445f3efd384d969fbe44d36da6d762530c1d1dd1228dbf18f7830aac20b7b26d60405160405180910390a3505050565b601c5481565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6119a4614644565b6000602460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166377ade19083336040518363ffffffff1660e01b8152600401611a03929190614b74565b602060405180830381865afa158015611a20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a449190614bc9565b905080611a86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a7d90614c53565b60405180910390fd5b6000602560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a641eccb846040518263ffffffff1660e01b8152600401611ae3919061485b565b6040805180830381865afa158015611aff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b239190614c88565b50905080841115611b69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b6090614d3a565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ddd528f0856040518263ffffffff1660e01b8152600401611bc6919061485b565b602060405180830381865afa158015611be3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c079190614d5a565b90506000611c1485613c05565b90506000602860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663897e9dd1876040518263ffffffff1660e01b8152600401611c73919061485b565b602060405180830381865afa158015611c90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb49190614d5a565b90506000601b5482611cc69190614de5565b90508084611cd49190614e16565b8884611ce09190614e16565b1115611d21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d18906151e9565b60405180910390fd5b601c54602860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663221a528f896040518263ffffffff1660e01b8152600401611d7f919061485b565b602060405180830381865afa158015611d9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc09190614d5a565b1015611e01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611df890614f28565b60405180910390fd5b600088601a54611e119190614f48565b90506000602660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636e51890b8a6040518263ffffffff1660e01b8152600401611e70919061485b565b602060405180830381865afa158015611e8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb19190614bc9565b90508015611ed5576064605583611ec89190614f48565b611ed29190614de5565b91505b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637f2862868b6040518263ffffffff1660e01b8152600401611f32919061485b565b602060405180830381865afa158015611f4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f739190614d5a565b905082811015611f8257600080fd5b8a601d60008c81526020019081526020016000206004016000828254611fa89190614e16565b92505081905550602360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f21b1a658b8d6040518363ffffffff1660e01b815260040161200c929190614f8a565b600060405180830381600087803b15801561202657600080fd5b505af115801561203a573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635ff38ff18b856040518363ffffffff1660e01b815260040161209b929190614f8a565b6020604051808303816000875af11580156120ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120de9190614bc9565b50828b8b7f5e5db48e7967308f37eb69ec7089505ee1aec9e3ca3406188ff7a0730d40509b60405160405180910390a450505050505050505061211f614693565b5050565b6000602460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166377ade19083336040518363ffffffff1660e01b8152600401612182929190614b74565b602060405180830381865afa15801561219f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c39190614bc9565b905080612205576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121fc90614c53565b60405180910390fd5b601d60008381526020019081526020016000206003015483111561225e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161225590615255565b60405180910390fd5b82601d600084815260200190815260200160002060030160008282546122849190615143565b9250508190555082827fb3f6b6c8276bb7d64f078eeb3789c89195e742b2259163b61ce1b29c6a14835460405160405180910390a3505050565b60185481565b6122cc614644565b6000602460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166377ade19083336040518363ffffffff1660e01b815260040161232b929190614b74565b602060405180830381865afa158015612348573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236c9190614bc9565b9050806123ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123a590614c53565b60405180910390fd5b6000602560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a641eccb846040518263ffffffff1660e01b815260040161240b919061485b565b6040805180830381865afa158015612427573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244b9190614c88565b50905080841115612491576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161248890614d3a565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ddd528f0856040518263ffffffff1660e01b81526004016124ee919061485b565b602060405180830381865afa15801561250b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061252f9190614d5a565b9050600061253c8561367d565b90506000602860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663897e9dd1876040518263ffffffff1660e01b815260040161259b919061485b565b602060405180830381865afa1580156125b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125dc9190614d5a565b90506000601854826125ee9190614de5565b905080846125fc9190614e16565b88846126089190614e16565b1115612649576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612640906151e9565b60405180910390fd5b601954602860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663221a528f896040518263ffffffff1660e01b81526004016126a7919061485b565b602060405180830381865afa1580156126c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e89190614d5a565b1015612729576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161272090614f28565b60405180910390fd5b6000886017546127399190614f48565b90506000602660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636e51890b8a6040518263ffffffff1660e01b8152600401612798919061485b565b602060405180830381865afa1580156127b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127d99190614bc9565b905080156127fd5760646055836127f09190614f48565b6127fa9190614de5565b91505b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637f2862868b6040518263ffffffff1660e01b815260040161285a919061485b565b602060405180830381865afa158015612877573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061289b9190614d5a565b9050828110156128aa57600080fd5b8a601d60008c815260200190815260200160002060030160008282546128d09190614e16565b92505081905550602360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f21b1a658b8d6040518363ffffffff1660e01b8152600401612934929190614f8a565b600060405180830381600087803b15801561294e57600080fd5b505af1158015612962573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635ff38ff18b856040518363ffffffff1660e01b81526004016129c3929190614f8a565b6020604051808303816000875af11580156129e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a069190614bc9565b50828b8b7f9227c3524bb9532bc8ed74e27aa464c58a720ab16e254278e8a7b0be674a6e3960405160405180910390a4505050505050505050612a47614693565b5050565b60155481565b6000602460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166377ade19083336040518363ffffffff1660e01b8152600401612ab0929190614b74565b602060405180830381865afa158015612acd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612af19190614bc9565b905080612b33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b2a90614c53565b60405180910390fd5b601d600083815260200190815260200160002060040154831115612b8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b83906152c1565b60405180910390fd5b82601d60008481526020019081526020016000206004016000828254612bb29190615143565b9250508190555082827fd55b1dcca4ca6ac5995fef8259ccf29badf45b844fe91d69f87e94deb62f4b3d60405160405180910390a3505050565b601d6020528060005260406000206000915090508060000160009054906101000a900460ff16908060010154908060020154908060030154908060040154905085565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b612c5d61469c565b612c67600061471a565b565b612c71614644565b6000602460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166377ade19083336040518363ffffffff1660e01b8152600401612cd0929190614b74565b602060405180830381865afa158015612ced573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d119190614bc9565b905080612d53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d4a90614c53565b60405180910390fd5b6000602560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a641eccb846040518263ffffffff1660e01b8152600401612db0919061485b565b6040805180830381865afa158015612dcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612df09190614c88565b50905080841115612e36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e2d90614d3a565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ddd528f0856040518263ffffffff1660e01b8152600401612e93919061485b565b602060405180830381865afa158015612eb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ed49190614d5a565b90506000612ee185613c2a565b90506000602860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663897e9dd1876040518263ffffffff1660e01b8152600401612f40919061485b565b602060405180830381865afa158015612f5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f819190614d5a565b9050600060125482612f939190614de5565b90508084612fa19190614e16565b8884612fad9190614e16565b1115612fee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fe5906151e9565b60405180910390fd5b601354602860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663221a528f896040518263ffffffff1660e01b815260040161304c919061485b565b602060405180830381865afa158015613069573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061308d9190614d5a565b10156130ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130c590614f28565b60405180910390fd5b6000886011546130de9190614f48565b90506000602660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636e51890b8a6040518263ffffffff1660e01b815260040161313d919061485b565b602060405180830381865afa15801561315a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061317e9190614bc9565b905080156131a25760646055836131959190614f48565b61319f9190614de5565b91505b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637f2862868b6040518263ffffffff1660e01b81526004016131ff919061485b565b602060405180830381865afa15801561321c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132409190614d5a565b90508281101561324f57600080fd5b8a601d60008c815260200190815260200160002060010160008282546132759190614e16565b92505081905550602360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f21b1a658b8d6040518363ffffffff1660e01b81526004016132d9929190614f8a565b600060405180830381600087803b1580156132f357600080fd5b505af1158015613307573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635ff38ff18b856040518363ffffffff1660e01b8152600401613368929190614f8a565b6020604051808303816000875af1158015613387573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133ab9190614bc9565b50828b8b7f5488d2eff2950abaf26b9aa6844e42a3a4da19a7165290c615a6fec565f0386e60405160405180910390a45050505050505050506133ec614693565b5050565b6133f861469c565b826017819055508160188190555080601981905550505050565b60135481565b61342061469c565b83600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083602460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082602660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081602760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080601060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080602860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080601d600084815260200190815260200160002060030154905080915050919050565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080601d60008481526020019081526020016000206001015490506000601d60008581526020019081526020016000206002015490506000601d60008681526020019081526020016000206003015490506000601d60008781526020019081526020016000206004015490506000602760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354f5a034886040518263ffffffff1660e01b81526004016137b8919061485b565b602060405180830381865afa1580156137d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137f99190614d5a565b90506000602760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631cb8d2cf896040518263ffffffff1660e01b8152600401613858919061485b565b602060405180830381865afa158015613875573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138999190614d5a565b90506000602760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663baa5f9668a6040518263ffffffff1660e01b81526004016138f8919061485b565b602060405180830381865afa158015613915573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139399190614d5a565b90506000602760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d13abd7d8b6040518263ffffffff1660e01b8152600401613998919061485b565b602060405180830381865afa1580156139b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139d99190614d5a565b9050600081838587898b8d8f6139ef9190614e16565b6139f99190614e16565b613a039190614e16565b613a0d9190614e16565b613a179190614e16565b613a219190614e16565b613a2b9190614e16565b9050809950505050505050505050919050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60195481565b6000602460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166377ade19083336040518363ffffffff1660e01b8152600401613ac9929190614b74565b602060405180830381865afa158015613ae6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b0a9190614bc9565b905080613b4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b4390614c53565b60405180910390fd5b601d600083815260200190815260200160002060020154831115613ba5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b9c9061532d565b60405180910390fd5b82601d60008481526020019081526020016000206002016000828254613bcb9190615143565b9250508190555082827fea3d38920c424e21749588b84ce0e4f0090a37f547efb9ea47f4235e8f0e2a8c60405160405180910390a3505050565b600080601d600084815260200190815260200160002060040154905080915050919050565b600080601d600084815260200190815260200160002060010154905080915050919050565b600080601d600084815260200190815260200160002060020154905080915050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b613ca261469c565b826014819055508160158190555080601681905550505050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60125481565b601a5481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60145481565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601b5481565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614613dd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613dcd906153bf565b60405180910390fd5b60018103613e6a576000601d60008481526020019081526020016000206001015411613e37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613e2e9061542b565b60405180910390fd5b6001601d60008481526020019081526020016000206001016000828254613e5e9190615143565b92505081905550614025565b60028103613efe576000601d60008481526020019081526020016000206002015411613ecb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613ec290615497565b60405180910390fd5b6001601d60008481526020019081526020016000206002016000828254613ef29190615143565b92505081905550614024565b60038103613f92576000601d60008481526020019081526020016000206003015411613f5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613f5690615503565b60405180910390fd5b6001601d60008481526020019081526020016000206003016000828254613f869190615143565b92505081905550614023565b60048103614022576000601d60008481526020019081526020016000206004015411613ff3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613fea9061556f565b60405180910390fd5b6001601d6000848152602001908152602001600020600401600082825461401a9190615143565b925050819055505b5b5b5b5050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61405761469c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036140c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016140bd90615601565b60405180910390fd5b6140cf8161471a565b50565b6140da61469c565b82601a8190555081601b8190555080601c81905550505050565b60115481565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461418a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016141819061566d565b60405180910390fd5b600060289050602260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b9334f0836040518263ffffffff1660e01b81526004016141eb919061485b565b602060405180830381865afa158015614208573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061422c9190614bc9565b1561423657601490505b6000601d60008481526020019081526020016000209050600060648383600101546142619190614f48565b61426b9190614de5565b9050600060648484600201546142819190614f48565b61428b9190614de5565b9050600060648585600401546142a19190614f48565b6142ab9190614de5565b90506000602760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354f5a034886040518263ffffffff1660e01b815260040161430a919061485b565b602060405180830381865afa158015614327573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061434b9190614d5a565b905060006064878361435d9190614f48565b6143679190614de5565b905085600101548511156143b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016143a790615123565b60405180910390fd5b85600201548411156143f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016143ee9061532d565b60405180910390fd5b856004015483111561443e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401614435906152c1565b60405180910390fd5b602760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354f5a034896040518263ffffffff1660e01b8152600401614499919061485b565b602060405180830381865afa1580156144b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144da9190614d5a565b81111561451c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401614513906156d9565b60405180910390fd5b848660010160008282546145309190615143565b925050819055508386600201600082825461454b9190615143565b92505081905550828660040160008282546145669190615143565b92505081905550602760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166346cea39189836040518363ffffffff1660e01b81526004016145ca929190614f8a565b600060405180830381600087803b1580156145e457600080fd5b505af11580156145f8573d6000803e3d6000fd5b50505050877fcca52be669a69b267b78451892a3092ae8af8ffe8ce3ba4ba0b5dd1890dea86d8686868560405161463294939291906156f9565b60405180910390a25050505050505050565b600260015403614689576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016146809061578a565b60405180910390fd5b6002600181905550565b60018081905550565b6146a46147de565b73ffffffffffffffffffffffffffffffffffffffff166146c261362e565b73ffffffffffffffffffffffffffffffffffffffff1614614718576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161470f906157f6565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000614811826147e6565b9050919050565b61482181614806565b82525050565b600060208201905061483c6000830184614818565b92915050565b6000819050919050565b61485581614842565b82525050565b6000602082019050614870600083018461484c565b92915050565b600080fd5b61488481614842565b811461488f57600080fd5b50565b6000813590506148a18161487b565b92915050565b600080604083850312156148be576148bd614876565b5b60006148cc85828601614892565b92505060206148dd85828601614892565b9150509250929050565b600080600060608486031215614900576148ff614876565b5b600061490e86828701614892565b935050602061491f86828701614892565b925050604061493086828701614892565b9150509250925092565b6000602082840312156149505761494f614876565b5b600061495e84828501614892565b91505092915050565b61497081614806565b811461497b57600080fd5b50565b60008135905061498d81614967565b92915050565b6000806000806000806000806000806101408b8d0312156149b7576149b6614876565b5b60006149c58d828e0161497e565b9a505060206149d68d828e0161497e565b99505060406149e78d828e0161497e565b98505060606149f88d828e0161497e565b9750506080614a098d828e0161497e565b96505060a0614a1a8d828e0161497e565b95505060c0614a2b8d828e0161497e565b94505060e0614a3c8d828e0161497e565b935050610100614a4e8d828e0161497e565b925050610120614a608d828e0161497e565b9150509295989b9194979a5092959850565b60008115159050919050565b614a8781614a72565b82525050565b600060a082019050614aa26000830188614a7e565b614aaf602083018761484c565b614abc604083018661484c565b614ac9606083018561484c565b614ad6608083018461484c565b9695505050505050565b60008060008060808587031215614afa57614af9614876565b5b6000614b088782880161497e565b9450506020614b198782880161497e565b9350506040614b2a8782880161497e565b9250506060614b3b8782880161497e565b91505092959194509250565b600060208284031215614b5d57614b5c614876565b5b6000614b6b8482850161497e565b91505092915050565b6000604082019050614b89600083018561484c565b614b966020830184614818565b9392505050565b614ba681614a72565b8114614bb157600080fd5b50565b600081519050614bc381614b9d565b92915050565b600060208284031215614bdf57614bde614876565b5b6000614bed84828501614bb4565b91505092915050565b600082825260208201905092915050565b7f216e6174696f6e206f776e657200000000000000000000000000000000000000600082015250565b6000614c3d600d83614bf6565b9150614c4882614c07565b602082019050919050565b60006020820190508181036000830152614c6c81614c30565b9050919050565b600081519050614c828161487b565b92915050565b60008060408385031215614c9f57614c9e614876565b5b6000614cad85828601614c73565b9250506020614cbe85828601614c73565b9150509250929050565b7f70757263686173652065786365656473206461696c792070757263686173652060008201527f6c696d6974000000000000000000000000000000000000000000000000000000602082015250565b6000614d24602583614bf6565b9150614d2f82614cc8565b604082019050919050565b60006020820190508181036000830152614d5381614d17565b9050919050565b600060208284031215614d7057614d6f614876565b5b6000614d7e84828501614c73565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614df082614842565b9150614dfb83614842565b925082614e0b57614e0a614d87565b5b828204905092915050565b6000614e2182614842565b9150614e2c83614842565b9250828201905080821115614e4457614e43614db6565b5b92915050565b7f6e656564206d6f726520736869707961726473206f7220696e6672617374727560008201527f6374757265000000000000000000000000000000000000000000000000000000602082015250565b6000614ea6602583614bf6565b9150614eb182614e4a565b604082019050919050565b60006020820190508181036000830152614ed581614e99565b9050919050565b7f6e656564206d6f726520746563686e6f6c6f6779000000000000000000000000600082015250565b6000614f12601483614bf6565b9150614f1d82614edc565b602082019050919050565b60006020820190508181036000830152614f4181614f05565b9050919050565b6000614f5382614842565b9150614f5e83614842565b9250828202614f6c81614842565b91508282048414831517614f8357614f82614db6565b5b5092915050565b6000604082019050614f9f600083018561484c565b614fac602083018461484c565b9392505050565b7f66756e6374696f6e206f6e6c792063616c6c61626c652066726f6d20636f756e60008201527f7472794d696e7465720000000000000000000000000000000000000000000000602082015250565b600061500f602983614bf6565b915061501a82614fb3565b604082019050919050565b6000602082019050818103600083015261503e81615002565b9050919050565b7f6e61767920616c726561647920696e697469616c697a656420666f722074686960008201527f73206e6174696f6e000000000000000000000000000000000000000000000000602082015250565b60006150a1602883614bf6565b91506150ac82615045565b604082019050919050565b600060208201905081810360008301526150d081615094565b9050919050565b7f6e6f7420656e6f75676820636f72766574746573000000000000000000000000600082015250565b600061510d601483614bf6565b9150615118826150d7565b602082019050919050565b6000602082019050818103600083015261513c81615100565b9050919050565b600061514e82614842565b915061515983614842565b925082820390508181111561517157615170614db6565b5b92915050565b7f6e656564206d6f726520647279646f636b73206f7220696e667261737472756360008201527f7475726500000000000000000000000000000000000000000000000000000000602082015250565b60006151d3602483614bf6565b91506151de82615177565b604082019050919050565b60006020820190508181036000830152615202816151c6565b9050919050565b7f6e6f7420656e6f75676820626174746c65736869707300000000000000000000600082015250565b600061523f601683614bf6565b915061524a82615209565b602082019050919050565b6000602082019050818103600083015261526e81615232565b9050919050565b7f6e6f7420656e6f75676820637275697365727300000000000000000000000000600082015250565b60006152ab601383614bf6565b91506152b682615275565b602082019050919050565b600060208201905081810360008301526152da8161529e565b9050919050565b7f6e6f7420656e6f756768206c616e64696e672073686970730000000000000000600082015250565b6000615317601883614bf6565b9150615322826152e1565b602082019050919050565b600060208201905081810360008301526153468161530a565b9050919050565b7f66756e6374696f6e206f6e6c792063616c6c61626c652066726f6d206164646960008201527f74696f6e616c206e61767920636f6e7472616374000000000000000000000000602082015250565b60006153a9603483614bf6565b91506153b48261534d565b604082019050919050565b600060208201905081810360008301526153d88161539c565b9050919050565b7f756e646572666c6f773a20636f72766574746500000000000000000000000000600082015250565b6000615415601383614bf6565b9150615420826153df565b602082019050919050565b6000602082019050818103600083015261544481615408565b9050919050565b7f756e646572666c6f773a206c616e64696e672073686970000000000000000000600082015250565b6000615481601783614bf6565b915061548c8261544b565b602082019050919050565b600060208201905081810360008301526154b081615474565b9050919050565b7f756e646572666c6f773a20626174746c65736869700000000000000000000000600082015250565b60006154ed601583614bf6565b91506154f8826154b7565b602082019050919050565b6000602082019050818103600083015261551c816154e0565b9050919050565b7f756e646572666c6f773a20637275697365720000000000000000000000000000600082015250565b6000615559601283614bf6565b915061556482615523565b602082019050919050565b600060208201905081810360008301526155888161554c565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006155eb602683614bf6565b91506155f68261558f565b604082019050919050565b6000602082019050818103600083015261561a816155de565b9050919050565b7f6f6e6c792063616c6c61626c652066726f6d206e756b6520636f6e7472616374600082015250565b6000615657602083614bf6565b915061566282615621565b602082019050919050565b600060208201905081810360008301526156868161564a565b9050919050565b7f6e6f7420656e6f75676820667269676174657300000000000000000000000000600082015250565b60006156c3601383614bf6565b91506156ce8261568d565b602082019050919050565b600060208201905081810360008301526156f2816156b6565b9050919050565b600060808201905061570e600083018761484c565b61571b602083018661484c565b615728604083018561484c565b615735606083018461484c565b95945050505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000615774601f83614bf6565b915061577f8261573e565b602082019050919050565b600060208201905081810360008301526157a381615767565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006157e0602083614bf6565b91506157eb826157aa565b602082019050919050565b6000602082019050818103600083015261580f816157d3565b905091905056fea26469706673582212202193161ba1d4cd98ab2e7258478ba4fa10809dde8745f08842585c7ebc8a770764736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103275760003560e01c80638da5cb5b116101b8578063c8488b3111610104578063e6402345116100a2578063f2fde38b1161007c578063f2fde38b14610928578063f7ddb70614610944578063facf6c2614610960578063fd5de0f01461097e57610327565b8063e6402345146108d0578063e7195be5146108ee578063f03906f51461090a57610327565b8063d674ce4e116100de578063d674ce4e14610858578063de0e3a7614610876578063df41b2b114610894578063e148def7146108b257610327565b8063c8488b3114610800578063c907e1311461081c578063d37d97341461083a57610327565b8063a5586d1611610171578063b8e255741161014b578063b8e2557414610752578063c4c06b1414610782578063c5c718cc146107b2578063c5f956af146107e257610327565b8063a5586d16146106fa578063aaf32f0814610718578063b1028acd1461073657610327565b80638da5cb5b1461062257806392aeb43e14610640578063992737d41461065e5780639bd565d61461068e5780639bfea292146106ac578063a13b94c8146106ca57610327565b8063491d8987116102775780635f0cb65d11610230578063789321b61161020a578063789321b6146105b057806379018cb9146105cc5780637d526cdf146105e8578063827b63b81461060657610327565b80635f0cb65d1461055457806363f720e014610588578063715018a6146105a657610327565b8063491d8987146104a85780634ceb0f9f146104c4578063541e8ffe146104e05780635530b26e146104fe57806356a302f21461051a5780635aeb18821461053857610327565b8063257af2fa116102e457806339de8f92116102be57806339de8f92146104345780633fa76e8f146104505780634255529c1461046c5780634458a0b91461048a57610327565b8063257af2fa146103dc57806325f9fc8b146103fa57806327d19a931461041657610327565b8063080c3f3e1461032c5780630c933e1b1461034a57806313e10dfd146103685780631a22315c1461038657806320071b9b146103a25780632476c895146103c0575b600080fd5b61033461099a565b6040516103419190614827565b60405180910390f35b6103526109c0565b60405161035f919061485b565b60405180910390f35b6103706109c6565b60405161037d9190614827565b60405180910390f35b6103a0600480360381019061039b91906148a7565b6109ec565b005b6103aa611173565b6040516103b79190614827565b60405180910390f35b6103da60048036038101906103d591906148e7565b611199565b005b6103e46111bb565b6040516103f1919061485b565b60405180910390f35b610414600480360381019061040f919061493a565b6111c1565b005b61041e61134a565b60405161042b9190614827565b60405180910390f35b61044e60048036038101906104499190614993565b611370565b005b61046a600480360381019061046591906148a7565b6117d5565b005b610474611970565b604051610481919061485b565b60405180910390f35b610492611976565b60405161049f9190614827565b60405180910390f35b6104c260048036038101906104bd91906148a7565b61199c565b005b6104de60048036038101906104d991906148a7565b612123565b005b6104e86122be565b6040516104f5919061485b565b60405180910390f35b610518600480360381019061051391906148a7565b6122c4565b005b610522612a4b565b60405161052f919061485b565b60405180910390f35b610552600480360381019061054d91906148a7565b612a51565b005b61056e6004803603810190610569919061493a565b612bec565b60405161057f959493929190614a8d565b60405180910390f35b610590612c2f565b60405161059d9190614827565b60405180910390f35b6105ae612c55565b005b6105ca60048036038101906105c591906148a7565b612c69565b005b6105e660048036038101906105e191906148e7565b6133f0565b005b6105f0613412565b6040516105fd919061485b565b60405180910390f35b610620600480360381019061061b9190614ae0565b613418565b005b61062a61362e565b6040516106379190614827565b60405180910390f35b610648613657565b6040516106559190614827565b60405180910390f35b6106786004803603810190610673919061493a565b61367d565b604051610685919061485b565b60405180910390f35b6106966136a2565b6040516106a39190614827565b60405180910390f35b6106b46136c8565b6040516106c19190614827565b60405180910390f35b6106e460048036038101906106df919061493a565b6136ee565b6040516106f1919061485b565b60405180910390f35b610702613a3e565b60405161070f9190614827565b60405180910390f35b610720613a64565b60405161072d919061485b565b60405180910390f35b610750600480360381019061074b91906148a7565b613a6a565b005b61076c6004803603810190610767919061493a565b613c05565b604051610779919061485b565b60405180910390f35b61079c6004803603810190610797919061493a565b613c2a565b6040516107a9919061485b565b60405180910390f35b6107cc60048036038101906107c7919061493a565b613c4f565b6040516107d9919061485b565b60405180910390f35b6107ea613c74565b6040516107f79190614827565b60405180910390f35b61081a600480360381019061081591906148e7565b613c9a565b005b610824613cbc565b6040516108319190614827565b60405180910390f35b610842613ce2565b60405161084f919061485b565b60405180910390f35b610860613ce8565b60405161086d919061485b565b60405180910390f35b61087e613cee565b60405161088b9190614827565b60405180910390f35b61089c613d14565b6040516108a9919061485b565b60405180910390f35b6108ba613d1a565b6040516108c79190614827565b60405180910390f35b6108d8613d40565b6040516108e5919061485b565b60405180910390f35b610908600480360381019061090391906148a7565b613d46565b005b610912614029565b60405161091f9190614827565b60405180910390f35b610942600480360381019061093d9190614b47565b61404f565b005b61095e600480360381019061095991906148e7565b6140d2565b005b6109686140f4565b604051610975919061485b565b60405180910390f35b6109986004803603810190610993919061493a565b6140fa565b005b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60175481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6109f4614644565b6000602460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166377ade19083336040518363ffffffff1660e01b8152600401610a53929190614b74565b602060405180830381865afa158015610a70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a949190614bc9565b905080610ad6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610acd90614c53565b60405180910390fd5b6000602560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a641eccb846040518263ffffffff1660e01b8152600401610b33919061485b565b6040805180830381865afa158015610b4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b739190614c88565b50905080841115610bb9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb090614d3a565b60405180910390fd5b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166398c172f7856040518263ffffffff1660e01b8152600401610c16919061485b565b602060405180830381865afa158015610c33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c579190614d5a565b90506000610c6485613c4f565b90506000602860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663897e9dd1876040518263ffffffff1660e01b8152600401610cc3919061485b565b602060405180830381865afa158015610ce0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d049190614d5a565b9050600060155482610d169190614de5565b90508084610d249190614e16565b8884610d309190614e16565b1115610d71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6890614ebc565b60405180910390fd5b601654602860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663221a528f896040518263ffffffff1660e01b8152600401610dcf919061485b565b602060405180830381865afa158015610dec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e109190614d5a565b1015610e51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4890614f28565b60405180910390fd5b600088601454610e619190614f48565b90506000602660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636e51890b8a6040518263ffffffff1660e01b8152600401610ec0919061485b565b602060405180830381865afa158015610edd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f019190614bc9565b90508015610f25576064605583610f189190614f48565b610f229190614de5565b91505b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637f2862868b6040518263ffffffff1660e01b8152600401610f82919061485b565b602060405180830381865afa158015610f9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc39190614d5a565b905082811015610fd257600080fd5b8a601d60008c81526020019081526020016000206002016000828254610ff89190614e16565b92505081905550602360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f21b1a658b8d6040518363ffffffff1660e01b815260040161105c929190614f8a565b600060405180830381600087803b15801561107657600080fd5b505af115801561108a573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635ff38ff18b856040518363ffffffff1660e01b81526004016110eb929190614f8a565b6020604051808303816000875af115801561110a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112e9190614bc9565b50828b8b7fe2a77ee3f5b580eb15ce2545307a6585e27b5a93e9a57375aa6b507a6714122b60405160405180910390a450505050505050505061116f614693565b5050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6111a161469c565b826011819055508160128190555080601381905550505050565b60165481565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611251576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124890615025565b60405180910390fd5b601d600082815260200190815260200160002060000160009054906101000a900460ff16156112b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ac906150b7565b60405180910390fd5b60006040518060a001604052806001151581526020016000815260200160008152602001600081526020016000815250905080601d600084815260200190815260200160002060008201518160000160006101000a81548160ff021916908315150217905550602082015181600101556040820151816002015560608201518160030155608082015181600401559050505050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61137861469c565b89600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555088600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086602060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085601e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084601f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083602160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082602260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081602360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080602560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050505050505050565b6000602460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166377ade19083336040518363ffffffff1660e01b8152600401611834929190614b74565b602060405180830381865afa158015611851573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118759190614bc9565b9050806118b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ae90614c53565b60405180910390fd5b601d600083815260200190815260200160002060010154831115611910576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190790615123565b60405180910390fd5b82601d600084815260200190815260200160002060010160008282546119369190615143565b9250508190555082827f445f3efd384d969fbe44d36da6d762530c1d1dd1228dbf18f7830aac20b7b26d60405160405180910390a3505050565b601c5481565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6119a4614644565b6000602460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166377ade19083336040518363ffffffff1660e01b8152600401611a03929190614b74565b602060405180830381865afa158015611a20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a449190614bc9565b905080611a86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a7d90614c53565b60405180910390fd5b6000602560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a641eccb846040518263ffffffff1660e01b8152600401611ae3919061485b565b6040805180830381865afa158015611aff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b239190614c88565b50905080841115611b69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b6090614d3a565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ddd528f0856040518263ffffffff1660e01b8152600401611bc6919061485b565b602060405180830381865afa158015611be3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c079190614d5a565b90506000611c1485613c05565b90506000602860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663897e9dd1876040518263ffffffff1660e01b8152600401611c73919061485b565b602060405180830381865afa158015611c90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb49190614d5a565b90506000601b5482611cc69190614de5565b90508084611cd49190614e16565b8884611ce09190614e16565b1115611d21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d18906151e9565b60405180910390fd5b601c54602860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663221a528f896040518263ffffffff1660e01b8152600401611d7f919061485b565b602060405180830381865afa158015611d9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc09190614d5a565b1015611e01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611df890614f28565b60405180910390fd5b600088601a54611e119190614f48565b90506000602660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636e51890b8a6040518263ffffffff1660e01b8152600401611e70919061485b565b602060405180830381865afa158015611e8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb19190614bc9565b90508015611ed5576064605583611ec89190614f48565b611ed29190614de5565b91505b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637f2862868b6040518263ffffffff1660e01b8152600401611f32919061485b565b602060405180830381865afa158015611f4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f739190614d5a565b905082811015611f8257600080fd5b8a601d60008c81526020019081526020016000206004016000828254611fa89190614e16565b92505081905550602360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f21b1a658b8d6040518363ffffffff1660e01b815260040161200c929190614f8a565b600060405180830381600087803b15801561202657600080fd5b505af115801561203a573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635ff38ff18b856040518363ffffffff1660e01b815260040161209b929190614f8a565b6020604051808303816000875af11580156120ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120de9190614bc9565b50828b8b7f5e5db48e7967308f37eb69ec7089505ee1aec9e3ca3406188ff7a0730d40509b60405160405180910390a450505050505050505061211f614693565b5050565b6000602460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166377ade19083336040518363ffffffff1660e01b8152600401612182929190614b74565b602060405180830381865afa15801561219f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c39190614bc9565b905080612205576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121fc90614c53565b60405180910390fd5b601d60008381526020019081526020016000206003015483111561225e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161225590615255565b60405180910390fd5b82601d600084815260200190815260200160002060030160008282546122849190615143565b9250508190555082827fb3f6b6c8276bb7d64f078eeb3789c89195e742b2259163b61ce1b29c6a14835460405160405180910390a3505050565b60185481565b6122cc614644565b6000602460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166377ade19083336040518363ffffffff1660e01b815260040161232b929190614b74565b602060405180830381865afa158015612348573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236c9190614bc9565b9050806123ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123a590614c53565b60405180910390fd5b6000602560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a641eccb846040518263ffffffff1660e01b815260040161240b919061485b565b6040805180830381865afa158015612427573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244b9190614c88565b50905080841115612491576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161248890614d3a565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ddd528f0856040518263ffffffff1660e01b81526004016124ee919061485b565b602060405180830381865afa15801561250b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061252f9190614d5a565b9050600061253c8561367d565b90506000602860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663897e9dd1876040518263ffffffff1660e01b815260040161259b919061485b565b602060405180830381865afa1580156125b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125dc9190614d5a565b90506000601854826125ee9190614de5565b905080846125fc9190614e16565b88846126089190614e16565b1115612649576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612640906151e9565b60405180910390fd5b601954602860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663221a528f896040518263ffffffff1660e01b81526004016126a7919061485b565b602060405180830381865afa1580156126c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e89190614d5a565b1015612729576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161272090614f28565b60405180910390fd5b6000886017546127399190614f48565b90506000602660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636e51890b8a6040518263ffffffff1660e01b8152600401612798919061485b565b602060405180830381865afa1580156127b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127d99190614bc9565b905080156127fd5760646055836127f09190614f48565b6127fa9190614de5565b91505b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637f2862868b6040518263ffffffff1660e01b815260040161285a919061485b565b602060405180830381865afa158015612877573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061289b9190614d5a565b9050828110156128aa57600080fd5b8a601d60008c815260200190815260200160002060030160008282546128d09190614e16565b92505081905550602360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f21b1a658b8d6040518363ffffffff1660e01b8152600401612934929190614f8a565b600060405180830381600087803b15801561294e57600080fd5b505af1158015612962573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635ff38ff18b856040518363ffffffff1660e01b81526004016129c3929190614f8a565b6020604051808303816000875af11580156129e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a069190614bc9565b50828b8b7f9227c3524bb9532bc8ed74e27aa464c58a720ab16e254278e8a7b0be674a6e3960405160405180910390a4505050505050505050612a47614693565b5050565b60155481565b6000602460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166377ade19083336040518363ffffffff1660e01b8152600401612ab0929190614b74565b602060405180830381865afa158015612acd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612af19190614bc9565b905080612b33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b2a90614c53565b60405180910390fd5b601d600083815260200190815260200160002060040154831115612b8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b83906152c1565b60405180910390fd5b82601d60008481526020019081526020016000206004016000828254612bb29190615143565b9250508190555082827fd55b1dcca4ca6ac5995fef8259ccf29badf45b844fe91d69f87e94deb62f4b3d60405160405180910390a3505050565b601d6020528060005260406000206000915090508060000160009054906101000a900460ff16908060010154908060020154908060030154908060040154905085565b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b612c5d61469c565b612c67600061471a565b565b612c71614644565b6000602460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166377ade19083336040518363ffffffff1660e01b8152600401612cd0929190614b74565b602060405180830381865afa158015612ced573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d119190614bc9565b905080612d53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d4a90614c53565b60405180910390fd5b6000602560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a641eccb846040518263ffffffff1660e01b8152600401612db0919061485b565b6040805180830381865afa158015612dcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612df09190614c88565b50905080841115612e36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e2d90614d3a565b60405180910390fd5b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ddd528f0856040518263ffffffff1660e01b8152600401612e93919061485b565b602060405180830381865afa158015612eb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ed49190614d5a565b90506000612ee185613c2a565b90506000602860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663897e9dd1876040518263ffffffff1660e01b8152600401612f40919061485b565b602060405180830381865afa158015612f5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f819190614d5a565b9050600060125482612f939190614de5565b90508084612fa19190614e16565b8884612fad9190614e16565b1115612fee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fe5906151e9565b60405180910390fd5b601354602860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663221a528f896040518263ffffffff1660e01b815260040161304c919061485b565b602060405180830381865afa158015613069573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061308d9190614d5a565b10156130ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130c590614f28565b60405180910390fd5b6000886011546130de9190614f48565b90506000602660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636e51890b8a6040518263ffffffff1660e01b815260040161313d919061485b565b602060405180830381865afa15801561315a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061317e9190614bc9565b905080156131a25760646055836131959190614f48565b61319f9190614de5565b91505b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637f2862868b6040518263ffffffff1660e01b81526004016131ff919061485b565b602060405180830381865afa15801561321c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132409190614d5a565b90508281101561324f57600080fd5b8a601d60008c815260200190815260200160002060010160008282546132759190614e16565b92505081905550602360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f21b1a658b8d6040518363ffffffff1660e01b81526004016132d9929190614f8a565b600060405180830381600087803b1580156132f357600080fd5b505af1158015613307573d6000803e3d6000fd5b50505050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635ff38ff18b856040518363ffffffff1660e01b8152600401613368929190614f8a565b6020604051808303816000875af1158015613387573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133ab9190614bc9565b50828b8b7f5488d2eff2950abaf26b9aa6844e42a3a4da19a7165290c615a6fec565f0386e60405160405180910390a45050505050505050506133ec614693565b5050565b6133f861469c565b826017819055508160188190555080601981905550505050565b60135481565b61342061469c565b83600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083602460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082602660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081602760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080601060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080602860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080601d600084815260200190815260200160002060030154905080915050919050565b601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080601d60008481526020019081526020016000206001015490506000601d60008581526020019081526020016000206002015490506000601d60008681526020019081526020016000206003015490506000601d60008781526020019081526020016000206004015490506000602760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354f5a034886040518263ffffffff1660e01b81526004016137b8919061485b565b602060405180830381865afa1580156137d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137f99190614d5a565b90506000602760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631cb8d2cf896040518263ffffffff1660e01b8152600401613858919061485b565b602060405180830381865afa158015613875573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138999190614d5a565b90506000602760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663baa5f9668a6040518263ffffffff1660e01b81526004016138f8919061485b565b602060405180830381865afa158015613915573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139399190614d5a565b90506000602760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d13abd7d8b6040518263ffffffff1660e01b8152600401613998919061485b565b602060405180830381865afa1580156139b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139d99190614d5a565b9050600081838587898b8d8f6139ef9190614e16565b6139f99190614e16565b613a039190614e16565b613a0d9190614e16565b613a179190614e16565b613a219190614e16565b613a2b9190614e16565b9050809950505050505050505050919050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60195481565b6000602460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166377ade19083336040518363ffffffff1660e01b8152600401613ac9929190614b74565b602060405180830381865afa158015613ae6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b0a9190614bc9565b905080613b4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b4390614c53565b60405180910390fd5b601d600083815260200190815260200160002060020154831115613ba5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b9c9061532d565b60405180910390fd5b82601d60008481526020019081526020016000206002016000828254613bcb9190615143565b9250508190555082827fea3d38920c424e21749588b84ce0e4f0090a37f547efb9ea47f4235e8f0e2a8c60405160405180910390a3505050565b600080601d600084815260200190815260200160002060040154905080915050919050565b600080601d600084815260200190815260200160002060010154905080915050919050565b600080601d600084815260200190815260200160002060020154905080915050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b613ca261469c565b826014819055508160158190555080601681905550505050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60125481565b601a5481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60145481565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601b5481565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614613dd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613dcd906153bf565b60405180910390fd5b60018103613e6a576000601d60008481526020019081526020016000206001015411613e37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613e2e9061542b565b60405180910390fd5b6001601d60008481526020019081526020016000206001016000828254613e5e9190615143565b92505081905550614025565b60028103613efe576000601d60008481526020019081526020016000206002015411613ecb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613ec290615497565b60405180910390fd5b6001601d60008481526020019081526020016000206002016000828254613ef29190615143565b92505081905550614024565b60038103613f92576000601d60008481526020019081526020016000206003015411613f5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613f5690615503565b60405180910390fd5b6001601d60008481526020019081526020016000206003016000828254613f869190615143565b92505081905550614023565b60048103614022576000601d60008481526020019081526020016000206004015411613ff3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613fea9061556f565b60405180910390fd5b6001601d6000848152602001908152602001600020600401600082825461401a9190615143565b925050819055505b5b5b5b5050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61405761469c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036140c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016140bd90615601565b60405180910390fd5b6140cf8161471a565b50565b6140da61469c565b82601a8190555081601b8190555080601c81905550505050565b60115481565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461418a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016141819061566d565b60405180910390fd5b600060289050602260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b9334f0836040518263ffffffff1660e01b81526004016141eb919061485b565b602060405180830381865afa158015614208573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061422c9190614bc9565b1561423657601490505b6000601d60008481526020019081526020016000209050600060648383600101546142619190614f48565b61426b9190614de5565b9050600060648484600201546142819190614f48565b61428b9190614de5565b9050600060648585600401546142a19190614f48565b6142ab9190614de5565b90506000602760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354f5a034886040518263ffffffff1660e01b815260040161430a919061485b565b602060405180830381865afa158015614327573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061434b9190614d5a565b905060006064878361435d9190614f48565b6143679190614de5565b905085600101548511156143b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016143a790615123565b60405180910390fd5b85600201548411156143f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016143ee9061532d565b60405180910390fd5b856004015483111561443e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401614435906152c1565b60405180910390fd5b602760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354f5a034896040518263ffffffff1660e01b8152600401614499919061485b565b602060405180830381865afa1580156144b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144da9190614d5a565b81111561451c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401614513906156d9565b60405180910390fd5b848660010160008282546145309190615143565b925050819055508386600201600082825461454b9190615143565b92505081905550828660040160008282546145669190615143565b92505081905550602760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166346cea39189836040518363ffffffff1660e01b81526004016145ca929190614f8a565b600060405180830381600087803b1580156145e457600080fd5b505af11580156145f8573d6000803e3d6000fd5b50505050877fcca52be669a69b267b78451892a3092ae8af8ffe8ce3ba4ba0b5dd1890dea86d8686868560405161463294939291906156f9565b60405180910390a25050505050505050565b600260015403614689576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016146809061578a565b60405180910390fd5b6002600181905550565b60018081905550565b6146a46147de565b73ffffffffffffffffffffffffffffffffffffffff166146c261362e565b73ffffffffffffffffffffffffffffffffffffffff1614614718576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161470f906157f6565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000614811826147e6565b9050919050565b61482181614806565b82525050565b600060208201905061483c6000830184614818565b92915050565b6000819050919050565b61485581614842565b82525050565b6000602082019050614870600083018461484c565b92915050565b600080fd5b61488481614842565b811461488f57600080fd5b50565b6000813590506148a18161487b565b92915050565b600080604083850312156148be576148bd614876565b5b60006148cc85828601614892565b92505060206148dd85828601614892565b9150509250929050565b600080600060608486031215614900576148ff614876565b5b600061490e86828701614892565b935050602061491f86828701614892565b925050604061493086828701614892565b9150509250925092565b6000602082840312156149505761494f614876565b5b600061495e84828501614892565b91505092915050565b61497081614806565b811461497b57600080fd5b50565b60008135905061498d81614967565b92915050565b6000806000806000806000806000806101408b8d0312156149b7576149b6614876565b5b60006149c58d828e0161497e565b9a505060206149d68d828e0161497e565b99505060406149e78d828e0161497e565b98505060606149f88d828e0161497e565b9750506080614a098d828e0161497e565b96505060a0614a1a8d828e0161497e565b95505060c0614a2b8d828e0161497e565b94505060e0614a3c8d828e0161497e565b935050610100614a4e8d828e0161497e565b925050610120614a608d828e0161497e565b9150509295989b9194979a5092959850565b60008115159050919050565b614a8781614a72565b82525050565b600060a082019050614aa26000830188614a7e565b614aaf602083018761484c565b614abc604083018661484c565b614ac9606083018561484c565b614ad6608083018461484c565b9695505050505050565b60008060008060808587031215614afa57614af9614876565b5b6000614b088782880161497e565b9450506020614b198782880161497e565b9350506040614b2a8782880161497e565b9250506060614b3b8782880161497e565b91505092959194509250565b600060208284031215614b5d57614b5c614876565b5b6000614b6b8482850161497e565b91505092915050565b6000604082019050614b89600083018561484c565b614b966020830184614818565b9392505050565b614ba681614a72565b8114614bb157600080fd5b50565b600081519050614bc381614b9d565b92915050565b600060208284031215614bdf57614bde614876565b5b6000614bed84828501614bb4565b91505092915050565b600082825260208201905092915050565b7f216e6174696f6e206f776e657200000000000000000000000000000000000000600082015250565b6000614c3d600d83614bf6565b9150614c4882614c07565b602082019050919050565b60006020820190508181036000830152614c6c81614c30565b9050919050565b600081519050614c828161487b565b92915050565b60008060408385031215614c9f57614c9e614876565b5b6000614cad85828601614c73565b9250506020614cbe85828601614c73565b9150509250929050565b7f70757263686173652065786365656473206461696c792070757263686173652060008201527f6c696d6974000000000000000000000000000000000000000000000000000000602082015250565b6000614d24602583614bf6565b9150614d2f82614cc8565b604082019050919050565b60006020820190508181036000830152614d5381614d17565b9050919050565b600060208284031215614d7057614d6f614876565b5b6000614d7e84828501614c73565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614df082614842565b9150614dfb83614842565b925082614e0b57614e0a614d87565b5b828204905092915050565b6000614e2182614842565b9150614e2c83614842565b9250828201905080821115614e4457614e43614db6565b5b92915050565b7f6e656564206d6f726520736869707961726473206f7220696e6672617374727560008201527f6374757265000000000000000000000000000000000000000000000000000000602082015250565b6000614ea6602583614bf6565b9150614eb182614e4a565b604082019050919050565b60006020820190508181036000830152614ed581614e99565b9050919050565b7f6e656564206d6f726520746563686e6f6c6f6779000000000000000000000000600082015250565b6000614f12601483614bf6565b9150614f1d82614edc565b602082019050919050565b60006020820190508181036000830152614f4181614f05565b9050919050565b6000614f5382614842565b9150614f5e83614842565b9250828202614f6c81614842565b91508282048414831517614f8357614f82614db6565b5b5092915050565b6000604082019050614f9f600083018561484c565b614fac602083018461484c565b9392505050565b7f66756e6374696f6e206f6e6c792063616c6c61626c652066726f6d20636f756e60008201527f7472794d696e7465720000000000000000000000000000000000000000000000602082015250565b600061500f602983614bf6565b915061501a82614fb3565b604082019050919050565b6000602082019050818103600083015261503e81615002565b9050919050565b7f6e61767920616c726561647920696e697469616c697a656420666f722074686960008201527f73206e6174696f6e000000000000000000000000000000000000000000000000602082015250565b60006150a1602883614bf6565b91506150ac82615045565b604082019050919050565b600060208201905081810360008301526150d081615094565b9050919050565b7f6e6f7420656e6f75676820636f72766574746573000000000000000000000000600082015250565b600061510d601483614bf6565b9150615118826150d7565b602082019050919050565b6000602082019050818103600083015261513c81615100565b9050919050565b600061514e82614842565b915061515983614842565b925082820390508181111561517157615170614db6565b5b92915050565b7f6e656564206d6f726520647279646f636b73206f7220696e667261737472756360008201527f7475726500000000000000000000000000000000000000000000000000000000602082015250565b60006151d3602483614bf6565b91506151de82615177565b604082019050919050565b60006020820190508181036000830152615202816151c6565b9050919050565b7f6e6f7420656e6f75676820626174746c65736869707300000000000000000000600082015250565b600061523f601683614bf6565b915061524a82615209565b602082019050919050565b6000602082019050818103600083015261526e81615232565b9050919050565b7f6e6f7420656e6f75676820637275697365727300000000000000000000000000600082015250565b60006152ab601383614bf6565b91506152b682615275565b602082019050919050565b600060208201905081810360008301526152da8161529e565b9050919050565b7f6e6f7420656e6f756768206c616e64696e672073686970730000000000000000600082015250565b6000615317601883614bf6565b9150615322826152e1565b602082019050919050565b600060208201905081810360008301526153468161530a565b9050919050565b7f66756e6374696f6e206f6e6c792063616c6c61626c652066726f6d206164646960008201527f74696f6e616c206e61767920636f6e7472616374000000000000000000000000602082015250565b60006153a9603483614bf6565b91506153b48261534d565b604082019050919050565b600060208201905081810360008301526153d88161539c565b9050919050565b7f756e646572666c6f773a20636f72766574746500000000000000000000000000600082015250565b6000615415601383614bf6565b9150615420826153df565b602082019050919050565b6000602082019050818103600083015261544481615408565b9050919050565b7f756e646572666c6f773a206c616e64696e672073686970000000000000000000600082015250565b6000615481601783614bf6565b915061548c8261544b565b602082019050919050565b600060208201905081810360008301526154b081615474565b9050919050565b7f756e646572666c6f773a20626174746c65736869700000000000000000000000600082015250565b60006154ed601583614bf6565b91506154f8826154b7565b602082019050919050565b6000602082019050818103600083015261551c816154e0565b9050919050565b7f756e646572666c6f773a20637275697365720000000000000000000000000000600082015250565b6000615559601283614bf6565b915061556482615523565b602082019050919050565b600060208201905081810360008301526155888161554c565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006155eb602683614bf6565b91506155f68261558f565b604082019050919050565b6000602082019050818103600083015261561a816155de565b9050919050565b7f6f6e6c792063616c6c61626c652066726f6d206e756b6520636f6e7472616374600082015250565b6000615657602083614bf6565b915061566282615621565b602082019050919050565b600060208201905081810360008301526156868161564a565b9050919050565b7f6e6f7420656e6f75676820667269676174657300000000000000000000000000600082015250565b60006156c3601383614bf6565b91506156ce8261568d565b602082019050919050565b600060208201905081810360008301526156f2816156b6565b9050919050565b600060808201905061570e600083018761484c565b61571b602083018661484c565b615728604083018561484c565b615735606083018461484c565b95945050505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000615774601f83614bf6565b915061577f8261573e565b602082019050919050565b600060208201905081810360008301526157a381615767565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006157e0602083614bf6565b91506157eb826157aa565b602082019050919050565b6000602082019050818103600083015261580f816157d3565b905091905056fea26469706673582212202193161ba1d4cd98ab2e7258478ba4fa10809dde8745f08842585c7ebc8a770764736f6c63430008110033",
  "devdoc": {
    "author": "OxSnosh",
    "details": "this contract inherits from openzeppelin's ownable contract",
    "kind": "dev",
    "methods": {
      "buyBattleship(uint256,uint256)": {
        "details": "this is a public function callable only by the nation ownerthis function will allow a nation owner to purchase a battleship vessel",
        "params": {
          "amount": "this is the number of battleship being purchased",
          "id": "this is the naton id of the nation purchasing vessels"
        }
      },
      "buyCorvette(uint256,uint256)": {
        "details": "this is a public function callable only by the nation ownerthis function will allow a nation owner to purchase a corvette vessel",
        "params": {
          "amount": "this is the number of corvettes being purchased",
          "id": "this is the naton id of the nation purchasing vessels"
        }
      },
      "buyCruiser(uint256,uint256)": {
        "details": "this is a public function callable only by the nation ownerthis function will allow a nation owner to purchase a cruiser vessel",
        "params": {
          "amount": "this is the number of cruisers being purchased",
          "id": "this is the naton id of the nation purchasing vessels"
        }
      },
      "buyLandingShip(uint256,uint256)": {
        "details": "this is a public function callable only by the nation ownerthis function will allow a nation owner to purchase a landing ships vessel",
        "params": {
          "amount": "this is the number of landing ships being purchased",
          "id": "this is the naton id of the nation purchasing vessels"
        }
      },
      "decreaseNavyFromNukeContract(uint256)": {
        "details": "this is a public function only callable from the nuke contractthis function will decrease the amount of ships that are vulnerable to nuclear attacks when a nation is attacked by a nuke strike",
        "params": {
          "defenderId": "this is the nation id of the nation being attacked"
        }
      },
      "generateNavy(uint256)": {
        "details": "this is a public function only callable from the countryMinter contractthis function will allow a nation owner to buy navy vessels",
        "params": {
          "id": "this is the nation id of the nation being minted"
        }
      },
      "getBattleshipCount(uint256)": {
        "details": "this is a public view function that will return the number of battleships a nation ownsthis function wll return the number of battleships a nation owns",
        "params": {
          "id": "this is the nation id of the nation being queried"
        },
        "returns": {
          "_0": "uint256 this is the number of battleships for a given nation"
        }
      },
      "getCorvetteCount(uint256)": {
        "details": "this is a public view function that will return the number of corvettes a nation ownsthis function wll return the number of corvettes a nation owns",
        "params": {
          "id": "this is the nation id of the nation being queried"
        },
        "returns": {
          "_0": "uint256 this is the number of corvettes for a given nation"
        }
      },
      "getCruiserCount(uint256)": {
        "details": "this is a public view function that will return the number of cruisers a nation ownsthis function wll return the number of cruisers a nation owns",
        "params": {
          "id": "this is the nation id of the nation being queried"
        },
        "returns": {
          "_0": "uint256 this is the number of cruisers for a given nation"
        }
      },
      "getLandingShipCount(uint256)": {
        "details": "this is a public view function that will return the number of landing ships a nation ownsthis function wll return the number of landing ships a nation owns",
        "params": {
          "id": "this is the nation id of the nation being queried"
        },
        "returns": {
          "_0": "uint256 this is the number of landing ships for a given nation"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "settings(address,address,address,address,address,address,address,address,address,address)": {
        "details": "this function is only callable by the contract ownerthis function will be called immediately after contract deployment in order to set contract pointers"
      },
      "settings2(address,address,address,address)": {
        "details": "this function is only callable by the contract ownerthis function will be called immediately after contract deployment in order to set contract pointers"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateBattleshipSpecs(uint256,uint256,uint256)": {
        "details": "this function is only callable by the contract owner"
      },
      "updateCorvetteSpecs(uint256,uint256,uint256)": {
        "details": "this function is only callable by the contract owner"
      },
      "updateCruiserSpecs(uint256,uint256,uint256)": {
        "details": "this function is only callable by the contract owner"
      },
      "updateLandingShipSpecs(uint256,uint256,uint256)": {
        "details": "this function is only callable by the contract owner"
      }
    },
    "title": "NavyContract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "buyBattleship(uint256,uint256)": {
        "notice": "this function will allow a nation owner to purchase a battleship vessel"
      },
      "buyCorvette(uint256,uint256)": {
        "notice": "this function will allow a nation owner to purchase a corvette vessel"
      },
      "buyCruiser(uint256,uint256)": {
        "notice": "this function will allow a nation owner to purchase a cruiser vessel"
      },
      "buyLandingShip(uint256,uint256)": {
        "notice": "this function will allow a nation owner to purchase a landing ships vessel"
      },
      "decreaseNavyFromNukeContract(uint256)": {
        "notice": "this function will decrease the amount of ships that are vulnerable to nuclear attacks when a nation is attacked by a nuke strikevessels available to nuke strikes are corvettes, landing ships, cruisers and frigatesa nuke strike will reduce the number of these ships by 25% (12% with a fallout shelter system)"
      },
      "generateNavy(uint256)": {
        "notice": "this function will allow a nation owner to buy navy vessels"
      },
      "getBattleshipCount(uint256)": {
        "notice": "this functon will return the number of battleships a nation owns"
      },
      "getCorvetteCount(uint256)": {
        "notice": "this functon will return the number of corvettes a nation owns"
      },
      "getCruiserCount(uint256)": {
        "notice": "this functon will return the number of cruisers a nation owns"
      },
      "getLandingShipCount(uint256)": {
        "notice": "this functon will return the number of landing ships a nation owns"
      }
    },
    "notice": "this contract will allow a user to purchase navy vessels",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 161,
        "contract": "contracts/Navy.sol:NavyContract",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 277,
        "contract": "contracts/Navy.sol:NavyContract",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 42059,
        "contract": "contracts/Navy.sol:NavyContract",
        "label": "treasuryAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 42061,
        "contract": "contracts/Navy.sol:NavyContract",
        "label": "improvementsContract1Address",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 42063,
        "contract": "contracts/Navy.sol:NavyContract",
        "label": "improvementsContract3Address",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 42065,
        "contract": "contracts/Navy.sol:NavyContract",
        "label": "improvements4",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 42067,
        "contract": "contracts/Navy.sol:NavyContract",
        "label": "resources",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 42069,
        "contract": "contracts/Navy.sol:NavyContract",
        "label": "navyBattleAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 42071,
        "contract": "contracts/Navy.sol:NavyContract",
        "label": "military",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 42073,
        "contract": "contracts/Navy.sol:NavyContract",
        "label": "nukes",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 42075,
        "contract": "contracts/Navy.sol:NavyContract",
        "label": "wonders1",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 42077,
        "contract": "contracts/Navy.sol:NavyContract",
        "label": "countryMinter",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 42079,
        "contract": "contracts/Navy.sol:NavyContract",
        "label": "navalActions",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 42081,
        "contract": "contracts/Navy.sol:NavyContract",
        "label": "additionalNavy",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 42083,
        "contract": "contracts/Navy.sol:NavyContract",
        "label": "navy2Contract",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 42085,
        "contract": "contracts/Navy.sol:NavyContract",
        "label": "bonusResources",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 42087,
        "contract": "contracts/Navy.sol:NavyContract",
        "label": "infrastructure",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 42095,
        "contract": "contracts/Navy.sol:NavyContract",
        "label": "corvetteCost",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 42098,
        "contract": "contracts/Navy.sol:NavyContract",
        "label": "corvetteRequiredInfrastructure",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 42101,
        "contract": "contracts/Navy.sol:NavyContract",
        "label": "corvetteRequiredTechnology",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 42109,
        "contract": "contracts/Navy.sol:NavyContract",
        "label": "landingShipCost",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 42112,
        "contract": "contracts/Navy.sol:NavyContract",
        "label": "landingShipRequiredInfrastructure",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 42115,
        "contract": "contracts/Navy.sol:NavyContract",
        "label": "landingShipRequiredTechnology",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 42123,
        "contract": "contracts/Navy.sol:NavyContract",
        "label": "battleshipCost",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 42126,
        "contract": "contracts/Navy.sol:NavyContract",
        "label": "battleshipRequiredInfrastructure",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 42129,
        "contract": "contracts/Navy.sol:NavyContract",
        "label": "battleshipRequiredTechnology",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 42137,
        "contract": "contracts/Navy.sol:NavyContract",
        "label": "cruiserCost",
        "offset": 0,
        "slot": "26",
        "type": "t_uint256"
      },
      {
        "astId": 42140,
        "contract": "contracts/Navy.sol:NavyContract",
        "label": "cruiserRequiredInfrastructure",
        "offset": 0,
        "slot": "27",
        "type": "t_uint256"
      },
      {
        "astId": 42143,
        "contract": "contracts/Navy.sol:NavyContract",
        "label": "cruiserRequiredTechnology",
        "offset": 0,
        "slot": "28",
        "type": "t_uint256"
      },
      {
        "astId": 42159,
        "contract": "contracts/Navy.sol:NavyContract",
        "label": "idToNavy",
        "offset": 0,
        "slot": "29",
        "type": "t_mapping(t_uint256,t_struct(Navy)42154_storage)"
      },
      {
        "astId": 42230,
        "contract": "contracts/Navy.sol:NavyContract",
        "label": "res",
        "offset": 0,
        "slot": "30",
        "type": "t_contract(ResourcesContract)55726"
      },
      {
        "astId": 42233,
        "contract": "contracts/Navy.sol:NavyContract",
        "label": "mil",
        "offset": 0,
        "slot": "31",
        "type": "t_contract(MilitaryContract)39720"
      },
      {
        "astId": 42236,
        "contract": "contracts/Navy.sol:NavyContract",
        "label": "imp4",
        "offset": 0,
        "slot": "32",
        "type": "t_contract(ImprovementsContract4)33268"
      },
      {
        "astId": 42239,
        "contract": "contracts/Navy.sol:NavyContract",
        "label": "nuke",
        "offset": 0,
        "slot": "33",
        "type": "t_contract(NukeContract)52862"
      },
      {
        "astId": 42242,
        "contract": "contracts/Navy.sol:NavyContract",
        "label": "won1",
        "offset": 0,
        "slot": "34",
        "type": "t_contract(WondersContract1)69518"
      },
      {
        "astId": 42245,
        "contract": "contracts/Navy.sol:NavyContract",
        "label": "navAct",
        "offset": 0,
        "slot": "35",
        "type": "t_contract(NavalActionsContract)42052"
      },
      {
        "astId": 42248,
        "contract": "contracts/Navy.sol:NavyContract",
        "label": "mint",
        "offset": 0,
        "slot": "36",
        "type": "t_contract(CountryMinter)13651"
      },
      {
        "astId": 42251,
        "contract": "contracts/Navy.sol:NavyContract",
        "label": "addNav",
        "offset": 0,
        "slot": "37",
        "type": "t_contract(AdditionalNavyContract)46282"
      },
      {
        "astId": 42254,
        "contract": "contracts/Navy.sol:NavyContract",
        "label": "bonus",
        "offset": 0,
        "slot": "38",
        "type": "t_contract(BonusResourcesContract)56862"
      },
      {
        "astId": 42257,
        "contract": "contracts/Navy.sol:NavyContract",
        "label": "navy2",
        "offset": 0,
        "slot": "39",
        "type": "t_contract(NavyContract2)45419"
      },
      {
        "astId": 42260,
        "contract": "contracts/Navy.sol:NavyContract",
        "label": "inf",
        "offset": 0,
        "slot": "40",
        "type": "t_contract(InfrastructureContract)37280"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AdditionalNavyContract)46282": {
        "encoding": "inplace",
        "label": "contract AdditionalNavyContract",
        "numberOfBytes": "20"
      },
      "t_contract(BonusResourcesContract)56862": {
        "encoding": "inplace",
        "label": "contract BonusResourcesContract",
        "numberOfBytes": "20"
      },
      "t_contract(CountryMinter)13651": {
        "encoding": "inplace",
        "label": "contract CountryMinter",
        "numberOfBytes": "20"
      },
      "t_contract(ImprovementsContract4)33268": {
        "encoding": "inplace",
        "label": "contract ImprovementsContract4",
        "numberOfBytes": "20"
      },
      "t_contract(InfrastructureContract)37280": {
        "encoding": "inplace",
        "label": "contract InfrastructureContract",
        "numberOfBytes": "20"
      },
      "t_contract(MilitaryContract)39720": {
        "encoding": "inplace",
        "label": "contract MilitaryContract",
        "numberOfBytes": "20"
      },
      "t_contract(NavalActionsContract)42052": {
        "encoding": "inplace",
        "label": "contract NavalActionsContract",
        "numberOfBytes": "20"
      },
      "t_contract(NavyContract2)45419": {
        "encoding": "inplace",
        "label": "contract NavyContract2",
        "numberOfBytes": "20"
      },
      "t_contract(NukeContract)52862": {
        "encoding": "inplace",
        "label": "contract NukeContract",
        "numberOfBytes": "20"
      },
      "t_contract(ResourcesContract)55726": {
        "encoding": "inplace",
        "label": "contract ResourcesContract",
        "numberOfBytes": "20"
      },
      "t_contract(WondersContract1)69518": {
        "encoding": "inplace",
        "label": "contract WondersContract1",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(Navy)42154_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NavyContract.Navy)",
        "numberOfBytes": "32",
        "value": "t_struct(Navy)42154_storage"
      },
      "t_struct(Navy)42154_storage": {
        "encoding": "inplace",
        "label": "struct NavyContract.Navy",
        "members": [
          {
            "astId": 42145,
            "contract": "contracts/Navy.sol:NavyContract",
            "label": "initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 42147,
            "contract": "contracts/Navy.sol:NavyContract",
            "label": "corvetteCount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 42149,
            "contract": "contracts/Navy.sol:NavyContract",
            "label": "landingShipCount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 42151,
            "contract": "contracts/Navy.sol:NavyContract",
            "label": "battleshipCount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 42153,
            "contract": "contracts/Navy.sol:NavyContract",
            "label": "cruiserCount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}